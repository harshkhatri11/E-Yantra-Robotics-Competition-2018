
motion_prg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012c  00800200  00002e18  00002ecc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e18  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  0080032c  0080032c  00002ff8  2**0
                  ALLOC
  3 .eeprom       000000c8  00810000  00810000  00002ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000081f  00000000  00000000  000030e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d2f  00000000  00000000  000038ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000480  00000000  00000000  0000662e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c30  00000000  00000000  00006aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000650  00000000  00000000  000096e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f3  00000000  00000000  00009d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001466  00000000  00000000  0000a623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c8  00000000  00000000  0000ba89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__vector_5>
      18:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e1       	ldi	r30, 0x18	; 24
      fc:	fe e2       	ldi	r31, 0x2E	; 46
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 32       	cpi	r26, 0x2C	; 44
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	ac e2       	ldi	r26, 0x2C	; 44
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 39       	cpi	r26, 0x9B	; 155
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <main>
     122:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     12a:	86 e6       	ldi	r24, 0x66	; 102
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	fc 01       	movw	r30, r24
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x6>
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	40 e3       	ldi	r20, 0x30	; 48
     13a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	38 e4       	ldi	r19, 0x48	; 72
     142:	f9 01       	movw	r30, r18
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	fc 01       	movw	r30, r24
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     150:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     152:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     154:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     156:	42 9a       	sbi	0x08, 2	; 8
     158:	f9 01       	movw	r30, r18
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     15e:	42 98       	cbi	0x08, 2	; 8
     160:	fc 01       	movw	r30, r24
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     166:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     168:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     16a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16c:	42 9a       	sbi	0x08, 2	; 8
     16e:	f9 01       	movw	r30, r18
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     174:	42 98       	cbi	0x08, 2	; 8
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     17a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     17c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     17e:	80 e2       	ldi	r24, 0x20	; 32
     180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     182:	42 9a       	sbi	0x08, 2	; 8
     184:	c9 01       	movw	r24, r18
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8

	
}
     18c:	08 95       	ret

0000018e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     18e:	98 b1       	in	r25, 0x08	; 8
     190:	9f 70       	andi	r25, 0x0F	; 15
     192:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     194:	28 b1       	in	r18, 0x08	; 8
     196:	98 2f       	mov	r25, r24
     198:	90 7f       	andi	r25, 0xF0	; 240
     19a:	92 2b       	or	r25, r18
     19c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1a0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1a2:	42 9a       	sbi	0x08, 2	; 8
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	38 e4       	ldi	r19, 0x48	; 72
     1a8:	f9 01       	movw	r30, r18
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1ae:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1b6:	98 b1       	in	r25, 0x08	; 8
     1b8:	82 95       	swap	r24
     1ba:	80 7f       	andi	r24, 0xF0	; 240
     1bc:	98 2b       	or	r25, r24
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	c9 01       	movw	r24, r18
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1cc:	42 98       	cbi	0x08, 2	; 8
}
     1ce:	08 95       	ret

000001d0 <lcd_init>:
     1d0:	86 e6       	ldi	r24, 0x66	; 102
     1d2:	9e e0       	ldi	r25, 0x0E	; 14
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x4>
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     1d8:	88 e2       	ldi	r24, 0x28	; 40
     1da:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x01);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x06);
     1e4:	86 e0       	ldi	r24, 0x06	; 6
     1e6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x0E);
     1ea:	8e e0       	ldi	r24, 0x0E	; 14
     1ec:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x80);
     1f0:	80 e8       	ldi	r24, 0x80	; 128
     1f2:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
		
}
     1f6:	08 95       	ret

000001f8 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     1f8:	98 b1       	in	r25, 0x08	; 8
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1fe:	28 b1       	in	r18, 0x08	; 8
     200:	98 2f       	mov	r25, r24
     202:	90 7f       	andi	r25, 0xF0	; 240
     204:	92 2b       	or	r25, r18
     206:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     208:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     20a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     20c:	42 9a       	sbi	0x08, 2	; 8
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	38 e4       	ldi	r19, 0x48	; 72
     212:	f9 01       	movw	r30, r18
     214:	31 97       	sbiw	r30, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     218:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     21a:	98 b1       	in	r25, 0x08	; 8
     21c:	9f 70       	andi	r25, 0x0F	; 15
     21e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     220:	98 b1       	in	r25, 0x08	; 8
     222:	82 95       	swap	r24
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	98 2b       	or	r25, r24
     228:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     22a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     22c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     22e:	42 9a       	sbi	0x08, 2	; 8
     230:	c9 01       	movw	r24, r18
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     236:	42 98       	cbi	0x08, 2	; 8
}
     238:	08 95       	ret

0000023a <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     23a:	80 e8       	ldi	r24, 0x80	; 128
     23c:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
}
     240:	08 95       	ret

00000242 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
     248:	03 c0       	rjmp	.+6      	; 0x250 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     24a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
		str++;
     24e:	21 96       	adiw	r28, 0x01	; 1


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     250:	88 81       	ld	r24, Y
     252:	88 23       	and	r24, r24
     254:	d1 f7       	brne	.-12     	; 0x24a <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	69 f0       	breq	.+26     	; 0x27a <lcd_cursor+0x1e>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	18 f4       	brcc	.+6      	; 0x26a <lcd_cursor+0xe>
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	a9 f4       	brne	.+42     	; 0x292 <lcd_cursor+0x36>
     268:	05 c0       	rjmp	.+10     	; 0x274 <lcd_cursor+0x18>
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	49 f0       	breq	.+18     	; 0x280 <lcd_cursor+0x24>
     26e:	84 30       	cpi	r24, 0x04	; 4
     270:	81 f4       	brne	.+32     	; 0x292 <lcd_cursor+0x36>
     272:	0b c0       	rjmp	.+22     	; 0x28a <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     274:	86 2f       	mov	r24, r22
     276:	81 58       	subi	r24, 0x81	; 129
     278:	05 c0       	rjmp	.+10     	; 0x284 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     27a:	86 2f       	mov	r24, r22
     27c:	81 54       	subi	r24, 0x41	; 65
     27e:	02 c0       	rjmp	.+4      	; 0x284 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     280:	86 2f       	mov	r24, r22
     282:	8d 56       	subi	r24, 0x6D	; 109
     284:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     288:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     28a:	86 2f       	mov	r24, r22
     28c:	8d 52       	subi	r24, 0x2D	; 45
     28e:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     292:	08 95       	ret

00000294 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	8a 01       	movw	r16, r20
     29e:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2a0:	88 23       	and	r24, r24
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <lcd_print+0x14>
     2a4:	66 23       	and	r22, r22
     2a6:	19 f4       	brne	.+6      	; 0x2ae <lcd_print+0x1a>
	{
		lcd_home();
     2a8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_home>
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2ae:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2b2:	c5 30       	cpi	r28, 0x05	; 5
     2b4:	d1 05       	cpc	r29, r1
     2b6:	71 f4       	brne	.+28     	; 0x2d4 <lcd_print+0x40>
	{
		million=value/10000+48;
     2b8:	c8 01       	movw	r24, r16
     2ba:	60 e1       	ldi	r22, 0x10	; 16
     2bc:	77 e2       	ldi	r23, 0x27	; 39
     2be:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodhi4>
     2c2:	cb 01       	movw	r24, r22
     2c4:	c0 96       	adiw	r24, 0x30	; 48
     2c6:	90 93 7b 03 	sts	0x037B, r25
     2ca:	80 93 7a 03 	sts	0x037A, r24
		lcd_wr_char(million);
     2ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     2d4:	c4 30       	cpi	r28, 0x04	; 4
     2d6:	d1 05       	cpc	r29, r1
     2d8:	11 f0       	breq	.+4      	; 0x2de <lcd_print+0x4a>
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	16 c0       	rjmp	.+44     	; 0x30a <lcd_print+0x76>
	{
		temp = value/1000;
     2de:	c8 01       	movw	r24, r16
     2e0:	68 ee       	ldi	r22, 0xE8	; 232
     2e2:	73 e0       	ldi	r23, 0x03	; 3
     2e4:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodhi4>
     2e8:	cb 01       	movw	r24, r22
     2ea:	60 93 7c 03 	sts	0x037C, r22
     2ee:	90 93 7d 03 	sts	0x037D, r25
		thousand = temp%10 + 48;
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodhi4>
     2fa:	c0 96       	adiw	r24, 0x30	; 48
     2fc:	90 93 9a 03 	sts	0x039A, r25
     300:	80 93 99 03 	sts	0x0399, r24
		lcd_wr_char(thousand);
     304:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     308:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     30a:	c3 30       	cpi	r28, 0x03	; 3
     30c:	d1 05       	cpc	r29, r1
     30e:	21 f0       	breq	.+8      	; 0x318 <lcd_print+0x84>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	11 f0       	breq	.+4      	; 0x318 <lcd_print+0x84>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	16 c0       	rjmp	.+44     	; 0x344 <lcd_print+0xb0>
	{
		temp = value/100;
     318:	c8 01       	movw	r24, r16
     31a:	64 e6       	ldi	r22, 0x64	; 100
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodhi4>
     322:	cb 01       	movw	r24, r22
     324:	60 93 7c 03 	sts	0x037C, r22
     328:	90 93 7d 03 	sts	0x037D, r25
		hundred = temp%10 + 48;
     32c:	6a e0       	ldi	r22, 0x0A	; 10
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodhi4>
     334:	c0 96       	adiw	r24, 0x30	; 48
     336:	90 93 96 03 	sts	0x0396, r25
     33a:	80 93 95 03 	sts	0x0395, r24
		lcd_wr_char(hundred);
     33e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     342:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     344:	c2 30       	cpi	r28, 0x02	; 2
     346:	d1 05       	cpc	r29, r1
     348:	21 f0       	breq	.+8      	; 0x352 <lcd_print+0xbe>
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	11 f0       	breq	.+4      	; 0x352 <lcd_print+0xbe>
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	16 c0       	rjmp	.+44     	; 0x37e <lcd_print+0xea>
	{
		temp = value/10;
     352:	c8 01       	movw	r24, r16
     354:	6a e0       	ldi	r22, 0x0A	; 10
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodhi4>
     35c:	cb 01       	movw	r24, r22
     35e:	60 93 7c 03 	sts	0x037C, r22
     362:	90 93 7d 03 	sts	0x037D, r25
		tens = temp%10 + 48;
     366:	6a e0       	ldi	r22, 0x0A	; 10
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodhi4>
     36e:	c0 96       	adiw	r24, 0x30	; 48
     370:	90 93 93 03 	sts	0x0393, r25
     374:	80 93 92 03 	sts	0x0392, r24
		lcd_wr_char(tens);
     378:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
     37c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     37e:	c1 30       	cpi	r28, 0x01	; 1
     380:	d1 05       	cpc	r29, r1
     382:	11 f0       	breq	.+4      	; 0x388 <lcd_print+0xf4>
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	61 f4       	brne	.+24     	; 0x3a0 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     388:	c8 01       	movw	r24, r16
     38a:	6a e0       	ldi	r22, 0x0A	; 10
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__udivmodhi4>
     392:	c0 96       	adiw	r24, 0x30	; 48
     394:	90 93 98 03 	sts	0x0398, r25
     398:	80 93 97 03 	sts	0x0397, r24
		lcd_wr_char(unit);
     39c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	if(digits>5)
     3a0:	26 97       	sbiw	r28, 0x06	; 6
     3a2:	1c f0       	brlt	.+6      	; 0x3aa <lcd_print+0x116>
	{
		lcd_wr_char('E');
     3a4:	85 e4       	ldi	r24, 0x45	; 69
     3a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_wr_char>
	}
	
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <buzzer_pin_config>:
int data_array[10];
int i=0;
int have_data=0;
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     3b4:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     3b6:	43 98       	cbi	0x08, 3	; 8
}
     3b8:	08 95       	ret

000003ba <port_init>:
int data_array[10];
int i=0;
int have_data=0;
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     3ba:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     3bc:	43 98       	cbi	0x08, 3	; 8

//Function to initialize ports
void port_init()
{
	buzzer_pin_config();
}
     3be:	08 95       	ret

000003c0 <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     3c0:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     3c2:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     3c4:	88 b9       	out	0x08, r24	; 8
}
     3c6:	08 95       	ret

000003c8 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     3c8:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     3ca:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     3cc:	88 b9       	out	0x08, r24	; 8
}
     3ce:	08 95       	ret

000003d0 <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
     3d0:	e1 ed       	ldi	r30, 0xD1	; 209
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     3d6:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     3da:	86 e0       	ldi	r24, 0x06	; 6
     3dc:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
     3e0:	8f e5       	ldi	r24, 0x5F	; 95
     3e2:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     3e6:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     3ea:	88 e9       	ldi	r24, 0x98	; 152
     3ec:	80 83       	st	Z, r24
}
     3ee:	08 95       	ret

000003f0 <__vector_51>:

int ack=0;
unsigned char data1;
SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	0b b6       	in	r0, 0x3b	; 59
     3fa:	0f 92       	push	r0
     3fc:	11 24       	eor	r1, r1
     3fe:	2f 93       	push	r18
     400:	3f 93       	push	r19
     402:	8f 93       	push	r24
     404:	9f 93       	push	r25
     406:	ef 93       	push	r30
     408:	ff 93       	push	r31
		
		data = UDR2; 				//making copy of data from UDR2 in 'data' variable 
     40a:	80 91 d6 00 	lds	r24, 0x00D6
     40e:	80 93 94 03 	sts	0x0394, r24
		UDR2 = data1;
     412:	20 91 77 03 	lds	r18, 0x0377
     416:	20 93 d6 00 	sts	0x00D6, r18
		data_array[i++]=data-48;
     41a:	20 91 2c 03 	lds	r18, 0x032C
     41e:	30 91 2d 03 	lds	r19, 0x032D
     422:	f9 01       	movw	r30, r18
     424:	ee 0f       	add	r30, r30
     426:	ff 1f       	adc	r31, r31
     428:	e2 58       	subi	r30, 0x82	; 130
     42a:	fc 4f       	sbci	r31, 0xFC	; 252
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	c0 97       	sbiw	r24, 0x30	; 48
     430:	91 83       	std	Z+1, r25	; 0x01
     432:	80 83       	st	Z, r24
     434:	2f 5f       	subi	r18, 0xFF	; 255
     436:	3f 4f       	sbci	r19, 0xFF	; 255
     438:	30 93 2d 03 	sts	0x032D, r19
     43c:	20 93 2c 03 	sts	0x032C, r18
		if(i==array_length)
     440:	80 91 20 02 	lds	r24, 0x0220
     444:	90 91 21 02 	lds	r25, 0x0221
     448:	28 17       	cp	r18, r24
     44a:	39 07       	cpc	r19, r25
     44c:	21 f4       	brne	.+8      	; 0x456 <__vector_51+0x66>
		{
			i=0;
     44e:	10 92 2d 03 	sts	0x032D, r1
     452:	10 92 2c 03 	sts	0x032C, r1
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     456:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
     458:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
     45a:	88 b9       	out	0x08, r24	; 8
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
     45c:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
     45e:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
     460:	88 b9       	out	0x08, r24	; 8
		{
			i=0;
		}
		buzzer_on();
		buzzer_off();
		have_data=1;//UDR2 = data;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	90 93 2f 03 	sts	0x032F, r25
     46a:	80 93 2e 03 	sts	0x032E, r24
		
	 				//echo data back to PC
	//buzzer_on();
	
	//buzzer_off();
}
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0b be       	out	0x3b, r0	; 59
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
 cli(); //Clears the global interrupts
     488:	f8 94       	cli
int data_array[10];
int i=0;
int have_data=0;
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
     48a:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     48c:	43 98       	cbi	0x08, 3	; 8
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
     48e:	e1 ed       	ldi	r30, 0xD1	; 209
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     494:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     498:	86 e0       	ldi	r24, 0x06	; 6
     49a:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
     49e:	8f e5       	ldi	r24, 0x5F	; 95
     4a0:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
     4a4:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
     4a8:	88 e9       	ldi	r24, 0x98	; 152
     4aa:	80 83       	st	Z, r24
void init_devices()
{
 cli(); //Clears the global interrupts
 port_init();  //Initializes all the ports
 uart2_init(); //Initailize UART1 for serial communiaction
 sei();   //Enables the global interrupts
     4ac:	78 94       	sei
}
     4ae:	08 95       	ret

000004b0 <have_d>:
* Example Call: if(have_d()==0);
*
*/
int have_d(void)
{
	int temp=have_data;
     4b0:	20 91 2e 03 	lds	r18, 0x032E
     4b4:	30 91 2f 03 	lds	r19, 0x032F
	if(temp==0){ack=0;}
     4b8:	21 15       	cp	r18, r1
     4ba:	31 05       	cpc	r19, r1
     4bc:	21 f4       	brne	.+8      	; 0x4c6 <have_d+0x16>
     4be:	10 92 31 03 	sts	0x0331, r1
     4c2:	10 92 30 03 	sts	0x0330, r1
	return(temp);
	

}
     4c6:	c9 01       	movw	r24, r18
     4c8:	08 95       	ret

000004ca <get_data>:
*
*/
unsigned char get_data(void)
{
	
	if(have_data==1){have_data=0;}
     4ca:	80 91 2e 03 	lds	r24, 0x032E
     4ce:	90 91 2f 03 	lds	r25, 0x032F
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	21 f4       	brne	.+8      	; 0x4de <get_data+0x14>
     4d6:	10 92 2f 03 	sts	0x032F, r1
     4da:	10 92 2e 03 	sts	0x032E, r1
	return(data);
	
}
     4de:	80 91 94 03 	lds	r24, 0x0394
     4e2:	08 95       	ret

000004e4 <get_data_array>:
* Example Call: data=get_data_array(2);
*
*/

int get_data_array(int j)
{
     4e4:	fc 01       	movw	r30, r24
     4e6:	ee 0f       	add	r30, r30
     4e8:	ff 1f       	adc	r31, r31
     4ea:	e2 58       	subi	r30, 0x82	; 130
     4ec:	fc 4f       	sbci	r31, 0xFC	; 252
	return(data_array[j]);
}
     4ee:	80 81       	ld	r24, Z
     4f0:	91 81       	ldd	r25, Z+1	; 0x01
     4f2:	08 95       	ret

000004f4 <get_length>:
*/

int get_length()
{
	return(i);
}
     4f4:	80 91 2c 03 	lds	r24, 0x032C
     4f8:	90 91 2d 03 	lds	r25, 0x032D
     4fc:	08 95       	ret

000004fe <motion_pin_config>:
 */ 

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     4fe:	81 b1       	in	r24, 0x01	; 1
     500:	8f 60       	ori	r24, 0x0F	; 15
     502:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     504:	82 b1       	in	r24, 0x02	; 2
     506:	80 7f       	andi	r24, 0xF0	; 240
     508:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     50a:	ea e0       	ldi	r30, 0x0A	; 10
     50c:	f1 e0       	ldi	r31, 0x01	; 1
     50e:	80 81       	ld	r24, Z
     510:	88 61       	ori	r24, 0x18	; 24
     512:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     514:	eb e0       	ldi	r30, 0x0B	; 11
     516:	f1 e0       	ldi	r31, 0x01	; 1
     518:	80 81       	ld	r24, Z
     51a:	88 61       	ori	r24, 0x18	; 24
     51c:	80 83       	st	Z, r24
}
     51e:	08 95       	ret

00000520 <init_ports_motor>:
 */ 

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     520:	81 b1       	in	r24, 0x01	; 1
     522:	8f 60       	ori	r24, 0x0F	; 15
     524:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     526:	82 b1       	in	r24, 0x02	; 2
     528:	80 7f       	andi	r24, 0xF0	; 240
     52a:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     52c:	ea e0       	ldi	r30, 0x0A	; 10
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	80 81       	ld	r24, Z
     532:	88 61       	ori	r24, 0x18	; 24
     534:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     536:	eb e0       	ldi	r30, 0x0B	; 11
     538:	f1 e0       	ldi	r31, 0x01	; 1
     53a:	80 81       	ld	r24, Z
     53c:	88 61       	ori	r24, 0x18	; 24
     53e:	80 83       	st	Z, r24

//Function to initialize ports
void init_ports_motor()
{
 motion_pin_config();
}
     540:	08 95       	ret

00000542 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     542:	e1 e2       	ldi	r30, 0x21	; 33
     544:	f1 e0       	ldi	r31, 0x01	; 1
     546:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     548:	9f ef       	ldi	r25, 0xFF	; 255
     54a:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     554:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     558:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     55c:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     560:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     564:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     568:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     56c:	89 ea       	ldi	r24, 0xA9	; 169
     56e:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     572:	8b e0       	ldi	r24, 0x0B	; 11
     574:	80 83       	st	Z, r24
}
     576:	08 95       	ret

00000578 <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     578:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     57c:	60 93 2a 01 	sts	0x012A, r22
}
     580:	08 95       	ret

00000582 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     582:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     584:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     586:	8f 70       	andi	r24, 0x0F	; 15
     588:	89 2b       	or	r24, r25
 PORTA = PortARestore; 			// setting the command to the port
     58a:	82 b9       	out	0x02, r24	; 2
}
     58c:	08 95       	ret

0000058e <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     58e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     590:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     592:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
     594:	82 b9       	out	0x02, r24	; 2


void forward (void) //both wheels forward
{
  motion_set(0x06);
}
     596:	08 95       	ret

00000598 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     598:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     59a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     59c:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 			// setting the command to the port
     59e:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     5a0:	08 95       	ret

000005a2 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5a2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5a4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5a6:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 			// setting the command to the port
     5a8:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     5aa:	08 95       	ret

000005ac <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5ac:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5ae:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5b0:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 			// setting the command to the port
     5b2:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     5b4:	08 95       	ret

000005b6 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5b6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5b8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5ba:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 			// setting the command to the port
     5bc:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     5be:	08 95       	ret

000005c0 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5c0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5c2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5c4:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 			// setting the command to the port
     5c6:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     5c8:	08 95       	ret

000005ca <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5ca:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5cc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5ce:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 			// setting the command to the port
     5d0:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     5d2:	08 95       	ret

000005d4 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5d4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5d6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     5d8:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 			// setting the command to the port
     5da:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     5dc:	08 95       	ret

000005de <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
     5de:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     5e0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
     5e2:	82 b9       	out	0x02, r24	; 2
}

void stop (void)
{
  motion_set(0x00);
}
     5e4:	08 95       	ret

000005e6 <init_devices_motor>:

void init_devices_motor (void) //use this function to initialize all devices
{
 cli(); //disable all interrupts
     5e6:	f8 94       	cli
 */ 

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     5e8:	81 b1       	in	r24, 0x01	; 1
     5ea:	8f 60       	ori	r24, 0x0F	; 15
     5ec:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     5ee:	82 b1       	in	r24, 0x02	; 2
     5f0:	80 7f       	andi	r24, 0xF0	; 240
     5f2:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     5f4:	ea e0       	ldi	r30, 0x0A	; 10
     5f6:	f1 e0       	ldi	r31, 0x01	; 1
     5f8:	80 81       	ld	r24, Z
     5fa:	88 61       	ori	r24, 0x18	; 24
     5fc:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     5fe:	eb e0       	ldi	r30, 0x0B	; 11
     600:	f1 e0       	ldi	r31, 0x01	; 1
     602:	80 81       	ld	r24, Z
     604:	88 61       	ori	r24, 0x18	; 24
     606:	80 83       	st	Z, r24
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     608:	e1 e2       	ldi	r30, 0x21	; 33
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     60e:	9f ef       	ldi	r25, 0xFF	; 255
     610:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     61a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     61e:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     622:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     626:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     62a:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     62e:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     632:	89 ea       	ldi	r24, 0xA9	; 169
     634:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     638:	8b e0       	ldi	r24, 0x0B	; 11
     63a:	80 83       	st	Z, r24
void init_devices_motor (void) //use this function to initialize all devices
{
 cli(); //disable all interrupts
 init_ports_motor();
 timer5_init();
 sei(); //re-enable interrupts
     63c:	78 94       	sei
}
     63e:	08 95       	ret

00000640 <ADC_Conversion1>:

int current_direction;//0-North,1-east,2-south,3-west
int current_x,current_y;//current node

unsigned char ADC_Conversion1(unsigned char Ch)
{
     640:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     642:	88 30       	cpi	r24, 0x08	; 8
     644:	18 f0       	brcs	.+6      	; 0x64c <ADC_Conversion1+0xc>
	{
		ADCSRB = 0x08;
     646:	88 e0       	ldi	r24, 0x08	; 8
     648:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;
	ADMUX= 0x20| Ch;  
     64c:	97 70       	andi	r25, 0x07	; 7
     64e:	90 62       	ori	r25, 0x20	; 32
     650:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     654:	80 91 7a 00 	lds	r24, 0x007A
     658:	80 64       	ori	r24, 0x40	; 64
     65a:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     65e:	80 91 7a 00 	lds	r24, 0x007A
     662:	84 ff       	sbrs	r24, 4
     664:	fc cf       	rjmp	.-8      	; 0x65e <ADC_Conversion1+0x1e>
	a=ADCH;
     666:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     66a:	90 91 7a 00 	lds	r25, 0x007A
     66e:	90 61       	ori	r25, 0x10	; 16
     670:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     674:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     678:	08 95       	ret

0000067a <animal_coordinate>:
 * Example Call: aniaml_corrdinate(location,&x,&y);
 *
*/

void animal_coordinate(char *animal,int *x,int *y)
{	int locx,locy;
     67a:	fc 01       	movw	r30, r24
     67c:	db 01       	movw	r26, r22
	locx=animal[0]-65;
	locy=animal[1]-49;
     67e:	21 81       	ldd	r18, Z+1	; 0x01
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	21 53       	subi	r18, 0x31	; 49
     684:	30 40       	sbci	r19, 0x00	; 0
	*x=locx;
     686:	80 81       	ld	r24, Z
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	81 54       	subi	r24, 0x41	; 65
     68c:	90 40       	sbci	r25, 0x00	; 0
     68e:	8d 93       	st	X+, r24
     690:	9c 93       	st	X, r25
	*y=locy;
     692:	fa 01       	movw	r30, r20
     694:	31 83       	std	Z+1, r19	; 0x01
     696:	20 83       	st	Z, r18
}
     698:	08 95       	ret

0000069a <habitat_coordinate>:
 * Example Call: habitat_corrdinate(location,&x,&y);
 *
*/

void habitat_coordinate(char *habitat,int *x,int *y)
{
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	eb 01       	movw	r28, r22
     6a4:	8a 01       	movw	r16, r20
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	10 c0       	rjmp	.+32     	; 0x6ce <habitat_coordinate+0x34>
	int locx,locy;
	int data=0;
	for(int i=0;habitat[i]!='\0';i++)
	{
		data=data*10+(int)(habitat[i]-48);
     6ae:	c9 01       	movw	r24, r18
     6b0:	63 e0       	ldi	r22, 0x03	; 3
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	6a 95       	dec	r22
     6b8:	e1 f7       	brne	.-8      	; 0x6b2 <habitat_coordinate+0x18>
     6ba:	22 0f       	add	r18, r18
     6bc:	33 1f       	adc	r19, r19
     6be:	82 0f       	add	r24, r18
     6c0:	93 1f       	adc	r25, r19
     6c2:	24 2f       	mov	r18, r20
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	20 53       	subi	r18, 0x30	; 48
     6c8:	30 40       	sbci	r19, 0x00	; 0
     6ca:	28 0f       	add	r18, r24
     6cc:	39 1f       	adc	r19, r25

void habitat_coordinate(char *habitat,int *x,int *y)
{
	int locx,locy;
	int data=0;
	for(int i=0;habitat[i]!='\0';i++)
     6ce:	41 91       	ld	r20, Z+
     6d0:	44 23       	and	r20, r20
     6d2:	69 f7       	brne	.-38     	; 0x6ae <habitat_coordinate+0x14>
	{
		data=data*10+(int)(habitat[i]-48);
	}
	locx=data;
	locx=locx%5-1;
     6d4:	c9 01       	movw	r24, r18
     6d6:	65 e0       	ldi	r22, 0x05	; 5
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
     6de:	01 97       	sbiw	r24, 0x01	; 1
	if(locx<0){
     6e0:	97 ff       	sbrs	r25, 7
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <habitat_coordinate+0x4e>
     6e4:	84 e0       	ldi	r24, 0x04	; 4
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <habitat_coordinate+0x60>
		locx=4;
	}
	int i=0;
	locy=data;
	while(i*5<locy){i++;}
     6f2:	6f 5f       	subi	r22, 0xFF	; 255
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	4b 5f       	subi	r20, 0xFB	; 251
     6f8:	5f 4f       	sbci	r21, 0xFF	; 255
     6fa:	42 17       	cp	r20, r18
     6fc:	53 07       	cpc	r21, r19
     6fe:	cc f3       	brlt	.-14     	; 0x6f2 <habitat_coordinate+0x58>
	locy=i-1;
	*x=locx;
     700:	99 83       	std	Y+1, r25	; 0x01
     702:	88 83       	st	Y, r24
	*y=locy;
     704:	61 50       	subi	r22, 0x01	; 1
     706:	70 40       	sbci	r23, 0x00	; 0
     708:	f8 01       	movw	r30, r16
     70a:	71 83       	std	Z+1, r23	; 0x01
     70c:	60 83       	st	Z, r22
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	08 95       	ret

00000718 <reset_coordinates>:
*
*/

void reset_coordinates()
{
	current_direction=0;
     718:	10 92 74 03 	sts	0x0374, r1
     71c:	10 92 73 03 	sts	0x0373, r1
	current_x=0;current_y=0;
     720:	10 92 72 03 	sts	0x0372, r1
     724:	10 92 71 03 	sts	0x0371, r1
     728:	10 92 79 03 	sts	0x0379, r1
     72c:	10 92 78 03 	sts	0x0378, r1
}
     730:	08 95       	ret

00000732 <change_direction_right>:
*/

void change_direction_right()
{
	current_direction++;
	current_direction%=4;
     732:	80 91 73 03 	lds	r24, 0x0373
     736:	90 91 74 03 	lds	r25, 0x0374
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	64 e0       	ldi	r22, 0x04	; 4
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
     744:	90 93 74 03 	sts	0x0374, r25
     748:	80 93 73 03 	sts	0x0373, r24
}
     74c:	08 95       	ret

0000074e <change_direction_left>:
*/

void change_direction_left()
{
	
	current_direction--;
     74e:	80 91 73 03 	lds	r24, 0x0373
     752:	90 91 74 03 	lds	r25, 0x0374
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	90 93 74 03 	sts	0x0374, r25
     75c:	80 93 73 03 	sts	0x0373, r24
	if(current_direction==-1)
     760:	8f 5f       	subi	r24, 0xFF	; 255
     762:	9f 4f       	sbci	r25, 0xFF	; 255
     764:	31 f4       	brne	.+12     	; 0x772 <change_direction_left+0x24>
	{
		current_direction=3;
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	90 93 74 03 	sts	0x0374, r25
     76e:	80 93 73 03 	sts	0x0373, r24
     772:	08 95       	ret

00000774 <distance>:
* Example Call: distance(0,1,5,4,&dif_x,&dif_y);
*
*/

void distance(int start_x,int start_y,int end_x,int end_y,int *dif_x,int *dif_y)
{
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	f8 01       	movw	r30, r16
     77e:	d7 01       	movw	r26, r14
	*dif_x=end_x-start_x;
     780:	48 1b       	sub	r20, r24
     782:	59 0b       	sbc	r21, r25
     784:	51 83       	std	Z+1, r21	; 0x01
     786:	40 83       	st	Z, r20
	*dif_y=end_y-start_y;
     788:	26 1b       	sub	r18, r22
     78a:	37 0b       	sbc	r19, r23
     78c:	2d 93       	st	X+, r18
     78e:	3c 93       	st	X, r19
}
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	08 95       	ret

0000079a <get_x>:
*/

int get_x()
{
	return(current_x);
}
     79a:	80 91 71 03 	lds	r24, 0x0371
     79e:	90 91 72 03 	lds	r25, 0x0372
     7a2:	08 95       	ret

000007a4 <get_y>:
*/

int get_y()
{
	return(current_y);
}
     7a4:	80 91 78 03 	lds	r24, 0x0378
     7a8:	90 91 79 03 	lds	r25, 0x0379
     7ac:	08 95       	ret

000007ae <coordinate_next_node>:
*
*/

void coordinate_next_node()
{
	if(current_direction==0){current_y++;}
     7ae:	80 91 73 03 	lds	r24, 0x0373
     7b2:	90 91 74 03 	lds	r25, 0x0374
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	31 f4       	brne	.+12     	; 0x7c6 <coordinate_next_node+0x18>
     7ba:	80 91 78 03 	lds	r24, 0x0378
     7be:	90 91 79 03 	lds	r25, 0x0379
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	15 c0       	rjmp	.+42     	; 0x7f0 <coordinate_next_node+0x42>
	else if(current_direction==1){current_x++;}
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	91 05       	cpc	r25, r1
     7ca:	51 f4       	brne	.+20     	; 0x7e0 <coordinate_next_node+0x32>
     7cc:	80 91 71 03 	lds	r24, 0x0371
     7d0:	90 91 72 03 	lds	r25, 0x0372
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	90 93 72 03 	sts	0x0372, r25
     7da:	80 93 71 03 	sts	0x0371, r24
     7de:	08 95       	ret
	else if(current_direction==2){current_y--;}
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	91 05       	cpc	r25, r1
     7e4:	51 f4       	brne	.+20     	; 0x7fa <coordinate_next_node+0x4c>
     7e6:	80 91 78 03 	lds	r24, 0x0378
     7ea:	90 91 79 03 	lds	r25, 0x0379
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	90 93 79 03 	sts	0x0379, r25
     7f4:	80 93 78 03 	sts	0x0378, r24
     7f8:	08 95       	ret
	else if(current_direction==3){current_x--;}
     7fa:	03 97       	sbiw	r24, 0x03	; 3
     7fc:	49 f4       	brne	.+18     	; 0x810 <coordinate_next_node+0x62>
     7fe:	80 91 71 03 	lds	r24, 0x0371
     802:	90 91 72 03 	lds	r25, 0x0372
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	90 93 72 03 	sts	0x0372, r25
     80c:	80 93 71 03 	sts	0x0371, r24
     810:	08 95       	ret

00000812 <servo1_pin_config>:
//########################################################################################################################

//Configure PORTB 5 pin for servo motor 1 operation2
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     812:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     814:	2d 9a       	sbi	0x05, 5	; 5
}
     816:	08 95       	ret

00000818 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     818:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     81a:	2e 9a       	sbi	0x05, 6	; 5
}
     81c:	08 95       	ret

0000081e <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     81e:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     820:	2f 9a       	sbi	0x05, 7	; 5
}
     822:	08 95       	ret

00000824 <port_init_servo>:
//########################################################################################################################

//Configure PORTB 5 pin for servo motor 1 operation2
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     824:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     826:	2d 9a       	sbi	0x05, 5	; 5
}

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     828:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     82a:	2e 9a       	sbi	0x05, 6	; 5
}

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     82c:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     82e:	2f 9a       	sbi	0x05, 7	; 5
void port_init_servo(void)
{
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
}
     830:	08 95       	ret

00000832 <timer1_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     832:	e1 e8       	ldi	r30, 0x81	; 129
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     838:	8c ef       	ldi	r24, 0xFC	; 252
     83a:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     850:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     854:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     858:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     85c:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     860:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     864:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     868:	8b ea       	ldi	r24, 0xAB	; 171
     86a:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     86e:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     872:	8c e0       	ldi	r24, 0x0C	; 12
     874:	80 83       	st	Z, r24
}
     876:	08 95       	ret

00000878 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
     878:	10 92 89 00 	sts	0x0089, r1
 OCR1AL = (unsigned char) PositionPanServo;
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	a0 e0       	ldi	r26, 0x00	; 0
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	bc 01       	movw	r22, r24
     884:	cd 01       	movw	r24, r26
     886:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatunsisf>
     88a:	2b e7       	ldi	r18, 0x7B	; 123
     88c:	34 e1       	ldi	r19, 0x14	; 20
     88e:	4e ee       	ldi	r20, 0xEE	; 238
     890:	5f e3       	ldi	r21, 0x3F	; 63
     892:	0e 94 0e 13 	call	0x261c	; 0x261c <__divsf3>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	4c e0       	ldi	r20, 0x0C	; 12
     89c:	52 e4       	ldi	r21, 0x42	; 66
     89e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__addsf3>
     8a2:	0e 94 38 11 	call	0x2270	; 0x2270 <__fixunssfsi>
     8a6:	60 93 88 00 	sts	0x0088, r22
}
     8aa:	08 95       	ret

000008ac <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     8ac:	10 92 8b 00 	sts	0x008B, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	a0 e0       	ldi	r26, 0x00	; 0
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	bc 01       	movw	r22, r24
     8b8:	cd 01       	movw	r24, r26
     8ba:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatunsisf>
     8be:	2b e7       	ldi	r18, 0x7B	; 123
     8c0:	34 e1       	ldi	r19, 0x14	; 20
     8c2:	4e ee       	ldi	r20, 0xEE	; 238
     8c4:	5f e3       	ldi	r21, 0x3F	; 63
     8c6:	0e 94 0e 13 	call	0x261c	; 0x261c <__divsf3>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	4c e0       	ldi	r20, 0x0C	; 12
     8d0:	52 e4       	ldi	r21, 0x42	; 66
     8d2:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__addsf3>
     8d6:	0e 94 38 11 	call	0x2270	; 0x2270 <__fixunssfsi>
     8da:	60 93 8a 00 	sts	0x008A, r22
}
     8de:	08 95       	ret

000008e0 <servo_3>:
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
     8e0:	10 92 8d 00 	sts	0x008D, r1
 OCR1CL = (unsigned char) PositionServo;
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	bc 01       	movw	r22, r24
     8ec:	cd 01       	movw	r24, r26
     8ee:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatunsisf>
     8f2:	2b e7       	ldi	r18, 0x7B	; 123
     8f4:	34 e1       	ldi	r19, 0x14	; 20
     8f6:	4e ee       	ldi	r20, 0xEE	; 238
     8f8:	5f e3       	ldi	r21, 0x3F	; 63
     8fa:	0e 94 0e 13 	call	0x261c	; 0x261c <__divsf3>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	4c e0       	ldi	r20, 0x0C	; 12
     904:	52 e4       	ldi	r21, 0x42	; 66
     906:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__addsf3>
     90a:	0e 94 38 11 	call	0x2270	; 0x2270 <__fixunssfsi>
     90e:	60 93 8c 00 	sts	0x008C, r22
}
     912:	08 95       	ret

00000914 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	80 93 88 00 	sts	0x0088, r24
}
     920:	08 95       	ret

00000922 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	80 93 8a 00 	sts	0x008A, r24
}
     92e:	08 95       	ret

00000930 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	80 93 8d 00 	sts	0x008D, r24
 OCR1CL = 0xFF; //Servo 3 off
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	80 93 8c 00 	sts	0x008C, r24
} 
     93c:	08 95       	ret

0000093e <servo_grab>:
*
*/

void servo_grab()
{
	servo_1(0);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 3c 04 	call	0x878	; 0x878 <servo_1>
     944:	80 e1       	ldi	r24, 0x10	; 16
     946:	97 e2       	ldi	r25, 0x27	; 39
     948:	20 e7       	ldi	r18, 0x70	; 112
     94a:	31 e0       	ldi	r19, 0x01	; 1
     94c:	f9 01       	movw	r30, r18
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <servo_grab+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     952:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     954:	d9 f7       	brne	.-10     	; 0x94c <servo_grab+0xe>
	_delay_ms(1000);
	servo_2(145);
     956:	81 e9       	ldi	r24, 0x91	; 145
     958:	0e 94 56 04 	call	0x8ac	; 0x8ac <servo_2>
     95c:	80 e1       	ldi	r24, 0x10	; 16
     95e:	97 e2       	ldi	r25, 0x27	; 39
     960:	20 e7       	ldi	r18, 0x70	; 112
     962:	31 e0       	ldi	r19, 0x01	; 1
     964:	f9 01       	movw	r30, r18
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <servo_grab+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     96a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     96c:	d9 f7       	brne	.-10     	; 0x964 <servo_grab+0x26>
 OCR1AL = 0xFF; //Servo 1 off
}

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	80 93 8a 00 	sts	0x008A, r24
	servo_1(0);
	_delay_ms(1000);
	servo_2(145);
	_delay_ms(1000);
	servo_2_free();
	servo_1(200);
     97a:	88 ec       	ldi	r24, 0xC8	; 200
     97c:	0e 94 3c 04 	call	0x878	; 0x878 <servo_1>
     980:	80 e1       	ldi	r24, 0x10	; 16
     982:	97 e2       	ldi	r25, 0x27	; 39
     984:	20 e7       	ldi	r18, 0x70	; 112
     986:	31 e0       	ldi	r19, 0x01	; 1
     988:	f9 01       	movw	r30, r18
     98a:	31 97       	sbiw	r30, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <servo_grab+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     98e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     990:	d9 f7       	brne	.-10     	; 0x988 <servo_grab+0x4a>
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     992:	93 e0       	ldi	r25, 0x03	; 3
     994:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF; //Servo 1 off
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	80 93 88 00 	sts	0x0088, r24
}

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     99e:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF; //Servo 2 off
     9a2:	80 93 8a 00 	sts	0x008A, r24
}

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
     9a6:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF; //Servo 3 off
     9aa:	80 93 8c 00 	sts	0x008C, r24
	_delay_ms(1000);
	servo_2_free();
	servo_1(200);
	_delay_ms(1000);
	free_servo();
}
     9ae:	08 95       	ret

000009b0 <servo_reset>:
* Example Call: servo_reset()
*
*/

void servo_reset()
{
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
	servo_1(200);
     9b6:	88 ec       	ldi	r24, 0xC8	; 200
     9b8:	0e 94 3c 04 	call	0x878	; 0x878 <servo_1>
	servo_2(200);
     9bc:	88 ec       	ldi	r24, 0xC8	; 200
     9be:	0e 94 56 04 	call	0x8ac	; 0x8ac <servo_2>
	unsigned char i=current_angle;
     9c2:	10 91 32 03 	lds	r17, 0x0332
     9c6:	c0 e0       	ldi	r28, 0x00	; 0
     9c8:	d0 e9       	ldi	r29, 0x90	; 144
     9ca:	07 c0       	rjmp	.+14     	; 0x9da <servo_reset+0x2a>
	while (i != 0)
 	{
  		servo_3(i);
     9cc:	81 2f       	mov	r24, r17
     9ce:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <servo_reset+0x24>
 	 	_delay_ms(10);
		if(i>0){i--;}
     9d8:	11 50       	subi	r17, 0x01	; 1
void servo_reset()
{
	servo_1(200);
	servo_2(200);
	unsigned char i=current_angle;
	while (i != 0)
     9da:	11 23       	and	r17, r17
     9dc:	b9 f7       	brne	.-18     	; 0x9cc <servo_reset+0x1c>
  		servo_3(i);
 	 	_delay_ms(10);
		if(i>0){i--;}
		else{i++;}
 	}
	current_angle=0;
     9de:	10 92 32 03 	sts	0x0332, r1
     9e2:	80 e1       	ldi	r24, 0x10	; 16
     9e4:	97 e2       	ldi	r25, 0x27	; 39
     9e6:	20 e7       	ldi	r18, 0x70	; 112
     9e8:	31 e0       	ldi	r19, 0x01	; 1
     9ea:	f9 01       	movw	r30, r18
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <servo_reset+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f2:	d9 f7       	brne	.-10     	; 0x9ea <servo_reset+0x3a>
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     9f4:	93 e0       	ldi	r25, 0x03	; 3
     9f6:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF; //Servo 1 off
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	80 93 88 00 	sts	0x0088, r24
}

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     a00:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF; //Servo 2 off
     a04:	80 93 8a 00 	sts	0x008A, r24
}

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
     a08:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF; //Servo 3 off
     a0c:	80 93 8c 00 	sts	0x008C, r24
		else{i++;}
 	}
	current_angle=0;
	_delay_ms(1000);
	free_servo();
}
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	08 95       	ret

00000a18 <servo_reset1>:
* Example Call: servo_reset1()
*
*/

void servo_reset1()
{
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
	servo_1(200);
     a1e:	88 ec       	ldi	r24, 0xC8	; 200
     a20:	0e 94 3c 04 	call	0x878	; 0x878 <servo_1>
	unsigned char i=current_angle;
     a24:	10 91 32 03 	lds	r17, 0x0332
     a28:	c0 e0       	ldi	r28, 0x00	; 0
     a2a:	d0 e9       	ldi	r29, 0x90	; 144
     a2c:	07 c0       	rjmp	.+14     	; 0xa3c <servo_reset1+0x24>
	while (i != 0)
 	{
  		servo_3(i);
     a2e:	81 2f       	mov	r24, r17
     a30:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
     a34:	ce 01       	movw	r24, r28
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	f1 f7       	brne	.-4      	; 0xa36 <servo_reset1+0x1e>
 	 	_delay_ms(10);
		if(i>0){i--;}
     a3a:	11 50       	subi	r17, 0x01	; 1

void servo_reset1()
{
	servo_1(200);
	unsigned char i=current_angle;
	while (i != 0)
     a3c:	11 23       	and	r17, r17
     a3e:	b9 f7       	brne	.-18     	; 0xa2e <servo_reset1+0x16>
  		servo_3(i);
 	 	_delay_ms(10);
		if(i>0){i--;}
		else{i++;}
 	}
	current_angle=0;
     a40:	10 92 32 03 	sts	0x0332, r1
     a44:	80 e1       	ldi	r24, 0x10	; 16
     a46:	97 e2       	ldi	r25, 0x27	; 39
     a48:	20 e7       	ldi	r18, 0x70	; 112
     a4a:	31 e0       	ldi	r19, 0x01	; 1
     a4c:	f9 01       	movw	r30, r18
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <servo_reset1+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a52:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a54:	d9 f7       	brne	.-10     	; 0xa4c <servo_reset1+0x34>
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     a56:	93 e0       	ldi	r25, 0x03	; 3
     a58:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF; //Servo 1 off
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	80 93 88 00 	sts	0x0088, r24
}

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     a62:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF; //Servo 2 off
     a66:	80 93 8a 00 	sts	0x008A, r24
}

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
     a6a:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF; //Servo 3 off
     a6e:	80 93 8c 00 	sts	0x008C, r24
		else{i++;}
 	}
	current_angle=0;
	_delay_ms(1000);
	free_servo();
}
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	08 95       	ret

00000a7a <free_servo>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     a7a:	93 e0       	ldi	r25, 0x03	; 3
     a7c:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF; //Servo 1 off
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	80 93 88 00 	sts	0x0088, r24
}

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     a86:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF; //Servo 2 off
     a8a:	80 93 8a 00 	sts	0x008A, r24
}

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
     a8e:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF; //Servo 3 off
     a92:	80 93 8c 00 	sts	0x008C, r24
void free_servo()
{
	servo_1_free(); 
 	servo_2_free();
 	servo_3_free();
}
     a96:	08 95       	ret

00000a98 <servo_drop>:
*
*/

void servo_drop()
{	
	servo_1(110);
     a98:	8e e6       	ldi	r24, 0x6E	; 110
     a9a:	0e 94 3c 04 	call	0x878	; 0x878 <servo_1>
     a9e:	88 e8       	ldi	r24, 0x88	; 136
     aa0:	93 e1       	ldi	r25, 0x13	; 19
     aa2:	20 e7       	ldi	r18, 0x70	; 112
     aa4:	31 e0       	ldi	r19, 0x01	; 1
     aa6:	f9 01       	movw	r30, r18
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <servo_drop+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aae:	d9 f7       	brne	.-10     	; 0xaa6 <servo_drop+0xe>
	_delay_ms(500);
	servo_2(200);
     ab0:	88 ec       	ldi	r24, 0xC8	; 200
     ab2:	0e 94 56 04 	call	0x8ac	; 0x8ac <servo_2>
     ab6:	88 e8       	ldi	r24, 0x88	; 136
     ab8:	93 e1       	ldi	r25, 0x13	; 19
     aba:	20 e7       	ldi	r18, 0x70	; 112
     abc:	31 e0       	ldi	r19, 0x01	; 1
     abe:	f9 01       	movw	r30, r18
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <servo_drop+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac6:	d9 f7       	brne	.-10     	; 0xabe <servo_drop+0x26>
	_delay_ms(500);
	servo_1(200);
     ac8:	88 ec       	ldi	r24, 0xC8	; 200
     aca:	0e 94 3c 04 	call	0x878	; 0x878 <servo_1>
     ace:	88 e8       	ldi	r24, 0x88	; 136
     ad0:	93 e1       	ldi	r25, 0x13	; 19
     ad2:	20 e7       	ldi	r18, 0x70	; 112
     ad4:	31 e0       	ldi	r19, 0x01	; 1
     ad6:	f9 01       	movw	r30, r18
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <servo_drop+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     adc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ade:	d9 f7       	brne	.-10     	; 0xad6 <servo_drop+0x3e>
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     ae0:	93 e0       	ldi	r25, 0x03	; 3
     ae2:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF; //Servo 1 off
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	80 93 88 00 	sts	0x0088, r24
}

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     aec:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF; //Servo 2 off
     af0:	80 93 8a 00 	sts	0x008A, r24
}

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
     af4:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF; //Servo 3 off
     af8:	80 93 8c 00 	sts	0x008C, r24
	_delay_ms(500);
	servo_1(200);
	_delay_ms(500);
	free_servo();

}
     afc:	08 95       	ret

00000afe <side_pickup_right>:
* Example Call: side_pickup_right()
*
*/

void side_pickup_right()
{
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
	unsigned char i=current_angle;
     b04:	10 91 32 03 	lds	r17, 0x0332
     b08:	c0 e0       	ldi	r28, 0x00	; 0
     b0a:	d0 e9       	ldi	r29, 0x90	; 144
     b0c:	0b c0       	rjmp	.+22     	; 0xb24 <side_pickup_right+0x26>
	while (i != 10)
 	{
  		servo_3(i);
     b0e:	81 2f       	mov	r24, r17
     b10:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
     b14:	ce 01       	movw	r24, r28
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <side_pickup_right+0x18>
 	 	_delay_ms(10);
		if(i>10){i--;}
     b1a:	1b 30       	cpi	r17, 0x0B	; 11
     b1c:	10 f0       	brcs	.+4      	; 0xb22 <side_pickup_right+0x24>
     b1e:	11 50       	subi	r17, 0x01	; 1
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <side_pickup_right+0x26>
		else{i++;}
     b22:	1f 5f       	subi	r17, 0xFF	; 255
*/

void side_pickup_right()
{
	unsigned char i=current_angle;
	while (i != 10)
     b24:	1a 30       	cpi	r17, 0x0A	; 10
     b26:	99 f7       	brne	.-26     	; 0xb0e <side_pickup_right+0x10>
  		servo_3(i);
 	 	_delay_ms(10);
		if(i>10){i--;}
		else{i++;}
 	}
	current_angle=10;
     b28:	10 93 32 03 	sts	0x0332, r17
	servo_grab();
     b2c:	0e 94 9f 04 	call	0x93e	; 0x93e <servo_grab>
	

}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	08 95       	ret

00000b38 <side_pickup_left>:
* Example Call: side_pickup_left()
*
*/

void side_pickup_left()
{
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
	unsigned char i=current_angle;
     b3e:	10 91 32 03 	lds	r17, 0x0332
     b42:	c0 e0       	ldi	r28, 0x00	; 0
     b44:	d0 e9       	ldi	r29, 0x90	; 144
     b46:	0b c0       	rjmp	.+22     	; 0xb5e <side_pickup_left+0x26>
	while (i != 175)
 	{
  		servo_3(i);
     b48:	81 2f       	mov	r24, r17
     b4a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
     b4e:	ce 01       	movw	r24, r28
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <side_pickup_left+0x18>
 	 	_delay_ms(10);
		if(i>175){i--;}
     b54:	10 3b       	cpi	r17, 0xB0	; 176
     b56:	10 f0       	brcs	.+4      	; 0xb5c <side_pickup_left+0x24>
     b58:	11 50       	subi	r17, 0x01	; 1
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <side_pickup_left+0x26>
		else{i++;}
     b5c:	1f 5f       	subi	r17, 0xFF	; 255
*/

void side_pickup_left()
{
	unsigned char i=current_angle;
	while (i != 175)
     b5e:	1f 3a       	cpi	r17, 0xAF	; 175
     b60:	99 f7       	brne	.-26     	; 0xb48 <side_pickup_left+0x10>
  		servo_3(i);
 	 	_delay_ms(10);
		if(i>175){i--;}
		else{i++;}
 	}
	current_angle=175;
     b62:	10 93 32 03 	sts	0x0332, r17
	servo_grab();
     b66:	0e 94 9f 04 	call	0x93e	; 0x93e <servo_grab>
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	08 95       	ret

00000b72 <drop>:
* Example Call: drop()
*
*/

void drop(int n)
{
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	9c 01       	movw	r18, r24
	if(current_direction==0)
     b7a:	80 91 73 03 	lds	r24, 0x0373
     b7e:	90 91 74 03 	lds	r25, 0x0374
     b82:	89 2b       	or	r24, r25
     b84:	71 f5       	brne	.+92     	; 0xbe2 <drop+0x70>
     b86:	80 91 32 03 	lds	r24, 0x0332
	{
		if(n==0)
     b8a:	23 2b       	or	r18, r19
     b8c:	c1 f4       	brne	.+48     	; 0xbbe <drop+0x4c>
		{
			unsigned char i=current_angle;
     b8e:	18 2f       	mov	r17, r24
     b90:	c0 e0       	ldi	r28, 0x00	; 0
     b92:	d0 e9       	ldi	r29, 0x90	; 144
     b94:	0b c0       	rjmp	.+22     	; 0xbac <drop+0x3a>
			while (i != 50)
	 		{
	  			servo_3(i);
     b96:	81 2f       	mov	r24, r17
     b98:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <drop+0x2c>
	 		 	_delay_ms(10);
				if(i>50){i--;}
     ba2:	13 33       	cpi	r17, 0x33	; 51
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <drop+0x38>
     ba6:	11 50       	subi	r17, 0x01	; 1
     ba8:	01 c0       	rjmp	.+2      	; 0xbac <drop+0x3a>
				else{i++;}
     baa:	1f 5f       	subi	r17, 0xFF	; 255
	if(current_direction==0)
	{
		if(n==0)
		{
			unsigned char i=current_angle;
			while (i != 50)
     bac:	12 33       	cpi	r17, 0x32	; 50
     bae:	99 f7       	brne	.-26     	; 0xb96 <drop+0x24>
	  			servo_3(i);
	 		 	_delay_ms(10);
				if(i>50){i--;}
				else{i++;}
	 		}
			current_angle=50;
     bb0:	10 93 32 03 	sts	0x0332, r17
     bb4:	20 e1       	ldi	r18, 0x10	; 16
     bb6:	37 e2       	ldi	r19, 0x27	; 39
     bb8:	40 e7       	ldi	r20, 0x70	; 112
     bba:	51 e0       	ldi	r21, 0x01	; 1
     bbc:	3a c0       	rjmp	.+116    	; 0xc32 <drop+0xc0>
		
		}
		else
		{
			unsigned char i=current_angle;
     bbe:	18 2f       	mov	r17, r24
     bc0:	c0 e0       	ldi	r28, 0x00	; 0
     bc2:	d0 e9       	ldi	r29, 0x90	; 144
     bc4:	0b c0       	rjmp	.+22     	; 0xbdc <drop+0x6a>
			while (i != 40)
	 		{
	  			servo_3(i);
     bc6:	81 2f       	mov	r24, r17
     bc8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
     bcc:	ce 01       	movw	r24, r28
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <drop+0x5c>
	 		 	_delay_ms(10);
				if(i>40){i--;}
     bd2:	19 32       	cpi	r17, 0x29	; 41
     bd4:	10 f0       	brcs	.+4      	; 0xbda <drop+0x68>
     bd6:	11 50       	subi	r17, 0x01	; 1
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <drop+0x6a>
				else{i++;}
     bda:	1f 5f       	subi	r17, 0xFF	; 255
		
		}
		else
		{
			unsigned char i=current_angle;
			while (i != 40)
     bdc:	18 32       	cpi	r17, 0x28	; 40
     bde:	99 f7       	brne	.-26     	; 0xbc6 <drop+0x54>
     be0:	e7 cf       	rjmp	.-50     	; 0xbb0 <drop+0x3e>
     be2:	80 91 32 03 	lds	r24, 0x0332
			current_angle=40;
		}
	}
	else
	{
		if(n==0)
     be6:	23 2b       	or	r18, r19
     be8:	91 f4       	brne	.+36     	; 0xc0e <drop+0x9c>
		{
			unsigned char i=current_angle;
     bea:	18 2f       	mov	r17, r24
     bec:	c0 e0       	ldi	r28, 0x00	; 0
     bee:	d0 e9       	ldi	r29, 0x90	; 144
     bf0:	0b c0       	rjmp	.+22     	; 0xc08 <drop+0x96>
			while (i != 135)
	 		{
	  			servo_3(i);
     bf2:	81 2f       	mov	r24, r17
     bf4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <drop+0x88>
	 		 	_delay_ms(10);
				if(i>135){i--;}
     bfe:	18 38       	cpi	r17, 0x88	; 136
     c00:	10 f0       	brcs	.+4      	; 0xc06 <drop+0x94>
     c02:	11 50       	subi	r17, 0x01	; 1
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <drop+0x96>
				else{i++;}
     c06:	1f 5f       	subi	r17, 0xFF	; 255
	else
	{
		if(n==0)
		{
			unsigned char i=current_angle;
			while (i != 135)
     c08:	17 38       	cpi	r17, 0x87	; 135
     c0a:	99 f7       	brne	.-26     	; 0xbf2 <drop+0x80>
     c0c:	d1 cf       	rjmp	.-94     	; 0xbb0 <drop+0x3e>
	 		}
			current_angle=135;		
		}
		else
		{
			unsigned char i=current_angle;
     c0e:	18 2f       	mov	r17, r24
     c10:	c0 e0       	ldi	r28, 0x00	; 0
     c12:	d0 e9       	ldi	r29, 0x90	; 144
     c14:	0b c0       	rjmp	.+22     	; 0xc2c <drop+0xba>
			while (i != 145)
	 		{
	  			servo_3(i);
     c16:	81 2f       	mov	r24, r17
     c18:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
     c1c:	ce 01       	movw	r24, r28
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <drop+0xac>
	 		 	_delay_ms(10);
				if(i>145){i--;}
     c22:	12 39       	cpi	r17, 0x92	; 146
     c24:	10 f0       	brcs	.+4      	; 0xc2a <drop+0xb8>
     c26:	11 50       	subi	r17, 0x01	; 1
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <drop+0xba>
				else{i++;}
     c2a:	1f 5f       	subi	r17, 0xFF	; 255
			current_angle=135;		
		}
		else
		{
			unsigned char i=current_angle;
			while (i != 145)
     c2c:	11 39       	cpi	r17, 0x91	; 145
     c2e:	99 f7       	brne	.-26     	; 0xc16 <drop+0xa4>
     c30:	bf cf       	rjmp	.-130    	; 0xbb0 <drop+0x3e>
     c32:	ca 01       	movw	r24, r20
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <drop+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c38:	21 50       	subi	r18, 0x01	; 1
     c3a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <drop+0xc0>
	 		}
			current_angle=145;
		}
	}
	_delay_ms(1000);
	servo_drop();
     c3e:	0e 94 4c 05 	call	0xa98	; 0xa98 <servo_drop>
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	08 95       	ret

00000c4a <back_drop>:
* Example Call: back_drop()
*
*/

void back_drop()
{
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
	if(current_direction==2)
     c50:	80 91 73 03 	lds	r24, 0x0373
     c54:	90 91 74 03 	lds	r25, 0x0374
     c58:	20 91 32 03 	lds	r18, 0x0332
     c5c:	02 97       	sbiw	r24, 0x02	; 2
     c5e:	a1 f4       	brne	.+40     	; 0xc88 <back_drop+0x3e>
	{
		unsigned char i=current_angle;
     c60:	12 2f       	mov	r17, r18
     c62:	c0 e0       	ldi	r28, 0x00	; 0
     c64:	d0 e9       	ldi	r29, 0x90	; 144
     c66:	0b c0       	rjmp	.+22     	; 0xc7e <back_drop+0x34>
		while (i != 200)
 		{
  			servo_3(i);
     c68:	81 2f       	mov	r24, r17
     c6a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
     c6e:	ce 01       	movw	r24, r28
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <back_drop+0x26>
 		 	_delay_ms(10);
			if(i>200){i--;}
     c74:	19 3c       	cpi	r17, 0xC9	; 201
     c76:	10 f0       	brcs	.+4      	; 0xc7c <back_drop+0x32>
     c78:	11 50       	subi	r17, 0x01	; 1
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <back_drop+0x34>
			else{i++;}
     c7c:	1f 5f       	subi	r17, 0xFF	; 255
void back_drop()
{
	if(current_direction==2)
	{
		unsigned char i=current_angle;
		while (i != 200)
     c7e:	18 3c       	cpi	r17, 0xC8	; 200
     c80:	99 f7       	brne	.-26     	; 0xc68 <back_drop+0x1e>
  			servo_3(i);
 		 	_delay_ms(10);
			if(i>200){i--;}
			else{i++;}
 		}
		current_angle=200;
     c82:	10 93 32 03 	sts	0x0332, r17
     c86:	0f c0       	rjmp	.+30     	; 0xca6 <back_drop+0x5c>
	}
	else
	{
		unsigned char i=current_angle;
     c88:	12 2f       	mov	r17, r18
     c8a:	c0 e0       	ldi	r28, 0x00	; 0
     c8c:	d0 e9       	ldi	r29, 0x90	; 144
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <back_drop+0x54>
		while (i != 0)
 		{
  			servo_3(i);
     c90:	81 2f       	mov	r24, r17
     c92:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
     c96:	ce 01       	movw	r24, r28
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <back_drop+0x4e>
 		 	_delay_ms(10);
			if(i>0){i--;}
     c9c:	11 50       	subi	r17, 0x01	; 1
		current_angle=200;
	}
	else
	{
		unsigned char i=current_angle;
		while (i != 0)
     c9e:	11 23       	and	r17, r17
     ca0:	b9 f7       	brne	.-18     	; 0xc90 <back_drop+0x46>
  			servo_3(i);
 		 	_delay_ms(10);
			if(i>0){i--;}
			else{i++;}
 		}
		current_angle=0;
     ca2:	10 92 32 03 	sts	0x0332, r1
	}
	servo_drop();
     ca6:	0e 94 4c 05 	call	0xa98	; 0xa98 <servo_drop>
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	08 95       	ret

00000cb2 <drop_animal>:
* Example Call: drop_animal();
*
*/

void drop_animal(int node)
{
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	8c 01       	movw	r16, r24
	int present_direction;
	if(node==1)
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <drop_animal+0x16>
     cc6:	86 c0       	rjmp	.+268    	; 0xdd4 <drop_animal+0x122>
	{
		if(hab[get_x()][get_y()]!=1)
     cc8:	80 91 71 03 	lds	r24, 0x0371
     ccc:	90 91 72 03 	lds	r25, 0x0372
     cd0:	fc 01       	movw	r30, r24
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	ee 0f       	add	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	e8 0f       	add	r30, r24
     cdc:	f9 1f       	adc	r31, r25
     cde:	80 91 78 03 	lds	r24, 0x0378
     ce2:	90 91 79 03 	lds	r25, 0x0379
     ce6:	e8 0f       	add	r30, r24
     ce8:	f9 1f       	adc	r31, r25
     cea:	ee 0f       	add	r30, r30
     cec:	ff 1f       	adc	r31, r31
     cee:	ed 5c       	subi	r30, 0xCD	; 205
     cf0:	fc 4f       	sbci	r31, 0xFC	; 252
     cf2:	e0 80       	ld	r14, Z
     cf4:	f1 80       	ldd	r15, Z+1	; 0x01
     cf6:	c0 91 73 03 	lds	r28, 0x0373
     cfa:	d0 91 74 03 	lds	r29, 0x0374
     cfe:	21 e0       	ldi	r18, 0x01	; 1
     d00:	e2 16       	cp	r14, r18
     d02:	f1 04       	cpc	r15, r1
     d04:	39 f1       	breq	.+78     	; 0xd54 <drop_animal+0xa2>
		{
			if(current_direction==0)
     d06:	20 97       	sbiw	r28, 0x00	; 0
     d08:	29 f4       	brne	.+10     	; 0xd14 <drop_animal+0x62>
			{
				drop(1);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <drop_animal+0x72>
				hab[get_x()][get_y()]=1;
			}
			else if(current_direction==1)
     d14:	c1 30       	cpi	r28, 0x01	; 1
     d16:	d1 05       	cpc	r29, r1
     d18:	19 f4       	brne	.+6      	; 0xd20 <drop_animal+0x6e>
			{
				drop(1);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	26 c0       	rjmp	.+76     	; 0xd6c <drop_animal+0xba>
				hab[get_x()][get_y()]=1;
			}
			else
			{
				back_drop();
     d20:	0e 94 25 06 	call	0xc4a	; 0xc4a <back_drop>
				hab[get_x()][get_y()]=1;
     d24:	80 91 71 03 	lds	r24, 0x0371
     d28:	90 91 72 03 	lds	r25, 0x0372
     d2c:	fc 01       	movw	r30, r24
     d2e:	ee 0f       	add	r30, r30
     d30:	ff 1f       	adc	r31, r31
     d32:	ee 0f       	add	r30, r30
     d34:	ff 1f       	adc	r31, r31
     d36:	e8 0f       	add	r30, r24
     d38:	f9 1f       	adc	r31, r25
     d3a:	80 91 78 03 	lds	r24, 0x0378
     d3e:	90 91 79 03 	lds	r25, 0x0379
     d42:	e8 0f       	add	r30, r24
     d44:	f9 1f       	adc	r31, r25
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	ed 5c       	subi	r30, 0xCD	; 205
     d4c:	fc 4f       	sbci	r31, 0xFC	; 252
     d4e:	11 83       	std	Z+1, r17	; 0x01
     d50:	00 83       	st	Z, r16
     d52:	5c c2       	rjmp	.+1208   	; 0x120c <drop_animal+0x55a>
			}
		}
		else
		{
			if(current_direction==0)
     d54:	20 97       	sbiw	r28, 0x00	; 0
     d56:	29 f4       	brne	.+10     	; 0xd62 <drop_animal+0xb0>
			{
				drop(0);
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
     d60:	21 c0       	rjmp	.+66     	; 0xda4 <drop_animal+0xf2>
				hab[get_x()][get_y()]=1;
			}
			else if(current_direction==1)
     d62:	c1 30       	cpi	r28, 0x01	; 1
     d64:	d1 05       	cpc	r29, r1
     d66:	e1 f4       	brne	.+56     	; 0xda0 <drop_animal+0xee>
			{
				drop(0);
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
				hab[get_x()][get_y()]=1;
     d70:	80 91 71 03 	lds	r24, 0x0371
     d74:	90 91 72 03 	lds	r25, 0x0372
     d78:	fc 01       	movw	r30, r24
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	e8 0f       	add	r30, r24
     d84:	f9 1f       	adc	r31, r25
     d86:	80 91 78 03 	lds	r24, 0x0378
     d8a:	90 91 79 03 	lds	r25, 0x0379
     d8e:	e8 0f       	add	r30, r24
     d90:	f9 1f       	adc	r31, r25
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	ed 5c       	subi	r30, 0xCD	; 205
     d98:	fc 4f       	sbci	r31, 0xFC	; 252
     d9a:	d1 83       	std	Z+1, r29	; 0x01
     d9c:	c0 83       	st	Z, r28
     d9e:	36 c2       	rjmp	.+1132   	; 0x120c <drop_animal+0x55a>
			}
			else
			{
				back_drop();
     da0:	0e 94 25 06 	call	0xc4a	; 0xc4a <back_drop>
				hab[get_x()][get_y()]=1;
     da4:	80 91 71 03 	lds	r24, 0x0371
     da8:	90 91 72 03 	lds	r25, 0x0372
     dac:	fc 01       	movw	r30, r24
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	e8 0f       	add	r30, r24
     db8:	f9 1f       	adc	r31, r25
     dba:	80 91 78 03 	lds	r24, 0x0378
     dbe:	90 91 79 03 	lds	r25, 0x0379
     dc2:	e8 0f       	add	r30, r24
     dc4:	f9 1f       	adc	r31, r25
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	ed 5c       	subi	r30, 0xCD	; 205
     dcc:	fc 4f       	sbci	r31, 0xFC	; 252
     dce:	f1 82       	std	Z+1, r15	; 0x01
     dd0:	e0 82       	st	Z, r14
     dd2:	1c c2       	rjmp	.+1080   	; 0x120c <drop_animal+0x55a>
			}
		}
		
	}
	else if(node==2)
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	91 05       	cpc	r25, r1
     dd8:	09 f0       	breq	.+2      	; 0xddc <drop_animal+0x12a>
     dda:	a9 c0       	rjmp	.+338    	; 0xf2e <drop_animal+0x27c>
	{
		current_direction--;
     ddc:	80 91 73 03 	lds	r24, 0x0373
     de0:	90 91 74 03 	lds	r25, 0x0374
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	90 93 74 03 	sts	0x0374, r25
     dea:	80 93 73 03 	sts	0x0373, r24
		if(current_direction==-1){current_direction=3;}
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	31 f4       	brne	.+12     	; 0xe00 <drop_animal+0x14e>
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	90 93 74 03 	sts	0x0374, r25
     dfc:	80 93 73 03 	sts	0x0373, r24
		
		if(hab[get_x()][get_y()-1]!=1)
     e00:	80 91 71 03 	lds	r24, 0x0371
     e04:	90 91 72 03 	lds	r25, 0x0372
     e08:	fc 01       	movw	r30, r24
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	e8 0f       	add	r30, r24
     e14:	f9 1f       	adc	r31, r25
     e16:	80 91 78 03 	lds	r24, 0x0378
     e1a:	90 91 79 03 	lds	r25, 0x0379
     e1e:	e8 0f       	add	r30, r24
     e20:	f9 1f       	adc	r31, r25
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	ef 5c       	subi	r30, 0xCF	; 207
     e28:	fc 4f       	sbci	r31, 0xFC	; 252
     e2a:	00 81       	ld	r16, Z
     e2c:	11 81       	ldd	r17, Z+1	; 0x01
     e2e:	c0 91 73 03 	lds	r28, 0x0373
     e32:	d0 91 74 03 	lds	r29, 0x0374
     e36:	01 30       	cpi	r16, 0x01	; 1
     e38:	11 05       	cpc	r17, r1
     e3a:	49 f1       	breq	.+82     	; 0xe8e <drop_animal+0x1dc>
		{
			if(current_direction==0)
     e3c:	20 97       	sbiw	r28, 0x00	; 0
     e3e:	29 f4       	brne	.+10     	; 0xe4a <drop_animal+0x198>
			{
				drop(1);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <drop_animal+0x1a8>
				hab[get_x()][get_y()-1]=1;
			}
			else if(current_direction==1)
     e4a:	c1 30       	cpi	r28, 0x01	; 1
     e4c:	d1 05       	cpc	r29, r1
     e4e:	19 f4       	brne	.+6      	; 0xe56 <drop_animal+0x1a4>
			{
				drop(1);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	28 c0       	rjmp	.+80     	; 0xea6 <drop_animal+0x1f4>
				hab[get_x()][get_y()-1]=1;
			}
			else
			{
				back_drop();
     e56:	0e 94 25 06 	call	0xc4a	; 0xc4a <back_drop>
				hab[get_x()][get_y()-1]=1;
     e5a:	80 91 71 03 	lds	r24, 0x0371
     e5e:	90 91 72 03 	lds	r25, 0x0372
     e62:	fc 01       	movw	r30, r24
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	ee 0f       	add	r30, r30
     e6a:	ff 1f       	adc	r31, r31
     e6c:	e8 0f       	add	r30, r24
     e6e:	f9 1f       	adc	r31, r25
     e70:	80 91 78 03 	lds	r24, 0x0378
     e74:	90 91 79 03 	lds	r25, 0x0379
     e78:	e8 0f       	add	r30, r24
     e7a:	f9 1f       	adc	r31, r25
     e7c:	ee 0f       	add	r30, r30
     e7e:	ff 1f       	adc	r31, r31
     e80:	ef 5c       	subi	r30, 0xCF	; 207
     e82:	fc 4f       	sbci	r31, 0xFC	; 252
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	80 83       	st	Z, r24
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <drop_animal+0x25a>
			}
		}
		else
		{
			if(current_direction==0)
     e8e:	20 97       	sbiw	r28, 0x00	; 0
     e90:	29 f4       	brne	.+10     	; 0xe9c <drop_animal+0x1ea>
			{
				drop(0);
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
     e9a:	21 c0       	rjmp	.+66     	; 0xede <drop_animal+0x22c>
				hab[get_x()][get_y()-1]=1;
			}
			else if(current_direction==1)
     e9c:	c1 30       	cpi	r28, 0x01	; 1
     e9e:	d1 05       	cpc	r29, r1
     ea0:	e1 f4       	brne	.+56     	; 0xeda <drop_animal+0x228>
			{
				drop(0);
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
				hab[get_x()][get_y()-1]=1;
     eaa:	80 91 71 03 	lds	r24, 0x0371
     eae:	90 91 72 03 	lds	r25, 0x0372
     eb2:	fc 01       	movw	r30, r24
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	e8 0f       	add	r30, r24
     ebe:	f9 1f       	adc	r31, r25
     ec0:	80 91 78 03 	lds	r24, 0x0378
     ec4:	90 91 79 03 	lds	r25, 0x0379
     ec8:	e8 0f       	add	r30, r24
     eca:	f9 1f       	adc	r31, r25
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	ef 5c       	subi	r30, 0xCF	; 207
     ed2:	fc 4f       	sbci	r31, 0xFC	; 252
     ed4:	d1 83       	std	Z+1, r29	; 0x01
     ed6:	c0 83       	st	Z, r28
     ed8:	19 c0       	rjmp	.+50     	; 0xf0c <drop_animal+0x25a>
			}
			else
			{
				back_drop();
     eda:	0e 94 25 06 	call	0xc4a	; 0xc4a <back_drop>
				hab[get_x()][get_y()-1]=1;
     ede:	80 91 71 03 	lds	r24, 0x0371
     ee2:	90 91 72 03 	lds	r25, 0x0372
     ee6:	fc 01       	movw	r30, r24
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	e8 0f       	add	r30, r24
     ef2:	f9 1f       	adc	r31, r25
     ef4:	80 91 78 03 	lds	r24, 0x0378
     ef8:	90 91 79 03 	lds	r25, 0x0379
     efc:	e8 0f       	add	r30, r24
     efe:	f9 1f       	adc	r31, r25
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	ef 5c       	subi	r30, 0xCF	; 207
     f06:	fc 4f       	sbci	r31, 0xFC	; 252
     f08:	11 83       	std	Z+1, r17	; 0x01
     f0a:	00 83       	st	Z, r16
			}
		}
		current_direction++;
     f0c:	80 91 73 03 	lds	r24, 0x0373
     f10:	90 91 74 03 	lds	r25, 0x0374
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	90 93 74 03 	sts	0x0374, r25
     f1a:	80 93 73 03 	sts	0x0373, r24
		if(current_direction==4){current_direction=0;}
     f1e:	04 97       	sbiw	r24, 0x04	; 4
     f20:	09 f0       	breq	.+2      	; 0xf24 <drop_animal+0x272>
     f22:	74 c1       	rjmp	.+744    	; 0x120c <drop_animal+0x55a>
     f24:	10 92 74 03 	sts	0x0374, r1
     f28:	10 92 73 03 	sts	0x0373, r1
     f2c:	6f c1       	rjmp	.+734    	; 0x120c <drop_animal+0x55a>
		
	}
	else if(node==3)
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	09 f0       	breq	.+2      	; 0xf36 <drop_animal+0x284>
     f34:	bc c0       	rjmp	.+376    	; 0x10ae <drop_animal+0x3fc>
	{
		current_direction++;
     f36:	80 91 73 03 	lds	r24, 0x0373
     f3a:	90 91 74 03 	lds	r25, 0x0374
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	90 93 74 03 	sts	0x0374, r25
     f44:	80 93 73 03 	sts	0x0373, r24
		if(current_direction==4){current_direction=0;}
     f48:	04 97       	sbiw	r24, 0x04	; 4
     f4a:	21 f4       	brne	.+8      	; 0xf54 <drop_animal+0x2a2>
     f4c:	10 92 74 03 	sts	0x0374, r1
     f50:	10 92 73 03 	sts	0x0373, r1
		current_direction++;
     f54:	80 91 73 03 	lds	r24, 0x0373
     f58:	90 91 74 03 	lds	r25, 0x0374
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	90 93 74 03 	sts	0x0374, r25
     f62:	80 93 73 03 	sts	0x0373, r24
		if(current_direction==4){current_direction=0;}
     f66:	04 97       	sbiw	r24, 0x04	; 4
     f68:	21 f4       	brne	.+8      	; 0xf72 <drop_animal+0x2c0>
     f6a:	10 92 74 03 	sts	0x0374, r1
     f6e:	10 92 73 03 	sts	0x0373, r1
		
		if(hab[get_x()-1][get_y()-1]!=1)
     f72:	80 91 71 03 	lds	r24, 0x0371
     f76:	90 91 72 03 	lds	r25, 0x0372
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	fc 01       	movw	r30, r24
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	e8 0f       	add	r30, r24
     f88:	f9 1f       	adc	r31, r25
     f8a:	80 91 78 03 	lds	r24, 0x0378
     f8e:	90 91 79 03 	lds	r25, 0x0379
     f92:	e8 0f       	add	r30, r24
     f94:	f9 1f       	adc	r31, r25
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	ef 5c       	subi	r30, 0xCF	; 207
     f9c:	fc 4f       	sbci	r31, 0xFC	; 252
     f9e:	00 81       	ld	r16, Z
     fa0:	11 81       	ldd	r17, Z+1	; 0x01
     fa2:	c0 91 73 03 	lds	r28, 0x0373
     fa6:	d0 91 74 03 	lds	r29, 0x0374
     faa:	01 30       	cpi	r16, 0x01	; 1
     fac:	11 05       	cpc	r17, r1
     fae:	51 f1       	breq	.+84     	; 0x1004 <drop_animal+0x352>
		{
			if(current_direction==0)
     fb0:	20 97       	sbiw	r28, 0x00	; 0
     fb2:	29 f4       	brne	.+10     	; 0xfbe <drop_animal+0x30c>
			{
				drop(1);
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
     fbc:	08 c0       	rjmp	.+16     	; 0xfce <drop_animal+0x31c>
				hab[get_x()-1][get_y()-1]=1;
			}
			else if(current_direction==1)
     fbe:	c1 30       	cpi	r28, 0x01	; 1
     fc0:	d1 05       	cpc	r29, r1
     fc2:	19 f4       	brne	.+6      	; 0xfca <drop_animal+0x318>
			{
				drop(1);
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	29 c0       	rjmp	.+82     	; 0x101c <drop_animal+0x36a>
				hab[get_x()-1][get_y()-1]=1;
			}
			else
			{
				back_drop();
     fca:	0e 94 25 06 	call	0xc4a	; 0xc4a <back_drop>
				hab[get_x()-1][get_y()-1]=1;
     fce:	80 91 71 03 	lds	r24, 0x0371
     fd2:	90 91 72 03 	lds	r25, 0x0372
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	fc 01       	movw	r30, r24
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	e8 0f       	add	r30, r24
     fe4:	f9 1f       	adc	r31, r25
     fe6:	80 91 78 03 	lds	r24, 0x0378
     fea:	90 91 79 03 	lds	r25, 0x0379
     fee:	e8 0f       	add	r30, r24
     ff0:	f9 1f       	adc	r31, r25
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	ef 5c       	subi	r30, 0xCF	; 207
     ff8:	fc 4f       	sbci	r31, 0xFC	; 252
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	80 83       	st	Z, r24
    1002:	41 c0       	rjmp	.+130    	; 0x1086 <drop_animal+0x3d4>
			}
		}
		else
		{
			if(current_direction==0)
    1004:	20 97       	sbiw	r28, 0x00	; 0
    1006:	29 f4       	brne	.+10     	; 0x1012 <drop_animal+0x360>
			{
				drop(0);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
    1010:	22 c0       	rjmp	.+68     	; 0x1056 <drop_animal+0x3a4>
				hab[get_x()-1][get_y()-1]=1;
			}
			else if(current_direction==1)
    1012:	c1 30       	cpi	r28, 0x01	; 1
    1014:	d1 05       	cpc	r29, r1
    1016:	e9 f4       	brne	.+58     	; 0x1052 <drop_animal+0x3a0>
			{
				drop(0);
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
				hab[get_x()-1][get_y()-1]=1;
    1020:	80 91 71 03 	lds	r24, 0x0371
    1024:	90 91 72 03 	lds	r25, 0x0372
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	fc 01       	movw	r30, r24
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	e8 0f       	add	r30, r24
    1036:	f9 1f       	adc	r31, r25
    1038:	80 91 78 03 	lds	r24, 0x0378
    103c:	90 91 79 03 	lds	r25, 0x0379
    1040:	e8 0f       	add	r30, r24
    1042:	f9 1f       	adc	r31, r25
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	ef 5c       	subi	r30, 0xCF	; 207
    104a:	fc 4f       	sbci	r31, 0xFC	; 252
    104c:	d1 83       	std	Z+1, r29	; 0x01
    104e:	c0 83       	st	Z, r28
    1050:	1a c0       	rjmp	.+52     	; 0x1086 <drop_animal+0x3d4>
			}
			else
			{
				back_drop();
    1052:	0e 94 25 06 	call	0xc4a	; 0xc4a <back_drop>
				hab[get_x()-1][get_y()-1]=1;
    1056:	80 91 71 03 	lds	r24, 0x0371
    105a:	90 91 72 03 	lds	r25, 0x0372
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	fc 01       	movw	r30, r24
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	ee 0f       	add	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	e8 0f       	add	r30, r24
    106c:	f9 1f       	adc	r31, r25
    106e:	80 91 78 03 	lds	r24, 0x0378
    1072:	90 91 79 03 	lds	r25, 0x0379
    1076:	e8 0f       	add	r30, r24
    1078:	f9 1f       	adc	r31, r25
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	ef 5c       	subi	r30, 0xCF	; 207
    1080:	fc 4f       	sbci	r31, 0xFC	; 252
    1082:	11 83       	std	Z+1, r17	; 0x01
    1084:	00 83       	st	Z, r16
			}
		}
		current_direction--;
    1086:	80 91 73 03 	lds	r24, 0x0373
    108a:	90 91 74 03 	lds	r25, 0x0374
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	90 93 74 03 	sts	0x0374, r25
    1094:	80 93 73 03 	sts	0x0373, r24
		if(current_direction==-1){current_direction=3;}
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	09 f0       	breq	.+2      	; 0x10a0 <drop_animal+0x3ee>
    109e:	a4 c0       	rjmp	.+328    	; 0x11e8 <drop_animal+0x536>
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	90 93 74 03 	sts	0x0374, r25
    10a8:	80 93 73 03 	sts	0x0373, r24
    10ac:	9d c0       	rjmp	.+314    	; 0x11e8 <drop_animal+0x536>
		current_direction--;
		if(current_direction==-1){current_direction=3;}
		
	}
	else if(node==4)
    10ae:	84 30       	cpi	r24, 0x04	; 4
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <drop_animal+0x404>
    10b4:	ab c0       	rjmp	.+342    	; 0x120c <drop_animal+0x55a>
	{
		present_direction=current_direction;	
		current_direction++;
    10b6:	80 91 73 03 	lds	r24, 0x0373
    10ba:	90 91 74 03 	lds	r25, 0x0374
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	90 93 74 03 	sts	0x0374, r25
    10c4:	80 93 73 03 	sts	0x0373, r24
		if(current_direction==4){current_direction=0;}
    10c8:	04 97       	sbiw	r24, 0x04	; 4
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <drop_animal+0x422>
    10cc:	10 92 74 03 	sts	0x0374, r1
    10d0:	10 92 73 03 	sts	0x0373, r1
		if(hab[get_x()-1][get_y()]!=1)
    10d4:	80 91 71 03 	lds	r24, 0x0371
    10d8:	90 91 72 03 	lds	r25, 0x0372
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	fc 01       	movw	r30, r24
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	e8 0f       	add	r30, r24
    10ea:	f9 1f       	adc	r31, r25
    10ec:	80 91 78 03 	lds	r24, 0x0378
    10f0:	90 91 79 03 	lds	r25, 0x0379
    10f4:	e8 0f       	add	r30, r24
    10f6:	f9 1f       	adc	r31, r25
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	ed 5c       	subi	r30, 0xCD	; 205
    10fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1100:	00 81       	ld	r16, Z
    1102:	11 81       	ldd	r17, Z+1	; 0x01
    1104:	c0 91 73 03 	lds	r28, 0x0373
    1108:	d0 91 74 03 	lds	r29, 0x0374
    110c:	01 30       	cpi	r16, 0x01	; 1
    110e:	11 05       	cpc	r17, r1
    1110:	51 f1       	breq	.+84     	; 0x1166 <drop_animal+0x4b4>
		{
			if(current_direction==0)
    1112:	20 97       	sbiw	r28, 0x00	; 0
    1114:	29 f4       	brne	.+10     	; 0x1120 <drop_animal+0x46e>
			{
				drop(1);
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <drop_animal+0x47e>
				hab[get_x()-1][get_y()]=1;
			}
			else if(current_direction==1)
    1120:	c1 30       	cpi	r28, 0x01	; 1
    1122:	d1 05       	cpc	r29, r1
    1124:	19 f4       	brne	.+6      	; 0x112c <drop_animal+0x47a>
			{
				drop(1);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	29 c0       	rjmp	.+82     	; 0x117e <drop_animal+0x4cc>
				hab[get_x()-1][get_y()]=1;
			}
			else
			{
				back_drop();
    112c:	0e 94 25 06 	call	0xc4a	; 0xc4a <back_drop>
				hab[get_x()-1][get_y()]=1;
    1130:	80 91 71 03 	lds	r24, 0x0371
    1134:	90 91 72 03 	lds	r25, 0x0372
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	fc 01       	movw	r30, r24
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	e8 0f       	add	r30, r24
    1146:	f9 1f       	adc	r31, r25
    1148:	80 91 78 03 	lds	r24, 0x0378
    114c:	90 91 79 03 	lds	r25, 0x0379
    1150:	e8 0f       	add	r30, r24
    1152:	f9 1f       	adc	r31, r25
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	ed 5c       	subi	r30, 0xCD	; 205
    115a:	fc 4f       	sbci	r31, 0xFC	; 252
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	91 83       	std	Z+1, r25	; 0x01
    1162:	80 83       	st	Z, r24
    1164:	41 c0       	rjmp	.+130    	; 0x11e8 <drop_animal+0x536>
			}
		}
		else
		{
			if(current_direction==0)
    1166:	20 97       	sbiw	r28, 0x00	; 0
    1168:	29 f4       	brne	.+10     	; 0x1174 <drop_animal+0x4c2>
			{
				drop(0);
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
    1172:	22 c0       	rjmp	.+68     	; 0x11b8 <drop_animal+0x506>
				hab[get_x()-1][get_y()]=1;
			}
			else if(current_direction==1)
    1174:	c1 30       	cpi	r28, 0x01	; 1
    1176:	d1 05       	cpc	r29, r1
    1178:	e9 f4       	brne	.+58     	; 0x11b4 <drop_animal+0x502>
			{
				drop(0);
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 b9 05 	call	0xb72	; 0xb72 <drop>
				hab[get_x()-1][get_y()]=1;
    1182:	80 91 71 03 	lds	r24, 0x0371
    1186:	90 91 72 03 	lds	r25, 0x0372
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	fc 01       	movw	r30, r24
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	ee 0f       	add	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	e8 0f       	add	r30, r24
    1198:	f9 1f       	adc	r31, r25
    119a:	80 91 78 03 	lds	r24, 0x0378
    119e:	90 91 79 03 	lds	r25, 0x0379
    11a2:	e8 0f       	add	r30, r24
    11a4:	f9 1f       	adc	r31, r25
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	ed 5c       	subi	r30, 0xCD	; 205
    11ac:	fc 4f       	sbci	r31, 0xFC	; 252
    11ae:	d1 83       	std	Z+1, r29	; 0x01
    11b0:	c0 83       	st	Z, r28
    11b2:	1a c0       	rjmp	.+52     	; 0x11e8 <drop_animal+0x536>
			}
			else
			{
				back_drop();
    11b4:	0e 94 25 06 	call	0xc4a	; 0xc4a <back_drop>
				hab[get_x()-1][get_y()]=1;
    11b8:	80 91 71 03 	lds	r24, 0x0371
    11bc:	90 91 72 03 	lds	r25, 0x0372
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	fc 01       	movw	r30, r24
    11c4:	ee 0f       	add	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	e8 0f       	add	r30, r24
    11ce:	f9 1f       	adc	r31, r25
    11d0:	80 91 78 03 	lds	r24, 0x0378
    11d4:	90 91 79 03 	lds	r25, 0x0379
    11d8:	e8 0f       	add	r30, r24
    11da:	f9 1f       	adc	r31, r25
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	ed 5c       	subi	r30, 0xCD	; 205
    11e2:	fc 4f       	sbci	r31, 0xFC	; 252
    11e4:	11 83       	std	Z+1, r17	; 0x01
    11e6:	00 83       	st	Z, r16
			}
		}
		current_direction--;
    11e8:	80 91 73 03 	lds	r24, 0x0373
    11ec:	90 91 74 03 	lds	r25, 0x0374
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	90 93 74 03 	sts	0x0374, r25
    11f6:	80 93 73 03 	sts	0x0373, r24
		if(current_direction==-1){current_direction=3;}
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	31 f4       	brne	.+12     	; 0x120c <drop_animal+0x55a>
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	90 93 74 03 	sts	0x0374, r25
    1208:	80 93 73 03 	sts	0x0373, r24
		
		
	}
	
}
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	08 95       	ret

0000121a <ADC_Conversion_animal>:
* Example Call: ADC_Conversion_animal()
*
*/

unsigned char ADC_Conversion_animal(unsigned char Ch)
{
    121a:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
    121c:	88 30       	cpi	r24, 0x08	; 8
    121e:	18 f0       	brcs	.+6      	; 0x1226 <ADC_Conversion_animal+0xc>
	{
		ADCSRB = 0x08;
    1220:	88 e0       	ldi	r24, 0x08	; 8
    1222:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;
	ADMUX= 0x20| Ch;  
    1226:	97 70       	andi	r25, 0x07	; 7
    1228:	90 62       	ori	r25, 0x20	; 32
    122a:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    122e:	80 91 7a 00 	lds	r24, 0x007A
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1238:	80 91 7a 00 	lds	r24, 0x007A
    123c:	84 ff       	sbrs	r24, 4
    123e:	fc cf       	rjmp	.-8      	; 0x1238 <ADC_Conversion_animal+0x1e>
	a=ADCH;
    1240:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1244:	90 91 7a 00 	lds	r25, 0x007A
    1248:	90 61       	ori	r25, 0x10	; 16
    124a:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
    124e:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
    1252:	08 95       	ret

00001254 <adc_pin_config>:
void in_device(void);


void adc_pin_config (void)
{
 DDRF = 0x00;
    1254:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
    1256:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
    1258:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
    125c:	10 92 08 01 	sts	0x0108, r1
}
    1260:	08 95       	ret

00001262 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
    1262:	ea e7       	ldi	r30, 0x7A	; 122
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1268:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    126c:	80 e2       	ldi	r24, 0x20	; 32
    126e:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
    1272:	80 e8       	ldi	r24, 0x80	; 128
    1274:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1276:	86 e8       	ldi	r24, 0x86	; 134
    1278:	80 83       	st	Z, r24
}
    127a:	08 95       	ret

0000127c <lcd_port_config>:
	void lcd_port_config (void)
	{
 	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    127c:	87 b1       	in	r24, 0x07	; 7
    127e:	87 6f       	ori	r24, 0xF7	; 247
    1280:	87 b9       	out	0x07, r24	; 7
 	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1282:	88 b1       	in	r24, 0x08	; 8
    1284:	80 78       	andi	r24, 0x80	; 128
    1286:	88 b9       	out	0x08, r24	; 8
	}	
    1288:	08 95       	ret

0000128a <left_encoder_pin_config>:

	void left_encoder_pin_config (void)
	{
		DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    128a:	6c 98       	cbi	0x0d, 4	; 13
		PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    128c:	74 9a       	sbi	0x0e, 4	; 14
	}
    128e:	08 95       	ret

00001290 <right_encoder_pin_config>:

	//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
	void right_encoder_pin_config (void)
	{
		DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1290:	6d 98       	cbi	0x0d, 5	; 13
		PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1292:	75 9a       	sbi	0x0e, 5	; 14
	}	
    1294:	08 95       	ret

00001296 <__vector_6>:


	//ISR for right position encoder
	ISR(INT5_vect)
	{
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	af 93       	push	r26
    12a6:	bf 93       	push	r27
		ShaftCountRight++;  //increment right shaft position count
    12a8:	80 91 6b 03 	lds	r24, 0x036B
    12ac:	90 91 6c 03 	lds	r25, 0x036C
    12b0:	a0 91 6d 03 	lds	r26, 0x036D
    12b4:	b0 91 6e 03 	lds	r27, 0x036E
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	a1 1d       	adc	r26, r1
    12bc:	b1 1d       	adc	r27, r1
    12be:	80 93 6b 03 	sts	0x036B, r24
    12c2:	90 93 6c 03 	sts	0x036C, r25
    12c6:	a0 93 6d 03 	sts	0x036D, r26
    12ca:	b0 93 6e 03 	sts	0x036E, r27
	}	
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <__vector_5>:


	//ISR for left position encoder
	ISR(INT4_vect)
	{
    12e0:	1f 92       	push	r1
    12e2:	0f 92       	push	r0
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
		ShaftCountLeft++;  //increment left shaft position count
    12f2:	80 91 67 03 	lds	r24, 0x0367
    12f6:	90 91 68 03 	lds	r25, 0x0368
    12fa:	a0 91 69 03 	lds	r26, 0x0369
    12fe:	b0 91 6a 03 	lds	r27, 0x036A
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	a1 1d       	adc	r26, r1
    1306:	b1 1d       	adc	r27, r1
    1308:	80 93 67 03 	sts	0x0367, r24
    130c:	90 93 68 03 	sts	0x0368, r25
    1310:	a0 93 69 03 	sts	0x0369, r26
    1314:	b0 93 6a 03 	sts	0x036A, r27
	}
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <left_position_encoder_interrupt_init>:
	
	void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
	{
		cli(); //Clears the global interrupt
    132a:	f8 94       	cli
		EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    132c:	ea e6       	ldi	r30, 0x6A	; 106
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	82 60       	ori	r24, 0x02	; 2
    1334:	80 83       	st	Z, r24
		EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1336:	ec 9a       	sbi	0x1d, 4	; 29
		sei();   // Enables the global interrupt
    1338:	78 94       	sei
	}	
    133a:	08 95       	ret

0000133c <right_position_encoder_interrupt_init>:

	void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
	{
		cli(); //Clears the global interrupt
    133c:	f8 94       	cli
		EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    133e:	ea e6       	ldi	r30, 0x6A	; 106
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	88 60       	ori	r24, 0x08	; 8
    1346:	80 83       	st	Z, r24
		EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1348:	ed 9a       	sbi	0x1d, 5	; 29
		sei();   // Enables the global interrupt
    134a:	78 94       	sei
	}
    134c:	08 95       	ret

0000134e <in_devices>:
void in_devices(void)
{
	cli();
    134e:	f8 94       	cli
	ACSR = 0x80;
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
}
	void lcd_port_config (void)
	{
 	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1350:	87 b1       	in	r24, 0x07	; 7
    1352:	87 6f       	ori	r24, 0xF7	; 247
    1354:	87 b9       	out	0x07, r24	; 7
 	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1356:	88 b1       	in	r24, 0x08	; 8
    1358:	80 78       	andi	r24, 0x80	; 128
    135a:	88 b9       	out	0x08, r24	; 8
	}
void in_devices(void)
{
	cli();
	lcd_port_config();
	lcd_set_4bit();
    135c:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    1360:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
void in_device(void);


void adc_pin_config (void)
{
 DDRF = 0x00;
    1364:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
    1366:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
    1368:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
    136c:	10 92 08 01 	sts	0x0108, r1
}

void adc_init()
{
	ADCSRA = 0x00;
    1370:	ea e7       	ldi	r30, 0x7A	; 122
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1376:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    137a:	80 e2       	ldi	r24, 0x20	; 32
    137c:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
    1380:	80 e8       	ldi	r24, 0x80	; 128
    1382:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1384:	86 e8       	ldi	r24, 0x86	; 134
    1386:	80 83       	st	Z, r24


//Function To Initialize all The Devices
void init_devices()
{
 cli(); //Clears the global interrupts
    1388:	f8 94       	cli
int data_array[10];
int i=0;
int have_data=0;
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    138a:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    138c:	43 98       	cbi	0x08, 3	; 8
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
    138e:	e1 ed       	ldi	r30, 0xD1	; 209
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	10 82       	st	Z, r1
 UCSR2A = 0x00;
    1394:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
    1398:	86 e0       	ldi	r24, 0x06	; 6
    139a:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2L = 0x5F; //set baud rate lo
    139e:	8f e5       	ldi	r24, 0x5F	; 95
    13a0:	80 93 d4 00 	sts	0x00D4, r24
 UBRR2H = 0x00; //set baud rate hi
    13a4:	10 92 d5 00 	sts	0x00D5, r1
 UCSR2B = 0x98;
    13a8:	88 e9       	ldi	r24, 0x98	; 152
    13aa:	80 83       	st	Z, r24
void init_devices()
{
 cli(); //Clears the global interrupts
 port_init();  //Initializes all the ports
 uart2_init(); //Initailize UART1 for serial communiaction
 sei();   //Enables the global interrupts
    13ac:	78 94       	sei
//########################################################################################################################

//Configure PORTB 5 pin for servo motor 1 operation2
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    13ae:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    13b0:	2d 9a       	sbi	0x05, 5	; 5
}

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    13b2:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    13b4:	2e 9a       	sbi	0x05, 6	; 5
}

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    13b6:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    13b8:	2f 9a       	sbi	0x05, 7	; 5
	lcd_init();
	adc_pin_config();
	adc_init();
	init_devices();
		port_init_servo();
 		timer1_init();
    13ba:	0e 94 19 04 	call	0x832	; 0x832 <timer1_init>
	init_devices_motor();
    13be:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <init_devices_motor>
 	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
	}	

	void left_encoder_pin_config (void)
	{
		DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    13c2:	6c 98       	cbi	0x0d, 4	; 13
		PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    13c4:	74 9a       	sbi	0x0e, 4	; 14
	}

	//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
	void right_encoder_pin_config (void)
	{
		DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    13c6:	6d 98       	cbi	0x0d, 5	; 13
		PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    13c8:	75 9a       	sbi	0x0e, 5	; 14
		ShaftCountLeft++;  //increment left shaft position count
	}
	
	void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
	{
		cli(); //Clears the global interrupt
    13ca:	f8 94       	cli
		EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    13cc:	ea e6       	ldi	r30, 0x6A	; 106
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	82 60       	ori	r24, 0x02	; 2
    13d4:	80 83       	st	Z, r24
		EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    13d6:	ec 9a       	sbi	0x1d, 4	; 29
		sei();   // Enables the global interrupt
    13d8:	78 94       	sei
	}	

	void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
	{
		cli(); //Clears the global interrupt
    13da:	f8 94       	cli
		EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    13dc:	ea e6       	ldi	r30, 0x6A	; 106
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 60       	ori	r24, 0x08	; 8
    13e4:	80 83       	st	Z, r24
		EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    13e6:	ed 9a       	sbi	0x1d, 5	; 29
		sei();   // Enables the global interrupt
    13e8:	78 94       	sei
	left_encoder_pin_config(); //left encoder pin config
	right_encoder_pin_config(); //right encoder pin config
	left_position_encoder_interrupt_init();
	right_position_encoder_interrupt_init();
	
	sei();
    13ea:	78 94       	sei

}
    13ec:	08 95       	ret

000013ee <linear_distance_mm>:
	{
		float ReqdShaftCount = 0;
		unsigned long int ReqdShaftCountInt = 0;
	
		ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
		ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    13ee:	a0 e0       	ldi	r26, 0x00	; 0
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	bc 01       	movw	r22, r24
    13f4:	cd 01       	movw	r24, r26
    13f6:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatunsisf>
    13fa:	25 ee       	ldi	r18, 0xE5	; 229
    13fc:	30 ed       	ldi	r19, 0xD0	; 208
    13fe:	4a ea       	ldi	r20, 0xAA	; 170
    1400:	50 e4       	ldi	r21, 0x40	; 64
    1402:	0e 94 0e 13 	call	0x261c	; 0x261c <__divsf3>
    1406:	0e 94 38 11 	call	0x2270	; 0x2270 <__fixunssfsi>
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
	
		ShaftCountRight = 0;
    140e:	10 92 6b 03 	sts	0x036B, r1
    1412:	10 92 6c 03 	sts	0x036C, r1
    1416:	10 92 6d 03 	sts	0x036D, r1
    141a:	10 92 6e 03 	sts	0x036E, r1
		while(1)
		{
			if(ShaftCountRight > ReqdShaftCountInt)
    141e:	80 91 6b 03 	lds	r24, 0x036B
    1422:	90 91 6c 03 	lds	r25, 0x036C
    1426:	a0 91 6d 03 	lds	r26, 0x036D
    142a:	b0 91 6e 03 	lds	r27, 0x036E
    142e:	28 17       	cp	r18, r24
    1430:	39 07       	cpc	r19, r25
    1432:	4a 07       	cpc	r20, r26
    1434:	5b 07       	cpc	r21, r27
    1436:	98 f7       	brcc	.-26     	; 0x141e <linear_distance_mm+0x30>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    1438:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    143a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
    143c:	82 b9       	out	0x02, r24	; 2
			{
				break;
			}
		}
		stop(); //Stop robot
	}
    143e:	08 95       	ret

00001440 <forward_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    1440:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1442:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    1444:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
    1446:	22 b9       	out	0x02, r18	; 2

	//Function used for moving robot forward by specified distance
	void forward_mm(unsigned int DistanceInMM)
	{
		forward();
		linear_distance_mm(DistanceInMM);
    1448:	0e 94 f7 09 	call	0x13ee	; 0x13ee <linear_distance_mm>
	}
    144c:	08 95       	ret

0000144e <back_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    144e:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1450:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    1452:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 			// setting the command to the port
    1454:	22 b9       	out	0x02, r18	; 2
	
	//Function used for moving robot back by specified distance
	void back_mm(unsigned int DistanceInMM)
	{
		back();
		linear_distance_mm(DistanceInMM);
    1456:	0e 94 f7 09 	call	0x13ee	; 0x13ee <linear_distance_mm>
	}
    145a:	08 95       	ret

0000145c <corner_pickup>:
* Example Call: corner_pickup()
*
*/

void corner_pickup()
{
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
	back_mm(20);
    1462:	84 e1       	ldi	r24, 0x14	; 20
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 27 0a 	call	0x144e	; 0x144e <back_mm>
	unsigned char i=current_angle;
    146a:	10 91 32 03 	lds	r17, 0x0332
    146e:	c0 e0       	ldi	r28, 0x00	; 0
    1470:	d0 e9       	ldi	r29, 0x90	; 144
    1472:	0b c0       	rjmp	.+22     	; 0x148a <corner_pickup+0x2e>
	while (i != 95)
 	{
  		servo_3(i);
    1474:	81 2f       	mov	r24, r17
    1476:	0e 94 70 04 	call	0x8e0	; 0x8e0 <servo_3>
    147a:	ce 01       	movw	r24, r28
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <corner_pickup+0x20>
 	 	_delay_ms(10);
		if(i>95){i--;}
    1480:	10 36       	cpi	r17, 0x60	; 96
    1482:	10 f0       	brcs	.+4      	; 0x1488 <corner_pickup+0x2c>
    1484:	11 50       	subi	r17, 0x01	; 1
    1486:	01 c0       	rjmp	.+2      	; 0x148a <corner_pickup+0x2e>
		else{i++;}
    1488:	1f 5f       	subi	r17, 0xFF	; 255

void corner_pickup()
{
	back_mm(20);
	unsigned char i=current_angle;
	while (i != 95)
    148a:	1f 35       	cpi	r17, 0x5F	; 95
    148c:	99 f7       	brne	.-26     	; 0x1474 <corner_pickup+0x18>
  		servo_3(i);
 	 	_delay_ms(10);
		if(i>95){i--;}
		else{i++;}
 	}
	current_angle=95;
    148e:	10 93 32 03 	sts	0x0332, r17
	servo_grab();
    1492:	0e 94 9f 04 	call	0x93e	; 0x93e <servo_grab>
	forward_mm(20);
    1496:	84 e1       	ldi	r24, 0x14	; 20
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 20 0a 	call	0x1440	; 0x1440 <forward_mm>
    149e:	88 ee       	ldi	r24, 0xE8	; 232
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	20 e7       	ldi	r18, 0x70	; 112
    14a4:	31 e0       	ldi	r19, 0x01	; 1
    14a6:	f9 01       	movw	r30, r18
    14a8:	31 97       	sbiw	r30, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <corner_pickup+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ae:	d9 f7       	brne	.-10     	; 0x14a6 <corner_pickup+0x4a>
	_delay_ms(100);
}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	08 95       	ret

000014b8 <angle_rotate>:

	//Function used for turning robot by specified degrees
	void angle_rotate(unsigned int Degrees)
	{
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
		float ReqdShaftCount = 0;
		unsigned long int ReqdShaftCountInt = 0;	

		ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
		ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    14c0:	a0 e0       	ldi	r26, 0x00	; 0
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatunsisf>
    14cc:	28 e4       	ldi	r18, 0x48	; 72
    14ce:	31 ee       	ldi	r19, 0xE1	; 225
    14d0:	42 e8       	ldi	r20, 0x82	; 130
    14d2:	50 e4       	ldi	r21, 0x40	; 64
    14d4:	0e 94 0e 13 	call	0x261c	; 0x261c <__divsf3>
    14d8:	0e 94 38 11 	call	0x2270	; 0x2270 <__fixunssfsi>
    14dc:	7b 01       	movw	r14, r22
    14de:	00 e0       	ldi	r16, 0x00	; 0
    14e0:	10 e0       	ldi	r17, 0x00	; 0
		ShaftCountRight = 0;
    14e2:	10 92 6b 03 	sts	0x036B, r1
    14e6:	10 92 6c 03 	sts	0x036C, r1
    14ea:	10 92 6d 03 	sts	0x036D, r1
    14ee:	10 92 6e 03 	sts	0x036E, r1
		ShaftCountLeft = 0;	
    14f2:	10 92 67 03 	sts	0x0367, r1
    14f6:	10 92 68 03 	sts	0x0368, r1
    14fa:	10 92 69 03 	sts	0x0369, r1
    14fe:	10 92 6a 03 	sts	0x036A, r1

		while (1)
		{
			if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    1502:	80 91 6b 03 	lds	r24, 0x036B
    1506:	90 91 6c 03 	lds	r25, 0x036C
    150a:	a0 91 6d 03 	lds	r26, 0x036D
    150e:	b0 91 6e 03 	lds	r27, 0x036E
    1512:	20 91 67 03 	lds	r18, 0x0367
    1516:	30 91 68 03 	lds	r19, 0x0368
    151a:	40 91 69 03 	lds	r20, 0x0369
    151e:	50 91 6a 03 	lds	r21, 0x036A
    1522:	8e 15       	cp	r24, r14
    1524:	9f 05       	cpc	r25, r15
    1526:	a0 07       	cpc	r26, r16
    1528:	b1 07       	cpc	r27, r17
    152a:	28 f4       	brcc	.+10     	; 0x1536 <angle_rotate+0x7e>
    152c:	2e 15       	cp	r18, r14
    152e:	3f 05       	cpc	r19, r15
    1530:	40 07       	cpc	r20, r16
    1532:	51 07       	cpc	r21, r17
    1534:	30 f3       	brcs	.-52     	; 0x1502 <angle_rotate+0x4a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    1536:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1538:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
    153a:	82 b9       	out	0x02, r24	; 2
			break;
		}
		stop(); //Stop robot
	}
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	08 95       	ret

00001546 <left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    1546:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1548:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    154a:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 			// setting the command to the port
    154c:	22 b9       	out	0x02, r18	; 2
	//Function used for moving robot left by specified angle
	void left_degrees(unsigned int Degrees)
	{
		// 88 pulses for 360 degrees rotation 4.090 degrees per count
		left(); //Turn left
		angle_rotate(Degrees);
    154e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <angle_rotate>
	}
    1552:	08 95       	ret

00001554 <left_back>:
*
*/

void left_back()
{
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int C_thresh=15;
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	left_degrees(35);
    1560:	83 e2       	ldi	r24, 0x23	; 35
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 c0       	rjmp	.+4      	; 0x156a <left_back+0x16>
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
	{
		left_degrees(1);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <left_degrees>
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    1574:	90 e0       	ldi	r25, 0x00	; 0
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	int C_thresh=15;
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	left_degrees(35);
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
    1576:	0f 97       	sbiw	r24, 0x0f	; 15
    1578:	b4 f3       	brlt	.-20     	; 0x1566 <left_back+0x12>
	{
		left_degrees(1);
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	}		
}
    157a:	08 95       	ret

0000157c <right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    157c:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    157e:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    1580:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 			// setting the command to the port
    1582:	22 b9       	out	0x02, r18	; 2
	//Function used for moving robot right by specified angle
	void right_degrees(unsigned int Degrees)
	{
		// 88 pulses for 360 degrees rotation 4.090 degrees per count
		right(); //Turn right
		angle_rotate(Degrees);
    1584:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <angle_rotate>
	}
    1588:	08 95       	ret

0000158a <right_back>:
*
*/

void right_back()
{
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int C_thresh=15;
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	right_degrees(45);
    1596:	8d e2       	ldi	r24, 0x2D	; 45
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <right_back+0x16>
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
	{
		right_degrees(1);
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 be 0a 	call	0x157c	; 0x157c <right_degrees>
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    15aa:	90 e0       	ldi	r25, 0x00	; 0
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	int C_thresh=15;
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	right_degrees(45);
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
    15ac:	0f 97       	sbiw	r24, 0x0f	; 15
    15ae:	b4 f3       	brlt	.-20     	; 0x159c <right_back+0x12>
	{
		right_degrees(1);
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	}		
}
    15b0:	08 95       	ret

000015b2 <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    15b2:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    15b4:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    15b6:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 			// setting the command to the port
    15b8:	22 b9       	out	0x02, r18	; 2
	void soft_left_degrees(unsigned int Degrees)
	{
		// 176 pulses for 360 degrees rotation 2.045 degrees per count
		soft_left(); //Turn soft left
		Degrees=Degrees*2;
		angle_rotate(Degrees);
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <angle_rotate>
	}
    15c2:	08 95       	ret

000015c4 <left_conner>:
*
*/

void left_conner()
{
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int C_thresh=15;
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    15ca:	82 e0       	ldi	r24, 0x02	; 2
    15cc:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	soft_left_degrees(1);
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
	{
		soft_left_degrees(1);
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <soft_left_degrees>
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    15de:	90 e0       	ldi	r25, 0x00	; 0
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	int C_thresh=15;
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	soft_left_degrees(1);
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
    15e0:	0f 97       	sbiw	r24, 0x0f	; 15
    15e2:	b4 f3       	brlt	.-20     	; 0x15d0 <left_conner+0xc>
	{
		soft_left_degrees(1);
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	}
}
    15e4:	08 95       	ret

000015e6 <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    15e6:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    15e8:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    15ea:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 			// setting the command to the port
    15ec:	22 b9       	out	0x02, r18	; 2
	void soft_right_degrees(unsigned int Degrees)
	{
		// 176 pulses for 360 degrees rotation 2.045 degrees per count
		soft_right();  //Turn soft right
		Degrees=Degrees*2;
		angle_rotate(Degrees);
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <angle_rotate>
	}
    15f6:	08 95       	ret

000015f8 <right_conner>:
*
*/

void right_conner()
{
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int C_thresh=15;
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	soft_right_degrees(1);
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
	{
		soft_right_degrees(1);
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <soft_right_degrees>
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    1612:	90 e0       	ldi	r25, 0x00	; 0
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	int C_thresh=15;
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	soft_right_degrees(1);
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
    1614:	0f 97       	sbiw	r24, 0x0f	; 15
    1616:	b4 f3       	brlt	.-20     	; 0x1604 <right_conner+0xc>
		soft_right_degrees(1);
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	}
	
			
}
    1618:	08 95       	ret

0000161a <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    161a:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    161c:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    161e:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 			// setting the command to the port
    1620:	22 b9       	out	0x02, r18	; 2
	void soft_left_2_degrees(unsigned int Degrees)
	{
		// 176 pulses for 360 degrees rotation 2.045 degrees per count
		soft_left_2(); //Turn reverse soft left
		Degrees=Degrees*2;
		angle_rotate(Degrees);
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <angle_rotate>
	}	
    162a:	08 95       	ret

0000162c <left_180>:
*/


void left_180()
{
	int	Left = ADC_Conversion1(3);	//Getting data of Left WL Sensor
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    1632:	82 e0       	ldi	r24, 0x02	; 2
    1634:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int Right = ADC_Conversion1(1);	//Getting data of Right WL Sensor
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int C_thresh=15;
	Left = ADC_Conversion1(3);	//Getting data of Left WL Sensor
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	Right = ADC_Conversion1(1);	//Getting data of Right WL Sensor
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>

	soft_left_degrees(45);
    1650:	8d e2       	ldi	r24, 0x2D	; 45
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 c0       	rjmp	.+4      	; 0x165a <left_180+0x2e>
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
	{
		soft_left_degrees(1);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <soft_left_degrees>
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    1664:	90 e0       	ldi	r25, 0x00	; 0
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	Right = ADC_Conversion1(1);	//Getting data of Right WL Sensor

	soft_left_degrees(45);
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
    1666:	0f 97       	sbiw	r24, 0x0f	; 15
    1668:	b4 f3       	brlt	.-20     	; 0x1656 <left_180+0x2a>
*/

void change_direction_left()
{
	
	current_direction--;
    166a:	80 91 73 03 	lds	r24, 0x0373
    166e:	90 91 74 03 	lds	r25, 0x0374
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	90 93 74 03 	sts	0x0374, r25
    1678:	80 93 73 03 	sts	0x0373, r24
	if(current_direction==-1)
    167c:	8f 5f       	subi	r24, 0xFF	; 255
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	31 f4       	brne	.+12     	; 0x168e <left_180+0x62>
	{
		current_direction=3;
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	90 93 74 03 	sts	0x0374, r25
    168a:	80 93 73 03 	sts	0x0373, r24
	{
		soft_left_degrees(1);
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	}
	change_direction_left();
	soft_left_2_degrees(45);
    168e:	8d e2       	ldi	r24, 0x2D	; 45
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <left_180+0x6c>
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
	{
		soft_left_2_degrees(1);
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 0d 0b 	call	0x161a	; 0x161a <soft_left_2_degrees>
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    16a2:	90 e0       	ldi	r25, 0x00	; 0
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	}
	change_direction_left();
	soft_left_2_degrees(45);
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
    16a4:	0f 97       	sbiw	r24, 0x0f	; 15
    16a6:	b4 f3       	brlt	.-20     	; 0x1694 <left_180+0x68>
*/

void change_direction_left()
{
	
	current_direction--;
    16a8:	80 91 73 03 	lds	r24, 0x0373
    16ac:	90 91 74 03 	lds	r25, 0x0374
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	90 93 74 03 	sts	0x0374, r25
    16b6:	80 93 73 03 	sts	0x0373, r24
	if(current_direction==-1)
    16ba:	8f 5f       	subi	r24, 0xFF	; 255
    16bc:	9f 4f       	sbci	r25, 0xFF	; 255
    16be:	31 f4       	brne	.+12     	; 0x16cc <left_180+0xa0>
	{
		current_direction=3;
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	90 93 74 03 	sts	0x0374, r25
    16c8:	80 93 73 03 	sts	0x0373, r24
    16cc:	08 95       	ret

000016ce <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    16ce:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    16d0:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    16d2:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 			// setting the command to the port
    16d4:	22 b9       	out	0x02, r18	; 2
	void soft_right_2_degrees(unsigned int Degrees)
	{
		// 176 pulses for 360 degrees rotation 2.045 degrees per count
		soft_right_2();  //Turn reverse soft right
		Degrees=Degrees*2;
		angle_rotate(Degrees);
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <angle_rotate>
	}
    16de:	08 95       	ret

000016e0 <right_180>:
*
*/

void right_180()
{
	int	Left = ADC_Conversion1(3);	//Getting data of Left WL Sensor
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int Right = ADC_Conversion1(1);	//Getting data of Right WL Sensor
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int C_thresh=15;
	Left = ADC_Conversion1(3);	//Getting data of Left WL Sensor
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	Right = ADC_Conversion1(1);	//Getting data of Right WL Sensor
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>

	soft_right_degrees(45);
    1704:	8d e2       	ldi	r24, 0x2D	; 45
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 c0       	rjmp	.+4      	; 0x170e <right_180+0x2e>
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
	{
		soft_right_degrees(1);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <soft_right_degrees>
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    1718:	90 e0       	ldi	r25, 0x00	; 0
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	Right = ADC_Conversion1(1);	//Getting data of Right WL Sensor

	soft_right_degrees(45);
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
    171a:	0f 97       	sbiw	r24, 0x0f	; 15
    171c:	b4 f3       	brlt	.-20     	; 0x170a <right_180+0x2a>
	{
		soft_right_degrees(1);
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	}
	change_direction_right();
    171e:	0e 94 99 03 	call	0x732	; 0x732 <change_direction_right>
	soft_right_2_degrees(45);
    1722:	8d e2       	ldi	r24, 0x2D	; 45
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <right_180+0x4c>
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
	{
		soft_right_2_degrees(1);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <soft_right_2_degrees>
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    1736:	90 e0       	ldi	r25, 0x00	; 0
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	}
	change_direction_right();
	soft_right_2_degrees(45);
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	while(Center<C_thresh)
    1738:	0f 97       	sbiw	r24, 0x0f	; 15
    173a:	b4 f3       	brlt	.-20     	; 0x1728 <right_180+0x48>
	{
		soft_right_2_degrees(1);
		Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	}
	change_direction_right();
    173c:	0e 94 99 03 	call	0x732	; 0x732 <change_direction_right>
			
}
    1740:	08 95       	ret

00001742 <change_direction_to>:
* Example Call: change_direction_to(2),//2:-south
*
*/

void change_direction_to(int dir)
{
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	ec 01       	movw	r28, r24
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1750:	8a ef       	ldi	r24, 0xFA	; 250
    1752:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1756:	80 93 2a 01 	sts	0x012A, r24
	velocity(250,250);
	int	Left = ADC_Conversion1(3);	//Getting data of Left WL Sensor
    175a:	83 e0       	ldi	r24, 0x03	; 3
    175c:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int Right = ADC_Conversion1(1);	//Getting data of Right WL Sensor
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	int C_thresh=15;
	Left = ADC_Conversion1(3);	//Getting data of Left WL Sensor
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
	Right = ADC_Conversion1(1);	//Getting data of Right WL Sensor
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>

	int temp=current_direction;
    177e:	00 91 73 03 	lds	r16, 0x0373
    1782:	10 91 74 03 	lds	r17, 0x0374
{
	
	current_direction--;
	if(current_direction==-1)
	{
		current_direction=3;
    1786:	53 e0       	ldi	r21, 0x03	; 3
    1788:	e5 2e       	mov	r14, r21
    178a:	f1 2c       	mov	r15, r1
    178c:	a0 c0       	rjmp	.+320    	; 0x18ce <change_direction_to+0x18c>
	Right = ADC_Conversion1(1);	//Getting data of Right WL Sensor

	int temp=current_direction;
	while(current_direction!=dir)
	{
		if(temp==3&&dir==0)
    178e:	03 30       	cpi	r16, 0x03	; 3
    1790:	11 05       	cpc	r17, r1
    1792:	81 f4       	brne	.+32     	; 0x17b4 <change_direction_to+0x72>
    1794:	20 97       	sbiw	r28, 0x00	; 0
    1796:	29 f5       	brne	.+74     	; 0x17e2 <change_direction_to+0xa0>
		{
			soft_right_degrees(45); //Rotate robot left by 90 degrees
    1798:	8d e2       	ldi	r24, 0x2D	; 45
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <change_direction_to+0x60>
			Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			while(Center<C_thresh)
			{
				soft_right_degrees(1);
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <soft_right_degrees>
				Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    17ac:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(temp==3&&dir==0)
		{
			soft_right_degrees(45); //Rotate robot left by 90 degrees
			Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			while(Center<C_thresh)
    17ae:	0f 97       	sbiw	r24, 0x0f	; 15
    17b0:	b4 f3       	brlt	.-20     	; 0x179e <change_direction_to+0x5c>
    17b2:	6b c0       	rjmp	.+214    	; 0x188a <change_direction_to+0x148>
				soft_right_degrees(1);
				Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			}
			change_direction_right();
		}
		else if(temp==0&&dir==3)
    17b4:	01 15       	cp	r16, r1
    17b6:	11 05       	cpc	r17, r1
    17b8:	a1 f4       	brne	.+40     	; 0x17e2 <change_direction_to+0xa0>
    17ba:	c3 30       	cpi	r28, 0x03	; 3
    17bc:	d1 05       	cpc	r29, r1
    17be:	71 f4       	brne	.+28     	; 0x17dc <change_direction_to+0x9a>
		{
			soft_left_degrees(45); //Rotate robot left by 90 degrees
    17c0:	8d e2       	ldi	r24, 0x2D	; 45
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <change_direction_to+0x88>
			Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			while(Center<C_thresh)
			{
				soft_left_degrees(1);
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <soft_left_degrees>
				Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    17d4:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if(temp==0&&dir==3)
		{
			soft_left_degrees(45); //Rotate robot left by 90 degrees
			Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			while(Center<C_thresh)
    17d6:	0f 97       	sbiw	r24, 0x0f	; 15
    17d8:	b4 f3       	brlt	.-20     	; 0x17c6 <change_direction_to+0x84>
    17da:	69 c0       	rjmp	.+210    	; 0x18ae <change_direction_to+0x16c>
				Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			}
			change_direction_left();
			
		}
		else if((temp==0&&dir==2)||(temp==2&&dir==0))
    17dc:	c2 30       	cpi	r28, 0x02	; 2
    17de:	d1 05       	cpc	r29, r1
    17e0:	31 f0       	breq	.+12     	; 0x17ee <change_direction_to+0xac>
    17e2:	02 30       	cpi	r16, 0x02	; 2
    17e4:	11 05       	cpc	r17, r1
    17e6:	c1 f4       	brne	.+48     	; 0x1818 <change_direction_to+0xd6>
    17e8:	20 97       	sbiw	r28, 0x00	; 0
    17ea:	09 f0       	breq	.+2      	; 0x17ee <change_direction_to+0xac>
    17ec:	3e c0       	rjmp	.+124    	; 0x186a <change_direction_to+0x128>
		{
			if((current_x==0&&(temp==0&&dir==2))||(current_x==5&&(temp==2&&dir==0)))
    17ee:	80 91 71 03 	lds	r24, 0x0371
    17f2:	90 91 72 03 	lds	r25, 0x0372
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	39 f4       	brne	.+14     	; 0x1808 <change_direction_to+0xc6>
    17fa:	01 15       	cp	r16, r1
    17fc:	11 05       	cpc	r17, r1
    17fe:	91 f5       	brne	.+100    	; 0x1864 <change_direction_to+0x122>
    1800:	c2 30       	cpi	r28, 0x02	; 2
    1802:	d1 05       	cpc	r29, r1
    1804:	79 f5       	brne	.+94     	; 0x1864 <change_direction_to+0x122>
    1806:	2b c0       	rjmp	.+86     	; 0x185e <change_direction_to+0x11c>
    1808:	05 97       	sbiw	r24, 0x05	; 5
    180a:	61 f5       	brne	.+88     	; 0x1864 <change_direction_to+0x122>
    180c:	02 30       	cpi	r16, 0x02	; 2
    180e:	11 05       	cpc	r17, r1
    1810:	49 f5       	brne	.+82     	; 0x1864 <change_direction_to+0x122>
    1812:	20 97       	sbiw	r28, 0x00	; 0
    1814:	39 f5       	brne	.+78     	; 0x1864 <change_direction_to+0x122>
    1816:	23 c0       	rjmp	.+70     	; 0x185e <change_direction_to+0x11c>
			else
			{
				left_180();
			}
		}
		else if((temp==1&&dir==3)||(temp==3&&dir==1))
    1818:	01 30       	cpi	r16, 0x01	; 1
    181a:	11 05       	cpc	r17, r1
    181c:	21 f4       	brne	.+8      	; 0x1826 <change_direction_to+0xe4>
    181e:	c3 30       	cpi	r28, 0x03	; 3
    1820:	d1 05       	cpc	r29, r1
    1822:	19 f5       	brne	.+70     	; 0x186a <change_direction_to+0x128>
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <change_direction_to+0xf0>
    1826:	03 30       	cpi	r16, 0x03	; 3
    1828:	11 05       	cpc	r17, r1
    182a:	f9 f4       	brne	.+62     	; 0x186a <change_direction_to+0x128>
    182c:	c1 30       	cpi	r28, 0x01	; 1
    182e:	d1 05       	cpc	r29, r1
    1830:	e1 f4       	brne	.+56     	; 0x186a <change_direction_to+0x128>
		{
			if((current_y==5&&(temp==1&&dir==3))||(current_y==0&&(temp==3&&dir==1)))
    1832:	80 91 78 03 	lds	r24, 0x0378
    1836:	90 91 79 03 	lds	r25, 0x0379
    183a:	85 30       	cpi	r24, 0x05	; 5
    183c:	91 05       	cpc	r25, r1
    183e:	39 f4       	brne	.+14     	; 0x184e <change_direction_to+0x10c>
    1840:	01 30       	cpi	r16, 0x01	; 1
    1842:	11 05       	cpc	r17, r1
    1844:	79 f4       	brne	.+30     	; 0x1864 <change_direction_to+0x122>
    1846:	c3 30       	cpi	r28, 0x03	; 3
    1848:	d1 05       	cpc	r29, r1
    184a:	61 f4       	brne	.+24     	; 0x1864 <change_direction_to+0x122>
    184c:	08 c0       	rjmp	.+16     	; 0x185e <change_direction_to+0x11c>
    184e:	89 2b       	or	r24, r25
    1850:	49 f4       	brne	.+18     	; 0x1864 <change_direction_to+0x122>
    1852:	03 30       	cpi	r16, 0x03	; 3
    1854:	11 05       	cpc	r17, r1
    1856:	31 f4       	brne	.+12     	; 0x1864 <change_direction_to+0x122>
    1858:	c1 30       	cpi	r28, 0x01	; 1
    185a:	d1 05       	cpc	r29, r1
    185c:	19 f4       	brne	.+6      	; 0x1864 <change_direction_to+0x122>
			{
				right_180();
    185e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <right_180>
    1862:	35 c0       	rjmp	.+106    	; 0x18ce <change_direction_to+0x18c>
			}
			else
			{
				left_180();
    1864:	0e 94 16 0b 	call	0x162c	; 0x162c <left_180>
    1868:	32 c0       	rjmp	.+100    	; 0x18ce <change_direction_to+0x18c>
			}
		}
		else if(temp<dir)
    186a:	0c 17       	cp	r16, r28
    186c:	1d 07       	cpc	r17, r29
    186e:	84 f4       	brge	.+32     	; 0x1890 <change_direction_to+0x14e>
		{
			soft_right_degrees(45);
    1870:	8d e2       	ldi	r24, 0x2D	; 45
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <change_direction_to+0x138>
			Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			while(Center<C_thresh)
			{
				soft_right_degrees(1);
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <soft_right_degrees>
				Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    1884:	90 e0       	ldi	r25, 0x00	; 0
		}
		else if(temp<dir)
		{
			soft_right_degrees(45);
			Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			while(Center<C_thresh)
    1886:	0f 97       	sbiw	r24, 0x0f	; 15
    1888:	b4 f3       	brlt	.-20     	; 0x1876 <change_direction_to+0x134>
			{
				soft_right_degrees(1);
				Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			}
			
			change_direction_right();
    188a:	0e 94 99 03 	call	0x732	; 0x732 <change_direction_right>
    188e:	1f c0       	rjmp	.+62     	; 0x18ce <change_direction_to+0x18c>
		}
		else
		{
			soft_left_degrees(45);
    1890:	8d e2       	ldi	r24, 0x2D	; 45
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <soft_left_degrees>
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <change_direction_to+0x160>
			Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			while(Center<C_thresh)
			{
				left_degrees(1);
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <left_degrees>
				Center = ADC_Conversion1(2);//Getting data of Center WL Sensor
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	0e 94 20 03 	call	0x640	; 0x640 <ADC_Conversion1>
    18a8:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		{
			soft_left_degrees(45);
			Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
			while(Center<C_thresh)
    18aa:	0f 97       	sbiw	r24, 0x0f	; 15
    18ac:	b4 f3       	brlt	.-20     	; 0x189a <change_direction_to+0x158>
*/

void change_direction_left()
{
	
	current_direction--;
    18ae:	80 91 73 03 	lds	r24, 0x0373
    18b2:	90 91 74 03 	lds	r25, 0x0374
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	90 93 74 03 	sts	0x0374, r25
    18bc:	80 93 73 03 	sts	0x0373, r24
	if(current_direction==-1)
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	21 f4       	brne	.+8      	; 0x18ce <change_direction_to+0x18c>
	{
		current_direction=3;
    18c6:	f0 92 74 03 	sts	0x0374, r15
    18ca:	e0 92 73 03 	sts	0x0373, r14
	Left = ADC_Conversion1(3);	//Getting data of Left WL Sensor
	Center = ADC_Conversion1(2);	//Getting data of Center WL Sensor
	Right = ADC_Conversion1(1);	//Getting data of Right WL Sensor

	int temp=current_direction;
	while(current_direction!=dir)
    18ce:	80 91 73 03 	lds	r24, 0x0373
    18d2:	90 91 74 03 	lds	r25, 0x0374
    18d6:	8c 17       	cp	r24, r28
    18d8:	9d 07       	cpc	r25, r29
    18da:	09 f0       	breq	.+2      	; 0x18de <change_direction_to+0x19c>
    18dc:	58 cf       	rjmp	.-336    	; 0x178e <change_direction_to+0x4c>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    18de:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    18e0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
    18e2:	82 b9       	out	0x02, r24	; 2
			
			change_direction_left();
		}
	}
	stop();
}
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	08 95       	ret

000018f2 <pickup_animal>:
* Example Call: pickup_animal()
*
*/

void pickup_animal()
{
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
	int present_direction;
	present_direction=current_direction;
    18f6:	c0 91 73 03 	lds	r28, 0x0373
    18fa:	d0 91 74 03 	lds	r29, 0x0374
		
	//####### corner nodes ###########
	if(current_x==5&&current_y==5)
    18fe:	20 91 71 03 	lds	r18, 0x0371
    1902:	30 91 72 03 	lds	r19, 0x0372
    1906:	25 30       	cpi	r18, 0x05	; 5
    1908:	31 05       	cpc	r19, r1
    190a:	09 f0       	breq	.+2      	; 0x190e <pickup_animal+0x1c>
    190c:	42 c0       	rjmp	.+132    	; 0x1992 <pickup_animal+0xa0>
    190e:	80 91 78 03 	lds	r24, 0x0378
    1912:	90 91 79 03 	lds	r25, 0x0379
    1916:	85 30       	cpi	r24, 0x05	; 5
    1918:	91 05       	cpc	r25, r1
    191a:	c1 f4       	brne	.+48     	; 0x194c <pickup_animal+0x5a>
	{	
		forward_mm(35);
    191c:	83 e2       	ldi	r24, 0x23	; 35
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 20 0a 	call	0x1440	; 0x1440 <forward_mm>
		if(current_direction!=0)
    1924:	80 91 73 03 	lds	r24, 0x0373
    1928:	90 91 74 03 	lds	r25, 0x0374
    192c:	89 2b       	or	r24, r25
    192e:	19 f0       	breq	.+6      	; 0x1936 <pickup_animal+0x44>
		{
			left_conner();
    1930:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <left_conner>
    1934:	02 c0       	rjmp	.+4      	; 0x193a <pickup_animal+0x48>
			corner_pickup();			
		}
		else
		{
			right_conner();
    1936:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <right_conner>
			corner_pickup();	
    193a:	0e 94 2e 0a 	call	0x145c	; 0x145c <corner_pickup>
		}
		servo_reset1();
    193e:	0e 94 0c 05 	call	0xa18	; 0xa18 <servo_reset1>
		right_back();
    1942:	0e 94 c5 0a 	call	0x158a	; 0x158a <right_back>
		current_direction=2;
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	1e c0       	rjmp	.+60     	; 0x1988 <pickup_animal+0x96>
		
	}
	else if(current_x==5&&current_y==0)
    194c:	89 2b       	or	r24, r25
    194e:	09 f0       	breq	.+2      	; 0x1952 <pickup_animal+0x60>
    1950:	66 c0       	rjmp	.+204    	; 0x1a1e <pickup_animal+0x12c>
	{	
		forward_mm(35);
    1952:	83 e2       	ldi	r24, 0x23	; 35
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 20 0a 	call	0x1440	; 0x1440 <forward_mm>
		if(current_direction!=1)
    195a:	80 91 73 03 	lds	r24, 0x0373
    195e:	90 91 74 03 	lds	r25, 0x0374
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	39 f0       	breq	.+14     	; 0x1974 <pickup_animal+0x82>
		{
			left_conner();
    1966:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <left_conner>
			corner_pickup();
    196a:	0e 94 2e 0a 	call	0x145c	; 0x145c <corner_pickup>
			servo_reset1();
    196e:	0e 94 0c 05 	call	0xa18	; 0xa18 <servo_reset1>
    1972:	04 c0       	rjmp	.+8      	; 0x197c <pickup_animal+0x8a>
		}
		else
		{
			right_conner();
    1974:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <right_conner>
			corner_pickup();
    1978:	0e 94 2e 0a 	call	0x145c	; 0x145c <corner_pickup>
		}
		servo_reset1();
    197c:	0e 94 0c 05 	call	0xa18	; 0xa18 <servo_reset1>
		right_back();
    1980:	0e 94 c5 0a 	call	0x158a	; 0x158a <right_back>
		current_direction=3;
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	90 93 74 03 	sts	0x0374, r25
    198c:	80 93 73 03 	sts	0x0373, r24
    1990:	79 c0       	rjmp	.+242    	; 0x1a84 <pickup_animal+0x192>
    1992:	80 91 78 03 	lds	r24, 0x0378
    1996:	90 91 79 03 	lds	r25, 0x0379
		
		
	}
	else if(current_x==0&&current_y==0)
    199a:	23 2b       	or	r18, r19
    199c:	09 f0       	breq	.+2      	; 0x19a0 <pickup_animal+0xae>
    199e:	47 c0       	rjmp	.+142    	; 0x1a2e <pickup_animal+0x13c>
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	d1 f4       	brne	.+52     	; 0x19d8 <pickup_animal+0xe6>
	{
		forward_mm(35);
    19a4:	83 e2       	ldi	r24, 0x23	; 35
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 20 0a 	call	0x1440	; 0x1440 <forward_mm>
		if(current_direction!=2)
    19ac:	80 91 73 03 	lds	r24, 0x0373
    19b0:	90 91 74 03 	lds	r25, 0x0374
    19b4:	02 97       	sbiw	r24, 0x02	; 2
    19b6:	19 f0       	breq	.+6      	; 0x19be <pickup_animal+0xcc>
		{
			left_conner();
    19b8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <left_conner>
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <pickup_animal+0xd0>
			corner_pickup();
		}
		else
		{
			right_conner();
    19be:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <right_conner>
			corner_pickup();
    19c2:	0e 94 2e 0a 	call	0x145c	; 0x145c <corner_pickup>
		}
		servo_reset1();
    19c6:	0e 94 0c 05 	call	0xa18	; 0xa18 <servo_reset1>
		right_back();
    19ca:	0e 94 c5 0a 	call	0x158a	; 0x158a <right_back>
		current_direction=0;
    19ce:	10 92 74 03 	sts	0x0374, r1
    19d2:	10 92 73 03 	sts	0x0373, r1
    19d6:	56 c0       	rjmp	.+172    	; 0x1a84 <pickup_animal+0x192>
		
		
	}
	else if(current_x==0&&current_y==5)
    19d8:	05 97       	sbiw	r24, 0x05	; 5
    19da:	c1 f4       	brne	.+48     	; 0x1a0c <pickup_animal+0x11a>
	{
		forward_mm(35);
    19dc:	83 e2       	ldi	r24, 0x23	; 35
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 20 0a 	call	0x1440	; 0x1440 <forward_mm>
		if(current_direction!=3)
    19e4:	80 91 73 03 	lds	r24, 0x0373
    19e8:	90 91 74 03 	lds	r25, 0x0374
    19ec:	03 97       	sbiw	r24, 0x03	; 3
    19ee:	19 f0       	breq	.+6      	; 0x19f6 <pickup_animal+0x104>
		{
			left_conner();
    19f0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <left_conner>
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <pickup_animal+0x108>
			corner_pickup();
		}
		else
		{
			right_conner();
    19f6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <right_conner>
			corner_pickup();	
    19fa:	0e 94 2e 0a 	call	0x145c	; 0x145c <corner_pickup>
		}
		servo_reset1();
    19fe:	0e 94 0c 05 	call	0xa18	; 0xa18 <servo_reset1>
		right_back();
    1a02:	0e 94 c5 0a 	call	0x158a	; 0x158a <right_back>
		current_direction=1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	be cf       	rjmp	.-132    	; 0x1988 <pickup_animal+0x96>
	}
	
	//####### side nodes #########
	else if(current_x==0)
	{
		if(current_direction==3)
    1a0c:	c3 30       	cpi	r28, 0x03	; 3
    1a0e:	d1 05       	cpc	r29, r1
    1a10:	f9 f0       	breq	.+62     	; 0x1a50 <pickup_animal+0x15e>
		{
			forward_mm(20);
			corner_pickup();
			back_mm(20);
		}
		else if(current_direction!=2)
    1a12:	c2 30       	cpi	r28, 0x02	; 2
    1a14:	d1 05       	cpc	r29, r1
    1a16:	89 f1       	breq	.+98     	; 0x1a7a <pickup_animal+0x188>
		{
			
			change_direction_to(0);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	29 c0       	rjmp	.+82     	; 0x1a70 <pickup_animal+0x17e>
		
		
	}
	else if(current_x==5)
	{
		if(current_direction==1)
    1a1e:	c1 30       	cpi	r28, 0x01	; 1
    1a20:	d1 05       	cpc	r29, r1
    1a22:	b1 f0       	breq	.+44     	; 0x1a50 <pickup_animal+0x15e>
		{
			forward_mm(20);
			corner_pickup();
			back_mm(20);
		}
		else if(current_direction!=0)
    1a24:	20 97       	sbiw	r28, 0x00	; 0
    1a26:	49 f1       	breq	.+82     	; 0x1a7a <pickup_animal+0x188>
		{
			change_direction_to(2);
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	21 c0       	rjmp	.+66     	; 0x1a70 <pickup_animal+0x17e>
			side_pickup_right();
		} 
		change_direction_to(present_direction);
	
	}
	else if(current_y==0)
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	59 f4       	brne	.+22     	; 0x1a48 <pickup_animal+0x156>
	{
		if(current_direction==2)
    1a32:	c2 30       	cpi	r28, 0x02	; 2
    1a34:	d1 05       	cpc	r29, r1
    1a36:	61 f0       	breq	.+24     	; 0x1a50 <pickup_animal+0x15e>
		{
			forward_mm(20);
			corner_pickup();
			back_mm(20);
		}
		else if(current_direction!=3)
    1a38:	c3 30       	cpi	r28, 0x03	; 3
    1a3a:	d1 05       	cpc	r29, r1
    1a3c:	d9 f0       	breq	.+54     	; 0x1a74 <pickup_animal+0x182>
		{
			change_direction_to(1);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 a1 0b 	call	0x1742	; 0x1742 <change_direction_to>
    1a46:	19 c0       	rjmp	.+50     	; 0x1a7a <pickup_animal+0x188>
			side_pickup_left();
		}
		change_direction_to(present_direction);
	
	}
	else if(current_y==5)
    1a48:	05 97       	sbiw	r24, 0x05	; 5
    1a4a:	e1 f4       	brne	.+56     	; 0x1a84 <pickup_animal+0x192>
	{
		if(current_direction==0)
    1a4c:	20 97       	sbiw	r28, 0x00	; 0
    1a4e:	59 f4       	brne	.+22     	; 0x1a66 <pickup_animal+0x174>
		{
			forward_mm(20);
    1a50:	84 e1       	ldi	r24, 0x14	; 20
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 20 0a 	call	0x1440	; 0x1440 <forward_mm>
			corner_pickup();
    1a58:	0e 94 2e 0a 	call	0x145c	; 0x145c <corner_pickup>
			back_mm(20);
    1a5c:	84 e1       	ldi	r24, 0x14	; 20
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 27 0a 	call	0x144e	; 0x144e <back_mm>
    1a64:	0c c0       	rjmp	.+24     	; 0x1a7e <pickup_animal+0x18c>
		}
		else if(current_direction!=3)
    1a66:	c3 30       	cpi	r28, 0x03	; 3
    1a68:	d1 05       	cpc	r29, r1
    1a6a:	39 f0       	breq	.+14     	; 0x1a7a <pickup_animal+0x188>
		{
			change_direction_to(1);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 a1 0b 	call	0x1742	; 0x1742 <change_direction_to>
			side_pickup_left();
    1a74:	0e 94 9c 05 	call	0xb38	; 0xb38 <side_pickup_left>
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <pickup_animal+0x18c>
		}
		else
		{
			side_pickup_right();
    1a7a:	0e 94 7f 05 	call	0xafe	; 0xafe <side_pickup_right>
		}
		change_direction_to(present_direction);
    1a7e:	ce 01       	movw	r24, r28
    1a80:	0e 94 a1 0b 	call	0x1742	; 0x1742 <change_direction_to>
	
	}
}
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <ADC_Conversion>:
* Logic: gets analog valuse from specified channal through the input variable and returns
* the value as output
* Example Call: ADC_Conversion(1)
*/
unsigned char ADC_Conversion(unsigned char Ch)
{
    1a8a:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
    1a8c:	88 30       	cpi	r24, 0x08	; 8
    1a8e:	18 f0       	brcs	.+6      	; 0x1a96 <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
    1a90:	88 e0       	ldi	r24, 0x08	; 8
    1a92:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;
	ADMUX= 0x20| Ch;  
    1a96:	97 70       	andi	r25, 0x07	; 7
    1a98:	90 62       	ori	r25, 0x20	; 32
    1a9a:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1a9e:	80 91 7a 00 	lds	r24, 0x007A
    1aa2:	80 64       	ori	r24, 0x40	; 64
    1aa4:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1aa8:	80 91 7a 00 	lds	r24, 0x007A
    1aac:	84 ff       	sbrs	r24, 4
    1aae:	fc cf       	rjmp	.-8      	; 0x1aa8 <ADC_Conversion+0x1e>
	a=ADCH;
    1ab0:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1ab4:	90 91 7a 00 	lds	r25, 0x007A
    1ab8:	90 61       	ori	r25, 0x10	; 16
    1aba:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
    1abe:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
    1ac2:	08 95       	ret

00001ac4 <next_node>:
*
*/

int reset=1;
int next_node(void)
{
    1ac4:	7f 92       	push	r7
    1ac6:	8f 92       	push	r8
    1ac8:	9f 92       	push	r9
    1aca:	af 92       	push	r10
    1acc:	bf 92       	push	r11
    1ace:	cf 92       	push	r12
    1ad0:	df 92       	push	r13
    1ad2:	ef 92       	push	r14
    1ad4:	ff 92       	push	r15
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
		
		//specifiec the angle tried when all sensor are on white and the robot is
		// trying to find the black line
		int tryed=0;
		int tryed_delay=1;
		int	Left = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ADC_Conversion>
		int Center = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ADC_Conversion>
		int Right = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ADC_Conversion>
    1af0:	00 e0       	ldi	r16, 0x00	; 0
    1af2:	10 e0       	ldi	r17, 0x00	; 0
    1af4:	ee 24       	eor	r14, r14
    1af6:	ff 24       	eor	r15, r15
    1af8:	c0 e0       	ldi	r28, 0x00	; 0
    1afa:	d0 e0       	ldi	r29, 0x00	; 0
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1afc:	aa ef       	ldi	r26, 0xFA	; 250
    1afe:	9a 2e       	mov	r9, r26
	OCR5BL = (unsigned char)right_motor;
    1b00:	fc ed       	ldi	r31, 0xDC	; 220
    1b02:	7f 2e       	mov	r7, r31
		int previous_move=0;
		int angle =0 ;
		int wait;
		while(flag==1){

			Left = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1b04:	e8 ec       	ldi	r30, 0xC8	; 200
    1b06:	8e 2e       	mov	r8, r30
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ADC_Conversion>
    1b0e:	a8 2e       	mov	r10, r24
    1b10:	bb 24       	eor	r11, r11
			Center = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ADC_Conversion>
    1b18:	c8 2e       	mov	r12, r24
    1b1a:	dd 24       	eor	r13, r13
			Right = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ADC_Conversion>
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
			lcd_print(1,5,Center,3);
			lcd_print(1,9,Right,3);
			//###############################
			*/

			if(Left<L_thresh && Center<C_thresh && Right>R_thresh){
    1b26:	8f e0       	ldi	r24, 0x0F	; 15
    1b28:	a8 16       	cp	r10, r24
    1b2a:	b1 04       	cpc	r11, r1
    1b2c:	0c f0       	brlt	.+2      	; 0x1b30 <next_node+0x6c>
    1b2e:	42 c0       	rjmp	.+132    	; 0x1bb4 <next_node+0xf0>
    1b30:	8f e0       	ldi	r24, 0x0F	; 15
    1b32:	c8 16       	cp	r12, r24
    1b34:	d1 04       	cpc	r13, r1
    1b36:	44 f4       	brge	.+16     	; 0x1b48 <next_node+0x84>
    1b38:	20 31       	cpi	r18, 0x10	; 16
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	2c f0       	brlt	.+10     	; 0x1b48 <next_node+0x84>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b3e:	90 92 28 01 	sts	0x0128, r9
	OCR5BL = (unsigned char)right_motor;
    1b42:	80 92 2a 01 	sts	0x012A, r8
    1b46:	0b c0       	rjmp	.+22     	; 0x1b5e <next_node+0x9a>
				forward();
				tryed=0;
				angle=0;
				previous_move=1;
			}
			else if(Left<L_thresh && Center>C_thresh && Right>R_thresh){
    1b48:	80 e1       	ldi	r24, 0x10	; 16
    1b4a:	c8 16       	cp	r12, r24
    1b4c:	d1 04       	cpc	r13, r1
    1b4e:	94 f1       	brlt	.+100    	; 0x1bb4 <next_node+0xf0>
    1b50:	20 31       	cpi	r18, 0x10	; 16
    1b52:	31 05       	cpc	r19, r1
    1b54:	84 f0       	brlt	.+32     	; 0x1b76 <next_node+0xb2>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b56:	90 92 28 01 	sts	0x0128, r9
	OCR5BL = (unsigned char)right_motor;
    1b5a:	70 92 2a 01 	sts	0x012A, r7
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    1b5e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1b60:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    1b62:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
    1b64:	82 b9       	out	0x02, r24	; 2
    1b66:	00 e0       	ldi	r16, 0x00	; 0
    1b68:	10 e0       	ldi	r17, 0x00	; 0
    1b6a:	71 e0       	ldi	r23, 0x01	; 1
    1b6c:	e7 2e       	mov	r14, r23
    1b6e:	f1 2c       	mov	r15, r1
    1b70:	c0 e0       	ldi	r28, 0x00	; 0
    1b72:	d0 e0       	ldi	r29, 0x00	; 0
    1b74:	7b c0       	rjmp	.+246    	; 0x1c6c <next_node+0x1a8>
				tryed=0;
				angle=0;
				previous_move=1;
				
			}
			else if (Left<L_thresh && Center>C_thresh && Right<R_thresh){
    1b76:	2f 30       	cpi	r18, 0x0F	; 15
    1b78:	31 05       	cpc	r19, r1
    1b7a:	e1 f0       	breq	.+56     	; 0x1bb4 <next_node+0xf0>
				if(previous_move==0)
    1b7c:	e1 14       	cp	r14, r1
    1b7e:	f1 04       	cpc	r15, r1
    1b80:	19 f4       	brne	.+6      	; 0x1b88 <next_node+0xc4>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b82:	90 92 28 01 	sts	0x0128, r9
    1b86:	06 c0       	rjmp	.+12     	; 0x1b94 <next_node+0xd0>
				{
					velocity(250,250);
				}
				else if(previous_move==1)
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	e8 16       	cp	r14, r24
    1b8c:	f1 04       	cpc	r15, r1
    1b8e:	29 f4       	brne	.+10     	; 0x1b9a <next_node+0xd6>
    1b90:	70 92 28 01 	sts	0x0128, r7
	OCR5BL = (unsigned char)right_motor;
    1b94:	90 92 2a 01 	sts	0x012A, r9
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <next_node+0xde>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b9a:	90 92 28 01 	sts	0x0128, r9
	OCR5BL = (unsigned char)right_motor;
    1b9e:	70 92 2a 01 	sts	0x012A, r7
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    1ba2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1ba4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    1ba6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
    1ba8:	82 b9       	out	0x02, r24	; 2
    1baa:	00 e0       	ldi	r16, 0x00	; 0
    1bac:	10 e0       	ldi	r17, 0x00	; 0
    1bae:	ee 24       	eor	r14, r14
    1bb0:	ff 24       	eor	r15, r15
    1bb2:	de cf       	rjmp	.-68     	; 0x1b70 <next_node+0xac>
				forward();
				tryed=0;
				angle=0;
				previous_move=0;
			}
			else if(Left>L_thresh && Center<C_thresh && Right<R_thresh){
    1bb4:	80 e1       	ldi	r24, 0x10	; 16
    1bb6:	a8 16       	cp	r10, r24
    1bb8:	b1 04       	cpc	r11, r1
    1bba:	fc f0       	brlt	.+62     	; 0x1bfa <next_node+0x136>
    1bbc:	8f e0       	ldi	r24, 0x0F	; 15
    1bbe:	c8 16       	cp	r12, r24
    1bc0:	d1 04       	cpc	r13, r1
    1bc2:	34 f4       	brge	.+12     	; 0x1bd0 <next_node+0x10c>
    1bc4:	2f 30       	cpi	r18, 0x0F	; 15
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	1c f4       	brge	.+6      	; 0x1bd0 <next_node+0x10c>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1bca:	80 92 28 01 	sts	0x0128, r8
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <next_node+0x11e>
				forward();
				tryed=0;
				angle=0;
				previous_move=2;
			}
			else if(Left>L_thresh && Center>C_thresh && Right<R_thresh){
    1bd0:	80 e1       	ldi	r24, 0x10	; 16
    1bd2:	c8 16       	cp	r12, r24
    1bd4:	d1 04       	cpc	r13, r1
    1bd6:	8c f0       	brlt	.+34     	; 0x1bfa <next_node+0x136>
    1bd8:	2f 30       	cpi	r18, 0x0F	; 15
    1bda:	31 05       	cpc	r19, r1
    1bdc:	74 f4       	brge	.+28     	; 0x1bfa <next_node+0x136>
    1bde:	70 92 28 01 	sts	0x0128, r7
	OCR5BL = (unsigned char)right_motor;
    1be2:	90 92 2a 01 	sts	0x012A, r9
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    1be6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1be8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
    1bea:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 			// setting the command to the port
    1bec:	82 b9       	out	0x02, r24	; 2
    1bee:	00 e0       	ldi	r16, 0x00	; 0
    1bf0:	10 e0       	ldi	r17, 0x00	; 0
    1bf2:	62 e0       	ldi	r22, 0x02	; 2
    1bf4:	e6 2e       	mov	r14, r22
    1bf6:	f1 2c       	mov	r15, r1
    1bf8:	bb cf       	rjmp	.-138    	; 0x1b70 <next_node+0xac>
				forward();
				tryed=0;
				angle=0;
				previous_move=2;
			}
			else if(Center<C_thresh && Right<R_thresh && Left<L_thresh){
    1bfa:	8f e0       	ldi	r24, 0x0F	; 15
    1bfc:	c8 16       	cp	r12, r24
    1bfe:	d1 04       	cpc	r13, r1
    1c00:	ac f5       	brge	.+106    	; 0x1c6c <next_node+0x1a8>
    1c02:	2f 30       	cpi	r18, 0x0F	; 15
    1c04:	31 05       	cpc	r19, r1
    1c06:	94 f5       	brge	.+100    	; 0x1c6c <next_node+0x1a8>
    1c08:	8f e0       	ldi	r24, 0x0F	; 15
    1c0a:	a8 16       	cp	r10, r24
    1c0c:	b1 04       	cpc	r11, r1
    1c0e:	74 f5       	brge	.+92     	; 0x1c6c <next_node+0x1a8>
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1c10:	80 92 28 01 	sts	0x0128, r8
	OCR5BL = (unsigned char)right_motor;
    1c14:	80 92 2a 01 	sts	0x012A, r8
				
				
					velocity(200,200);
					int rot=5;	
					if(previous_move==1)
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	e8 16       	cp	r14, r24
    1c1c:	f1 04       	cpc	r15, r1
    1c1e:	41 f4       	brne	.+16     	; 0x1c30 <next_node+0x16c>
					{
						int ang=4;
						if(tryed%ang<ang/2)
    1c20:	c8 01       	movw	r24, r16
    1c22:	64 e0       	ldi	r22, 0x04	; 4
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
    1c2a:	02 97       	sbiw	r24, 0x02	; 2
    1c2c:	44 f4       	brge	.+16     	; 0x1c3e <next_node+0x17a>
    1c2e:	0c c0       	rjmp	.+24     	; 0x1c48 <next_node+0x184>
						}
					}
					else
					{
						int ang=4;
						if(tryed%ang<ang/2)
    1c30:	c8 01       	movw	r24, r16
    1c32:	64 e0       	ldi	r22, 0x04	; 4
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__divmodhi4>
    1c3a:	02 97       	sbiw	r24, 0x02	; 2
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <next_node+0x184>
						{
							left_degrees(rot);
    1c3e:	85 e0       	ldi	r24, 0x05	; 5
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 a3 0a 	call	0x1546	; 0x1546 <left_degrees>
    1c46:	04 c0       	rjmp	.+8      	; 0x1c50 <next_node+0x18c>
						}
						else
						{
							right_degrees(rot);
    1c48:	85 e0       	ldi	r24, 0x05	; 5
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 be 0a 	call	0x157c	; 0x157c <right_degrees>
						} 
					}
					if (angle==tryed)
    1c50:	c0 17       	cp	r28, r16
    1c52:	d1 07       	cpc	r29, r17
    1c54:	29 f4       	brne	.+10     	; 0x1c60 <next_node+0x19c>
					{
						angle=0;
						tryed++;
    1c56:	8e 01       	movw	r16, r28
    1c58:	0f 5f       	subi	r16, 0xFF	; 255
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	c0 e0       	ldi	r28, 0x00	; 0
    1c5e:	d0 e0       	ldi	r29, 0x00	; 0
					}
					if(angle<tryed)
    1c60:	c0 17       	cp	r28, r16
    1c62:	d1 07       	cpc	r29, r17
    1c64:	0c f0       	brlt	.+2      	; 0x1c68 <next_node+0x1a4>
    1c66:	50 cf       	rjmp	.-352    	; 0x1b08 <next_node+0x44>
					{
						angle++;
    1c68:	21 96       	adiw	r28, 0x01	; 1
    1c6a:	4e cf       	rjmp	.-356    	; 0x1b08 <next_node+0x44>
					}
					
			}
			if((Left>L_thresh+40 ||Right>R_thresh+40) &&Center>C_thresh+40 &&n_flag==1){//&&Center>C_thresh &&n_flag==1
    1c6c:	88 e3       	ldi	r24, 0x38	; 56
    1c6e:	a8 16       	cp	r10, r24
    1c70:	b1 04       	cpc	r11, r1
    1c72:	24 f4       	brge	.+8      	; 0x1c7c <next_node+0x1b8>
    1c74:	28 33       	cpi	r18, 0x38	; 56
    1c76:	31 05       	cpc	r19, r1
    1c78:	0c f4       	brge	.+2      	; 0x1c7c <next_node+0x1b8>
    1c7a:	46 cf       	rjmp	.-372    	; 0x1b08 <next_node+0x44>
    1c7c:	88 e3       	ldi	r24, 0x38	; 56
    1c7e:	c8 16       	cp	r12, r24
    1c80:	d1 04       	cpc	r13, r1
    1c82:	0c f4       	brge	.+2      	; 0x1c86 <next_node+0x1c2>
    1c84:	41 cf       	rjmp	.-382    	; 0x1b08 <next_node+0x44>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    1c86:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    1c88:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
    1c8a:	82 b9       	out	0x02, r24	; 2
    1c8c:	88 ee       	ldi	r24, 0xE8	; 232
    1c8e:	93 e0       	ldi	r25, 0x03	; 3
    1c90:	20 e7       	ldi	r18, 0x70	; 112
    1c92:	31 e0       	ldi	r19, 0x01	; 1
    1c94:	f9 01       	movw	r30, r18
    1c96:	31 97       	sbiw	r30, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <next_node+0x1d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9c:	d9 f7       	brne	.-10     	; 0x1c94 <next_node+0x1d0>
				n_flag=2;
				stop();
				flag=2;
				_delay_ms(100);
			}
			if(n_flag==2&&reset>100){
    1c9e:	80 91 22 02 	lds	r24, 0x0222
    1ca2:	90 91 23 02 	lds	r25, 0x0223
    1ca6:	85 36       	cpi	r24, 0x65	; 101
    1ca8:	91 05       	cpc	r25, r1
    1caa:	a4 f0       	brlt	.+40     	; 0x1cd4 <next_node+0x210>
				n_flag=1;
				reset=1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	90 93 23 02 	sts	0x0223, r25
    1cb4:	80 93 22 02 	sts	0x0222, r24
			}
			if(n_flag==2){
				reset++;
			}
		}
}
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	ff 90       	pop	r15
    1cc2:	ef 90       	pop	r14
    1cc4:	df 90       	pop	r13
    1cc6:	cf 90       	pop	r12
    1cc8:	bf 90       	pop	r11
    1cca:	af 90       	pop	r10
    1ccc:	9f 90       	pop	r9
    1cce:	8f 90       	pop	r8
    1cd0:	7f 90       	pop	r7
    1cd2:	08 95       	ret
			if(n_flag==2&&reset>100){
				n_flag=1;
				reset=1;
			}
			if(n_flag==2){
				reset++;
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	ec cf       	rjmp	.-40     	; 0x1cb0 <next_node+0x1ec>

00001cd8 <goto_location>:
* Example Call: goto_location(3,2);
*
*/

void goto_location(int end_x,int end_y)
{
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	8b 01       	movw	r16, r22
*
*/

void distance(int start_x,int start_y,int end_x,int end_y,int *dif_x,int *dif_y)
{
	*dif_x=end_x-start_x;
    1ce6:	20 91 71 03 	lds	r18, 0x0371
    1cea:	30 91 72 03 	lds	r19, 0x0372
    1cee:	ec 01       	movw	r28, r24
    1cf0:	c2 1b       	sub	r28, r18
    1cf2:	d3 0b       	sbc	r29, r19
	*dif_y=end_y-start_y;
    1cf4:	80 91 78 03 	lds	r24, 0x0378
    1cf8:	90 91 79 03 	lds	r25, 0x0379
    1cfc:	08 1b       	sub	r16, r24
    1cfe:	19 0b       	sbc	r17, r25
	int dif_x,dif_y;
	//finds the distance between the current location to the end loaction 
	distance(current_x,current_y,end_x,end_y,&dif_x,&dif_y);
	
	//reduces the x difference to 0 
	if(dif_x<0)
    1d00:	d7 ff       	sbrs	r29, 7
    1d02:	1a c0       	rjmp	.+52     	; 0x1d38 <goto_location+0x60>
	{	
		change_direction_to(3);
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 a1 0b 	call	0x1742	; 0x1742 <change_direction_to>
    1d0c:	80 e7       	ldi	r24, 0x70	; 112
    1d0e:	e8 2e       	mov	r14, r24
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	f8 2e       	mov	r15, r24
		while(dif_x<0)
		{
			forward_mm(20);
    1d14:	84 e1       	ldi	r24, 0x14	; 20
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 20 0a 	call	0x1440	; 0x1440 <forward_mm>
    1d1c:	88 ee       	ldi	r24, 0xE8	; 232
    1d1e:	93 e0       	ldi	r25, 0x03	; 3
    1d20:	f7 01       	movw	r30, r14
    1d22:	31 97       	sbiw	r30, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <goto_location+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	d9 f7       	brne	.-10     	; 0x1d20 <goto_location+0x48>
			_delay_ms(100);
			next_node();
    1d2a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <next_node>
			coordinate_next_node();
    1d2e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <coordinate_next_node>
			dif_x++;
    1d32:	21 96       	adiw	r28, 0x01	; 1
	
	//reduces the x difference to 0 
	if(dif_x<0)
	{	
		change_direction_to(3);
		while(dif_x<0)
    1d34:	79 f7       	brne	.-34     	; 0x1d14 <goto_location+0x3c>
    1d36:	1b c0       	rjmp	.+54     	; 0x1d6e <goto_location+0x96>
			next_node();
			coordinate_next_node();
			dif_x++;
		}
	}
	else if(dif_x>0)
    1d38:	20 97       	sbiw	r28, 0x00	; 0
    1d3a:	c9 f0       	breq	.+50     	; 0x1d6e <goto_location+0x96>
	{
		change_direction_to(1);
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	0e 94 a1 0b 	call	0x1742	; 0x1742 <change_direction_to>
    1d44:	b0 e7       	ldi	r27, 0x70	; 112
    1d46:	eb 2e       	mov	r14, r27
    1d48:	b1 e0       	ldi	r27, 0x01	; 1
    1d4a:	fb 2e       	mov	r15, r27
		while(dif_x>0)
		{
			forward_mm(20);
    1d4c:	84 e1       	ldi	r24, 0x14	; 20
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	0e 94 20 0a 	call	0x1440	; 0x1440 <forward_mm>
    1d54:	88 ee       	ldi	r24, 0xE8	; 232
    1d56:	93 e0       	ldi	r25, 0x03	; 3
    1d58:	f7 01       	movw	r30, r14
    1d5a:	31 97       	sbiw	r30, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <goto_location+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	d9 f7       	brne	.-10     	; 0x1d58 <goto_location+0x80>
			_delay_ms(100);
			next_node();
    1d62:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <next_node>
			coordinate_next_node();
    1d66:	0e 94 d7 03 	call	0x7ae	; 0x7ae <coordinate_next_node>
			dif_x--;
    1d6a:	21 97       	sbiw	r28, 0x01	; 1
		}
	}
	else if(dif_x>0)
	{
		change_direction_to(1);
		while(dif_x>0)
    1d6c:	79 f7       	brne	.-34     	; 0x1d4c <goto_location+0x74>
			coordinate_next_node();
			dif_x--;
		}
	}
	//reduces the y difference to 0
	if(dif_y<0)
    1d6e:	17 ff       	sbrs	r17, 7
    1d70:	19 c0       	rjmp	.+50     	; 0x1da4 <goto_location+0xcc>
	{
		change_direction_to(2);
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 a1 0b 	call	0x1742	; 0x1742 <change_direction_to>
    1d7a:	c0 e7       	ldi	r28, 0x70	; 112
    1d7c:	d1 e0       	ldi	r29, 0x01	; 1
		while(dif_y<0)
		{
			forward_mm(20);
    1d7e:	84 e1       	ldi	r24, 0x14	; 20
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 20 0a 	call	0x1440	; 0x1440 <forward_mm>
    1d86:	88 ee       	ldi	r24, 0xE8	; 232
    1d88:	93 e0       	ldi	r25, 0x03	; 3
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	31 97       	sbiw	r30, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <goto_location+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d92:	d9 f7       	brne	.-10     	; 0x1d8a <goto_location+0xb2>
			_delay_ms(100);
			next_node();
    1d94:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <next_node>
			coordinate_next_node();
    1d98:	0e 94 d7 03 	call	0x7ae	; 0x7ae <coordinate_next_node>
			dif_y++;
    1d9c:	0f 5f       	subi	r16, 0xFF	; 255
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	//reduces the y difference to 0
	if(dif_y<0)
	{
		change_direction_to(2);
		while(dif_y<0)
    1da0:	71 f7       	brne	.-36     	; 0x1d7e <goto_location+0xa6>
    1da2:	1b c0       	rjmp	.+54     	; 0x1dda <goto_location+0x102>
			next_node();
			coordinate_next_node();
			dif_y++;
		}
	}
	else if(dif_y>0)
    1da4:	01 15       	cp	r16, r1
    1da6:	11 05       	cpc	r17, r1
    1da8:	c1 f0       	breq	.+48     	; 0x1dda <goto_location+0x102>
	{
		change_direction_to(0);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 a1 0b 	call	0x1742	; 0x1742 <change_direction_to>
    1db2:	c0 e7       	ldi	r28, 0x70	; 112
    1db4:	d1 e0       	ldi	r29, 0x01	; 1
		while(dif_y>0)
		{
			forward_mm(20);
    1db6:	84 e1       	ldi	r24, 0x14	; 20
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 20 0a 	call	0x1440	; 0x1440 <forward_mm>
    1dbe:	88 ee       	ldi	r24, 0xE8	; 232
    1dc0:	93 e0       	ldi	r25, 0x03	; 3
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	31 97       	sbiw	r30, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <goto_location+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dca:	d9 f7       	brne	.-10     	; 0x1dc2 <goto_location+0xea>
			_delay_ms(100);
			next_node();
    1dcc:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <next_node>
			coordinate_next_node();
    1dd0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <coordinate_next_node>
			dif_y--;
    1dd4:	01 50       	subi	r16, 0x01	; 1
    1dd6:	10 40       	sbci	r17, 0x00	; 0
		}
	}
	else if(dif_y>0)
	{
		change_direction_to(0);
		while(dif_y>0)
    1dd8:	71 f7       	brne	.-36     	; 0x1db6 <goto_location+0xde>
			next_node();
			coordinate_next_node();
			dif_y--;
		}
	}
}
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	ff 90       	pop	r15
    1de4:	ef 90       	pop	r14
    1de6:	08 95       	ret

00001de8 <drop_at>:
* Example Call:  drop_ar(2,4)
*
*/

void drop_at(int x,int y)
{
    1de8:	9c 01       	movw	r18, r24
*
*/

int get_x()
{
	return(current_x);
    1dea:	80 91 71 03 	lds	r24, 0x0371
    1dee:	90 91 72 03 	lds	r25, 0x0372
	if(get_x()>x&&get_y()>y)
    1df2:	28 17       	cp	r18, r24
    1df4:	39 07       	cpc	r19, r25
    1df6:	8c f4       	brge	.+34     	; 0x1e1a <drop_at+0x32>
    1df8:	80 91 78 03 	lds	r24, 0x0378
    1dfc:	90 91 79 03 	lds	r25, 0x0379
    1e00:	2f 5f       	subi	r18, 0xFF	; 255
    1e02:	3f 4f       	sbci	r19, 0xFF	; 255
    1e04:	68 17       	cp	r22, r24
    1e06:	79 07       	cpc	r23, r25
    1e08:	9c f4       	brge	.+38     	; 0x1e30 <drop_at+0x48>
	{
		goto_location(x+1,y+1);
    1e0a:	6f 5f       	subi	r22, 0xFF	; 255
    1e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0e:	c9 01       	movw	r24, r18
    1e10:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <goto_location>
		drop_animal(3);
    1e14:	83 e0       	ldi	r24, 0x03	; 3
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	25 c0       	rjmp	.+74     	; 0x1e64 <drop_at+0x7c>
	}
	else if(get_x()<x&&get_y()<y)
    1e1a:	82 17       	cp	r24, r18
    1e1c:	93 07       	cpc	r25, r19
    1e1e:	74 f4       	brge	.+28     	; 0x1e3c <drop_at+0x54>
    1e20:	80 91 78 03 	lds	r24, 0x0378
    1e24:	90 91 79 03 	lds	r25, 0x0379
    1e28:	86 17       	cp	r24, r22
    1e2a:	97 07       	cpc	r25, r23
    1e2c:	3c f4       	brge	.+14     	; 0x1e3c <drop_at+0x54>
    1e2e:	15 c0       	rjmp	.+42     	; 0x1e5a <drop_at+0x72>
		goto_location(x,y);
		drop_animal(1);
	}
	else if(get_x()>x)
	{
		goto_location(x+1,y);
    1e30:	c9 01       	movw	r24, r18
    1e32:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <goto_location>
		drop_animal(4);
    1e36:	84 e0       	ldi	r24, 0x04	; 4
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <drop_at+0x7c>
	}
	else if(get_y()>y) 
    1e3c:	80 91 78 03 	lds	r24, 0x0378
    1e40:	90 91 79 03 	lds	r25, 0x0379
    1e44:	68 17       	cp	r22, r24
    1e46:	79 07       	cpc	r23, r25
    1e48:	44 f4       	brge	.+16     	; 0x1e5a <drop_at+0x72>
	{
		goto_location(x,y+1);
    1e4a:	6f 5f       	subi	r22, 0xFF	; 255
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	c9 01       	movw	r24, r18
    1e50:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <goto_location>
		
		drop_animal(2);
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	05 c0       	rjmp	.+10     	; 0x1e64 <drop_at+0x7c>
	}
	else
	{
		goto_location(x,y);
    1e5a:	c9 01       	movw	r24, r18
    1e5c:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <goto_location>
		drop_animal(1);
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 59 06 	call	0xcb2	; 0xcb2 <drop_animal>
    1e68:	08 95       	ret

00001e6a <main>:
* of the robot. IF part takes serial input,ELSE performs the task,
* robot toggels between IF and ELSE every time it restarts/resets 
* Example Call: Called automatically by the Operating System
*
*/
int main(void){
    1e6a:	2f 92       	push	r2
    1e6c:	3f 92       	push	r3
    1e6e:	4f 92       	push	r4
    1e70:	5f 92       	push	r5
    1e72:	6f 92       	push	r6
    1e74:	7f 92       	push	r7
    1e76:	8f 92       	push	r8
    1e78:	9f 92       	push	r9
    1e7a:	af 92       	push	r10
    1e7c:	bf 92       	push	r11
    1e7e:	cf 92       	push	r12
    1e80:	df 92       	push	r13
    1e82:	ef 92       	push	r14
    1e84:	ff 92       	push	r15
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	c4 52       	subi	r28, 0x24	; 36
    1e94:	d3 40       	sbci	r29, 0x03	; 3
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
		in_devices();
    1ea0:	0e 94 a7 09 	call	0x134e	; 0x134e <in_devices>
		servo_reset();
    1ea4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <servo_reset>
		lcd_cursor(1,1);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	61 e0       	ldi	r22, 0x01	; 1
    1eac:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_cursor>
		lcd_string("Serial input  ");
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	92 e0       	ldi	r25, 0x02	; 2
    1eb4:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1eb8:	f9 99       	sbic	0x1f, 1	; 31
    1eba:	fe cf       	rjmp	.-4      	; 0x1eb8 <main+0x4e>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1ebc:	88 e0       	ldi	r24, 0x08	; 8
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	92 bd       	out	0x22, r25	; 34
    1ec2:	81 bd       	out	0x21, r24	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    1ec4:	f8 9a       	sbi	0x1f, 0	; 31
    1ec6:	80 b5       	in	r24, 0x20	; 32
	//c is flag variable which toggels between IF and ELSE
	uint8_t c ;
	
	//reads flag variable data from eeprom at loaction 264
	c = eeprom_read_byte ((const uint8_t*)264);
	if(c==0x55)
    1ec8:	85 35       	cpi	r24, 0x55	; 85
    1eca:	09 f0       	breq	.+2      	; 0x1ece <main+0x64>
    1ecc:	60 c0       	rjmp	.+192    	; 0x1f8e <main+0x124>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1ece:	f9 99       	sbic	0x1f, 1	; 31
    1ed0:	fe cf       	rjmp	.-4      	; 0x1ece <main+0x64>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1ed2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1ed4:	88 e0       	ldi	r24, 0x08	; 8
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	92 bd       	out	0x22, r25	; 34
    1eda:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1edc:	85 e1       	ldi	r24, 0x15	; 21
    1ede:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	fa 9a       	sbi	0x1f, 2	; 31
    1ee6:	f9 9a       	sbi	0x1f, 1	; 31
    1ee8:	0f be       	out	0x3f, r0	; 63
		//###########################
		c = 0x15 ;
		eeprom_write_byte (( uint8_t *) 264, c );
		//###########################
		
		lcd_cursor(1,1);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_cursor>
		lcd_string("Serial input :- ");
    1ef2:	8f e0       	ldi	r24, 0x0F	; 15
    1ef4:	92 e0       	ldi	r25, 0x02	; 2
    1ef6:	0e 94 21 01 	call	0x242	; 0x242 <lcd_string>
		lcd_cursor(2,1);
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_cursor>
    1f02:	fd ec       	ldi	r31, 0xCD	; 205
    1f04:	ef 2e       	mov	r14, r31
    1f06:	f1 2c       	mov	r15, r1
    1f08:	ec 0e       	add	r14, r28
    1f0a:	fd 1e       	adc	r15, r29
    1f0c:	00 e0       	ldi	r16, 0x00	; 0
    1f0e:	10 e0       	ldi	r17, 0x00	; 0
* Example Call: if(have_d()==0);
*
*/
int have_d(void)
{
	int temp=have_data;
    1f10:	80 91 2e 03 	lds	r24, 0x032E
    1f14:	90 91 2f 03 	lds	r25, 0x032F
	if(temp==0){ack=0;}
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	49 f4       	brne	.+18     	; 0x1f2e <main+0xc4>
    1f1c:	10 92 31 03 	sts	0x0331, r1
    1f20:	10 92 30 03 	sts	0x0330, r1
		string_index=0;
		while(flag==1)
		{
			while(have_d()==0){
				lcd_cursor(2,1);//infinite loop while there is no data recived
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	61 e0       	ldi	r22, 0x01	; 1
    1f28:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_cursor>
    1f2c:	f1 cf       	rjmp	.-30     	; 0x1f10 <main+0xa6>
*
*/
unsigned char get_data(void)
{
	
	if(have_data==1){have_data=0;}
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	21 f4       	brne	.+8      	; 0x1f3a <main+0xd0>
    1f32:	10 92 2f 03 	sts	0x032F, r1
    1f36:	10 92 2e 03 	sts	0x032E, r1
	return(data);
    1f3a:	80 91 94 03 	lds	r24, 0x0394
			}
			
			//gets the recived data and appends it to the input string
			input_data=get_data();
			string[string_index++]=input_data;
    1f3e:	f7 01       	movw	r30, r14
    1f40:	80 83       	st	Z, r24
    1f42:	0f 5f       	subi	r16, 0xFF	; 255
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
			string[string_index]='\0';
    1f46:	11 82       	std	Z+1, r1	; 0x01
    1f48:	08 94       	sec
    1f4a:	e1 1c       	adc	r14, r1
    1f4c:	f1 1c       	adc	r15, r1
			
			//stops the input of data if latest input character is #
			if(input_data=='#')
    1f4e:	83 32       	cpi	r24, 0x23	; 35
    1f50:	f9 f6       	brne	.-66     	; 0x1f10 <main+0xa6>
			{
				flag=2;
			}
		}
		string[string_index]='\0';
    1f52:	ce 01       	movw	r24, r28
    1f54:	83 53       	subi	r24, 0x33	; 51
    1f56:	9f 4f       	sbci	r25, 0xFF	; 255
    1f58:	08 0f       	add	r16, r24
    1f5a:	19 1f       	adc	r17, r25
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	10 82       	st	Z, r1
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
#else
    /* If ATmega256x device, do not call function. */
    while (__n--)
        eeprom_write_byte (__dst++, *(uint8_t *)__src++);
    1f64:	fc 01       	movw	r30, r24
    1f66:	e2 0f       	add	r30, r18
    1f68:	f3 1f       	adc	r31, r19
    1f6a:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1f6c:	f9 99       	sbic	0x1f, 1	; 31
    1f6e:	fe cf       	rjmp	.-4      	; 0x1f6c <main+0x102>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1f70:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1f72:	32 bd       	out	0x22, r19	; 34
    1f74:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    1f76:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	fa 9a       	sbi	0x1f, 2	; 31
    1f7e:	f9 9a       	sbi	0x1f, 1	; 31
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	2f 5f       	subi	r18, 0xFF	; 255
    1f84:	3f 4f       	sbci	r19, 0xFF	; 255
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
#else
    /* If ATmega256x device, do not call function. */
    while (__n--)
    1f86:	28 3c       	cpi	r18, 0xC8	; 200
    1f88:	31 05       	cpc	r19, r1
    1f8a:	61 f7       	brne	.-40     	; 0x1f64 <main+0xfa>
    1f8c:	55 c1       	rjmp	.+682    	; 0x2238 <__stack+0x39>
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
#else
    /* If ATmega256x device, do not call function. */
    while (__n--)
    {
        *(char *)__dst++ = eeprom_read_byte(__src++);
    1f92:	ae 01       	movw	r20, r28
    1f94:	43 5a       	subi	r20, 0xA3	; 163
    1f96:	5d 4f       	sbci	r21, 0xFD	; 253
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f98:	f9 99       	sbic	0x1f, 1	; 31
    1f9a:	fe cf       	rjmp	.-4      	; 0x1f98 <main+0x12e>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1f9c:	32 bd       	out	0x22, r19	; 34
    1f9e:	21 bd       	out	0x21, r18	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    1fa0:	f8 9a       	sbi	0x1f, 0	; 31
    1fa2:	80 b5       	in	r24, 0x20	; 32
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
#else
    /* If ATmega256x device, do not call function. */
    while (__n--)
    {
        *(char *)__dst++ = eeprom_read_byte(__src++);
    1fa4:	fa 01       	movw	r30, r20
    1fa6:	e2 0f       	add	r30, r18
    1fa8:	f3 1f       	adc	r31, r19
    1faa:	80 83       	st	Z, r24
    1fac:	2f 5f       	subi	r18, 0xFF	; 255
    1fae:	3f 4f       	sbci	r19, 0xFF	; 255
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
#else
    /* If ATmega256x device, do not call function. */
    while (__n--)
    1fb0:	28 3c       	cpi	r18, 0xC8	; 200
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	89 f7       	brne	.-30     	; 0x1f98 <main+0x12e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1fb6:	f9 99       	sbic	0x1f, 1	; 31
    1fb8:	fe cf       	rjmp	.-4      	; 0x1fb6 <main+0x14c>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1fba:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1fbc:	88 e0       	ldi	r24, 0x08	; 8
    1fbe:	91 e0       	ldi	r25, 0x01	; 1
    1fc0:	92 bd       	out	0x22, r25	; 34
    1fc2:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1fc4:	85 e5       	ldi	r24, 0x55	; 85
    1fc6:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	fa 9a       	sbi	0x1f, 2	; 31
    1fce:	f9 9a       	sbi	0x1f, 1	; 31
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
#else
    /* If ATmega256x device, do not call function. */
    while (__n--)
        eeprom_write_byte (__dst++, *(uint8_t *)__src++);
    1fd6:	9e 01       	movw	r18, r28
    1fd8:	2b 56       	subi	r18, 0x6B	; 107
    1fda:	3e 4f       	sbci	r19, 0xFE	; 254
    1fdc:	f9 01       	movw	r30, r18
    1fde:	e8 0f       	add	r30, r24
    1fe0:	f9 1f       	adc	r31, r25
    1fe2:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1fe4:	f9 99       	sbic	0x1f, 1	; 31
    1fe6:	fe cf       	rjmp	.-4      	; 0x1fe4 <main+0x17a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    1fe8:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1fea:	92 bd       	out	0x22, r25	; 34
    1fec:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    1fee:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	fa 9a       	sbi	0x1f, 2	; 31
    1ff6:	f9 9a       	sbi	0x1f, 1	; 31
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	01 96       	adiw	r24, 0x01	; 1
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
#else
    /* If ATmega256x device, do not call function. */
    while (__n--)
    1ffc:	88 3c       	cpi	r24, 0xC8	; 200
    1ffe:	91 05       	cpc	r25, r1
    2000:	69 f7       	brne	.-38     	; 0x1fdc <main+0x172>
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	aa 24       	eor	r10, r10
    200c:	bb 24       	eor	r11, r11
		int animal_index=0,habitat_index=0;
		
		char animal_obj[20][5];
		char habitat_obj[20][5];

		while(input_string[i]!='#'&&input_string[i]!='\0'&&i<200)
    200e:	8e 01       	movw	r16, r28
    2010:	03 5a       	subi	r16, 0xA3	; 163
    2012:	1d 4f       	sbci	r17, 0xFD	; 253
		{
			if((input_string[i]>='a' && input_string[i]<='z')||(input_string[i]>='A' && input_string[i]<='Z'))
    2014:	e5 e0       	ldi	r30, 0x05	; 5
    2016:	8e 2e       	mov	r8, r30
    2018:	91 2c       	mov	r9, r1
    201a:	8c 0e       	add	r8, r28
    201c:	9d 1e       	adc	r9, r29
				while(input_string[i]!=',' &&input_string[i]!='#' && i<200 && ((input_string[i]>='a' && input_string[i]<='z')||(input_string[i]>='A' && input_string[i]<='Z')||(input_string[i]>='0'&&input_string[i]<='9')))
				{
					animal_obj[animal_index][k]=input_string[i];
					k++;i++;
				}
				animal_obj[animal_index][k]='\0';
    201e:	6e 01       	movw	r12, r28
    2020:	08 94       	sec
    2022:	c1 1c       	adc	r12, r1
    2024:	d1 1c       	adc	r13, r1
				
				k=0;animal_index++;
			}
			if(input_string[i]>='0'&&input_string[i]<='9')
    2026:	59 e6       	ldi	r21, 0x69	; 105
    2028:	e5 2e       	mov	r14, r21
    202a:	f1 2c       	mov	r15, r1
    202c:	ec 0e       	add	r14, r28
    202e:	fd 1e       	adc	r15, r29
    2030:	74 c0       	rjmp	.+232    	; 0x211a <main+0x2b0>
		char animal_obj[20][5];
		char habitat_obj[20][5];

		while(input_string[i]!='#'&&input_string[i]!='\0'&&i<200)
		{
			if((input_string[i]>='a' && input_string[i]<='z')||(input_string[i]>='A' && input_string[i]<='Z'))
    2032:	8e 2f       	mov	r24, r30
    2034:	81 56       	subi	r24, 0x61	; 97
    2036:	8a 31       	cpi	r24, 0x1A	; 26
    2038:	78 f4       	brcc	.+30     	; 0x2058 <main+0x1ee>
    203a:	d8 01       	movw	r26, r16
    203c:	a2 0f       	add	r26, r18
    203e:	b3 1f       	adc	r27, r19
    2040:	fb 01       	movw	r30, r22
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	e6 0f       	add	r30, r22
    204c:	f7 1f       	adc	r31, r23
    204e:	e8 0d       	add	r30, r8
    2050:	f9 1d       	adc	r31, r9
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	0a c0       	rjmp	.+20     	; 0x206c <main+0x202>
    2058:	e1 54       	subi	r30, 0x41	; 65
    205a:	ea 31       	cpi	r30, 0x1A	; 26
    205c:	70 f3       	brcs	.-36     	; 0x203a <main+0x1d0>
    205e:	26 c0       	rjmp	.+76     	; 0x20ac <main+0x242>
			{
				while(input_string[i]!=',' &&input_string[i]!='#' && i<200 && ((input_string[i]>='a' && input_string[i]<='z')||(input_string[i]>='A' && input_string[i]<='Z')||(input_string[i]>='0'&&input_string[i]<='9')))
				{
					animal_obj[animal_index][k]=input_string[i];
    2060:	91 93       	st	Z+, r25
					k++;i++;
    2062:	4f 5f       	subi	r20, 0xFF	; 255
    2064:	5f 4f       	sbci	r21, 0xFF	; 255
    2066:	2f 5f       	subi	r18, 0xFF	; 255
    2068:	3f 4f       	sbci	r19, 0xFF	; 255
    206a:	11 96       	adiw	r26, 0x01	; 1

		while(input_string[i]!='#'&&input_string[i]!='\0'&&i<200)
		{
			if((input_string[i]>='a' && input_string[i]<='z')||(input_string[i]>='A' && input_string[i]<='Z'))
			{
				while(input_string[i]!=',' &&input_string[i]!='#' && i<200 && ((input_string[i]>='a' && input_string[i]<='z')||(input_string[i]>='A' && input_string[i]<='Z')||(input_string[i]>='0'&&input_string[i]<='9')))
    206c:	9c 91       	ld	r25, X
    206e:	9c 32       	cpi	r25, 0x2C	; 44
    2070:	79 f0       	breq	.+30     	; 0x2090 <main+0x226>
    2072:	93 32       	cpi	r25, 0x23	; 35
    2074:	69 f0       	breq	.+26     	; 0x2090 <main+0x226>
    2076:	28 3c       	cpi	r18, 0xC8	; 200
    2078:	31 05       	cpc	r19, r1
    207a:	54 f4       	brge	.+20     	; 0x2090 <main+0x226>
    207c:	89 2f       	mov	r24, r25
    207e:	81 56       	subi	r24, 0x61	; 97
    2080:	8a 31       	cpi	r24, 0x1A	; 26
    2082:	70 f3       	brcs	.-36     	; 0x2060 <main+0x1f6>
    2084:	80 5e       	subi	r24, 0xE0	; 224
    2086:	8a 31       	cpi	r24, 0x1A	; 26
    2088:	58 f3       	brcs	.-42     	; 0x2060 <main+0x1f6>
    208a:	8f 5e       	subi	r24, 0xEF	; 239
    208c:	8a 30       	cpi	r24, 0x0A	; 10
    208e:	40 f3       	brcs	.-48     	; 0x2060 <main+0x1f6>
				{
					animal_obj[animal_index][k]=input_string[i];
					k++;i++;
				}
				animal_obj[animal_index][k]='\0';
    2090:	fb 01       	movw	r30, r22
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	ee 0f       	add	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	e6 0f       	add	r30, r22
    209c:	f7 1f       	adc	r31, r23
    209e:	ec 0d       	add	r30, r12
    20a0:	fd 1d       	adc	r31, r13
    20a2:	e4 0f       	add	r30, r20
    20a4:	f5 1f       	adc	r31, r21
    20a6:	14 82       	std	Z+4, r1	; 0x04
				
				k=0;animal_index++;
    20a8:	6f 5f       	subi	r22, 0xFF	; 255
    20aa:	7f 4f       	sbci	r23, 0xFF	; 255
			}
			if(input_string[i]>='0'&&input_string[i]<='9')
    20ac:	f8 01       	movw	r30, r16
    20ae:	e2 0f       	add	r30, r18
    20b0:	f3 1f       	adc	r31, r19
    20b2:	80 81       	ld	r24, Z
    20b4:	80 53       	subi	r24, 0x30	; 48
    20b6:	8a 30       	cpi	r24, 0x0A	; 10
    20b8:	70 f5       	brcc	.+92     	; 0x2116 <main+0x2ac>
    20ba:	df 01       	movw	r26, r30
    20bc:	f5 01       	movw	r30, r10
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	ea 0d       	add	r30, r10
    20c8:	fb 1d       	adc	r31, r11
    20ca:	ee 0d       	add	r30, r14
    20cc:	ff 1d       	adc	r31, r15
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	05 c0       	rjmp	.+10     	; 0x20de <main+0x274>
			{
				
				while(input_string[i]!=','&&input_string[i]!='\n'&&i<200&&input_string[i]>='0'&&input_string[i]<='9')
				{
					habitat_obj[habitat_index][k]=input_string[i];
    20d4:	81 93       	st	Z+, r24
					k++;i++;
    20d6:	4f 5f       	subi	r20, 0xFF	; 255
    20d8:	5f 4f       	sbci	r21, 0xFF	; 255
    20da:	2f 5f       	subi	r18, 0xFF	; 255
    20dc:	3f 4f       	sbci	r19, 0xFF	; 255
				k=0;animal_index++;
			}
			if(input_string[i]>='0'&&input_string[i]<='9')
			{
				
				while(input_string[i]!=','&&input_string[i]!='\n'&&i<200&&input_string[i]>='0'&&input_string[i]<='9')
    20de:	8c 91       	ld	r24, X
    20e0:	8c 32       	cpi	r24, 0x2C	; 44
    20e2:	51 f0       	breq	.+20     	; 0x20f8 <main+0x28e>
    20e4:	8a 30       	cpi	r24, 0x0A	; 10
    20e6:	41 f0       	breq	.+16     	; 0x20f8 <main+0x28e>
    20e8:	28 3c       	cpi	r18, 0xC8	; 200
    20ea:	31 05       	cpc	r19, r1
    20ec:	2c f4       	brge	.+10     	; 0x20f8 <main+0x28e>
    20ee:	80 33       	cpi	r24, 0x30	; 48
    20f0:	18 f0       	brcs	.+6      	; 0x20f8 <main+0x28e>
    20f2:	11 96       	adiw	r26, 0x01	; 1
    20f4:	8a 33       	cpi	r24, 0x3A	; 58
    20f6:	70 f3       	brcs	.-36     	; 0x20d4 <main+0x26a>
				{
					habitat_obj[habitat_index][k]=input_string[i];
					k++;i++;
				}
				habitat_obj[habitat_index][k]='\0';
    20f8:	f5 01       	movw	r30, r10
    20fa:	ee 0f       	add	r30, r30
    20fc:	ff 1f       	adc	r31, r31
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	ea 0d       	add	r30, r10
    2104:	fb 1d       	adc	r31, r11
    2106:	e4 0f       	add	r30, r20
    2108:	f5 1f       	adc	r31, r21
    210a:	ee 0d       	add	r30, r14
    210c:	ff 1d       	adc	r31, r15
    210e:	10 82       	st	Z, r1
				k=0;habitat_index++;
    2110:	08 94       	sec
    2112:	a1 1c       	adc	r10, r1
    2114:	b1 1c       	adc	r11, r1
				

			}
			i++;
    2116:	2f 5f       	subi	r18, 0xFF	; 255
    2118:	3f 4f       	sbci	r19, 0xFF	; 255
		int animal_index=0,habitat_index=0;
		
		char animal_obj[20][5];
		char habitat_obj[20][5];

		while(input_string[i]!='#'&&input_string[i]!='\0'&&i<200)
    211a:	f8 01       	movw	r30, r16
    211c:	e2 0f       	add	r30, r18
    211e:	f3 1f       	adc	r31, r19
    2120:	e0 81       	ld	r30, Z
    2122:	e3 32       	cpi	r30, 0x23	; 35
    2124:	31 f0       	breq	.+12     	; 0x2132 <main+0x2c8>
    2126:	ee 23       	and	r30, r30
    2128:	21 f0       	breq	.+8      	; 0x2132 <main+0x2c8>
    212a:	28 3c       	cpi	r18, 0xC8	; 200
    212c:	31 05       	cpc	r19, r1
    212e:	0c f4       	brge	.+2      	; 0x2132 <main+0x2c8>
    2130:	80 cf       	rjmp	.-256    	; 0x2032 <main+0x1c8>
*
*/

void reset_coordinates()
{
	current_direction=0;
    2132:	10 92 74 03 	sts	0x0374, r1
    2136:	10 92 73 03 	sts	0x0373, r1
	current_x=0;current_y=0;
    213a:	10 92 72 03 	sts	0x0372, r1
    213e:	10 92 71 03 	sts	0x0371, r1
    2142:	10 92 79 03 	sts	0x0379, r1
    2146:	10 92 78 03 	sts	0x0378, r1
    214a:	39 e6       	ldi	r19, 0x69	; 105
    214c:	63 2e       	mov	r6, r19
    214e:	71 2c       	mov	r7, r1
    2150:	6c 0e       	add	r6, r28
    2152:	7d 1e       	adc	r7, r29
    2154:	25 e0       	ldi	r18, 0x05	; 5
    2156:	c2 2e       	mov	r12, r18
    2158:	d1 2c       	mov	r13, r1
    215a:	cc 0e       	add	r12, r28
    215c:	dd 1e       	adc	r13, r29
    215e:	88 24       	eor	r8, r8
    2160:	99 24       	eor	r9, r9
			_delay_ms(100);
			servo_reset1();
			
			//gets x:y coordinates from arena specific code like 2:-x:1,y:0
			
			habitat_coordinate(habitat_obj[i],&hx,&hy);
    2162:	93 e0       	ldi	r25, 0x03	; 3
    2164:	29 2e       	mov	r2, r25
    2166:	31 2c       	mov	r3, r1
    2168:	2c 0e       	add	r2, r28
    216a:	3d 1e       	adc	r3, r29
    216c:	2e 01       	movw	r4, r28
    216e:	08 94       	sec
    2170:	41 1c       	adc	r4, r1
    2172:	51 1c       	adc	r5, r1
    2174:	4e c0       	rjmp	.+156    	; 0x2212 <__stack+0x13>
 *
*/

void animal_coordinate(char *animal,int *x,int *y)
{	int locx,locy;
	locx=animal[0]-65;
    2176:	f6 01       	movw	r30, r12
    2178:	80 81       	ld	r24, Z
    217a:	e8 2e       	mov	r14, r24
    217c:	ff 24       	eor	r15, r15
    217e:	8f eb       	ldi	r24, 0xBF	; 191
    2180:	9f ef       	ldi	r25, 0xFF	; 255
    2182:	e8 0e       	add	r14, r24
    2184:	f9 1e       	adc	r15, r25
	locy=animal[1]-49;
    2186:	81 81       	ldd	r24, Z+1	; 0x01
    2188:	08 2f       	mov	r16, r24
    218a:	10 e0       	ldi	r17, 0x00	; 0
    218c:	01 53       	subi	r16, 0x31	; 49
    218e:	10 40       	sbci	r17, 0x00	; 0
			animal_coordinate(animal_obj[i],&ax,&ay);

			//special case if A1 needs to be picked up at the start of the run
			//rest fo the codes is generic 
			
			if(get_x()==0&&get_y()==0&&ax==0&&ay==0){goto_location(0,1);}
    2190:	80 91 71 03 	lds	r24, 0x0371
    2194:	90 91 72 03 	lds	r25, 0x0372
    2198:	89 2b       	or	r24, r25
    219a:	91 f4       	brne	.+36     	; 0x21c0 <main+0x356>
    219c:	80 91 78 03 	lds	r24, 0x0378
    21a0:	90 91 79 03 	lds	r25, 0x0379
    21a4:	89 2b       	or	r24, r25
    21a6:	61 f4       	brne	.+24     	; 0x21c0 <main+0x356>
    21a8:	e1 14       	cp	r14, r1
    21aa:	f1 04       	cpc	r15, r1
    21ac:	49 f4       	brne	.+18     	; 0x21c0 <main+0x356>
    21ae:	01 15       	cp	r16, r1
    21b0:	11 05       	cpc	r17, r1
    21b2:	31 f4       	brne	.+12     	; 0x21c0 <main+0x356>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	61 e0       	ldi	r22, 0x01	; 1
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <goto_location>
	
			goto_location(ax,ay);		
    21c0:	c7 01       	movw	r24, r14
    21c2:	b8 01       	movw	r22, r16
    21c4:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <goto_location>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
    21c8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
    21ca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 PORTA = PortARestore; 			// setting the command to the port
    21cc:	82 b9       	out	0x02, r24	; 2
			stop();
			pickup_animal();
    21ce:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <pickup_animal>
    21d2:	88 ee       	ldi	r24, 0xE8	; 232
    21d4:	93 e0       	ldi	r25, 0x03	; 3
    21d6:	e0 e7       	ldi	r30, 0x70	; 112
    21d8:	f1 e0       	ldi	r31, 0x01	; 1
    21da:	31 97       	sbiw	r30, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <main+0x370>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	d1 f7       	brne	.-12     	; 0x21d6 <main+0x36c>

			_delay_ms(100);
			servo_reset1();
    21e2:	0e 94 0c 05 	call	0xa18	; 0xa18 <servo_reset1>
			
			//gets x:y coordinates from arena specific code like 2:-x:1,y:0
			
			habitat_coordinate(habitat_obj[i],&hx,&hy);
    21e6:	c3 01       	movw	r24, r6
    21e8:	b2 01       	movw	r22, r4
    21ea:	a1 01       	movw	r20, r2
    21ec:	0e 94 4d 03 	call	0x69a	; 0x69a <habitat_coordinate>
			drop_at(hx,hy);
    21f0:	6b 81       	ldd	r22, Y+3	; 0x03
    21f2:	7c 81       	ldd	r23, Y+4	; 0x04
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	9a 81       	ldd	r25, Y+2	; 0x02
    21f8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <drop_at>
			servo_reset();
    21fc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <servo_reset>
		//sets the X and Y coordinates of the robot to 0,0
		reset_coordinates();
		
		//for each Animal loaction it goes to the loaction pickups the box and goes to habitat loaction 
		//and drops the box  at the habitat loaction
		for(i=0;i<habitat_index;i++)
    2200:	08 94       	sec
    2202:	81 1c       	adc	r8, r1
    2204:	91 1c       	adc	r9, r1
    2206:	e5 e0       	ldi	r30, 0x05	; 5
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	6e 0e       	add	r6, r30
    220c:	7f 1e       	adc	r7, r31
    220e:	ce 0e       	add	r12, r30
    2210:	df 1e       	adc	r13, r31
    2212:	8a 14       	cp	r8, r10
    2214:	9b 04       	cpc	r9, r11
    2216:	0c f4       	brge	.+2      	; 0x221a <__stack+0x1b>
    2218:	ae cf       	rjmp	.-164    	; 0x2176 <main+0x30c>
}

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    221a:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    221c:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    221e:	88 b9       	out	0x08, r24	; 8
    2220:	80 e5       	ldi	r24, 0x50	; 80
    2222:	93 ec       	ldi	r25, 0xC3	; 195
    2224:	20 e7       	ldi	r18, 0x70	; 112
    2226:	31 e0       	ldi	r19, 0x01	; 1
    2228:	f9 01       	movw	r30, r18
    222a:	31 97       	sbiw	r30, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <__stack+0x2b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2230:	d9 f7       	brne	.-10     	; 0x2228 <__stack+0x29>
}

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    2232:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    2234:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    2236:	88 b9       	out	0x08, r24	; 8
		_delay_ms(5000);
		buzzer_off();
	
	}

}
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	cc 5d       	subi	r28, 0xDC	; 220
    223e:	dc 4f       	sbci	r29, 0xFC	; 252
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	ff 90       	pop	r15
    2254:	ef 90       	pop	r14
    2256:	df 90       	pop	r13
    2258:	cf 90       	pop	r12
    225a:	bf 90       	pop	r11
    225c:	af 90       	pop	r10
    225e:	9f 90       	pop	r9
    2260:	8f 90       	pop	r8
    2262:	7f 90       	pop	r7
    2264:	6f 90       	pop	r6
    2266:	5f 90       	pop	r5
    2268:	4f 90       	pop	r4
    226a:	3f 90       	pop	r3
    226c:	2f 90       	pop	r2
    226e:	08 95       	ret

00002270 <__fixunssfsi>:
    2270:	ef 92       	push	r14
    2272:	ff 92       	push	r15
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	7b 01       	movw	r14, r22
    227a:	8c 01       	movw	r16, r24
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	5f e4       	ldi	r21, 0x4F	; 79
    2284:	0e 94 ba 13 	call	0x2774	; 0x2774 <__gesf2>
    2288:	88 23       	and	r24, r24
    228a:	8c f0       	brlt	.+34     	; 0x22ae <__fixunssfsi+0x3e>
    228c:	c8 01       	movw	r24, r16
    228e:	b7 01       	movw	r22, r14
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	5f e4       	ldi	r21, 0x4F	; 79
    2298:	0e 94 b0 12 	call	0x2560	; 0x2560 <__subsf3>
    229c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__fixsfsi>
    22a0:	9b 01       	movw	r18, r22
    22a2:	ac 01       	movw	r20, r24
    22a4:	20 50       	subi	r18, 0x00	; 0
    22a6:	30 40       	sbci	r19, 0x00	; 0
    22a8:	40 40       	sbci	r20, 0x00	; 0
    22aa:	50 48       	sbci	r21, 0x80	; 128
    22ac:	06 c0       	rjmp	.+12     	; 0x22ba <__fixunssfsi+0x4a>
    22ae:	c8 01       	movw	r24, r16
    22b0:	b7 01       	movw	r22, r14
    22b2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__fixsfsi>
    22b6:	9b 01       	movw	r18, r22
    22b8:	ac 01       	movw	r20, r24
    22ba:	b9 01       	movw	r22, r18
    22bc:	ca 01       	movw	r24, r20
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	08 95       	ret

000022c8 <_fpadd_parts>:
    22c8:	a0 e0       	ldi	r26, 0x00	; 0
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ea e6       	ldi	r30, 0x6A	; 106
    22ce:	f1 e1       	ldi	r31, 0x11	; 17
    22d0:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__prologue_saves__>
    22d4:	dc 01       	movw	r26, r24
    22d6:	2b 01       	movw	r4, r22
    22d8:	fa 01       	movw	r30, r20
    22da:	9c 91       	ld	r25, X
    22dc:	92 30       	cpi	r25, 0x02	; 2
    22de:	08 f4       	brcc	.+2      	; 0x22e2 <_fpadd_parts+0x1a>
    22e0:	39 c1       	rjmp	.+626    	; 0x2554 <_fpadd_parts+0x28c>
    22e2:	eb 01       	movw	r28, r22
    22e4:	88 81       	ld	r24, Y
    22e6:	82 30       	cpi	r24, 0x02	; 2
    22e8:	08 f4       	brcc	.+2      	; 0x22ec <_fpadd_parts+0x24>
    22ea:	33 c1       	rjmp	.+614    	; 0x2552 <_fpadd_parts+0x28a>
    22ec:	94 30       	cpi	r25, 0x04	; 4
    22ee:	69 f4       	brne	.+26     	; 0x230a <_fpadd_parts+0x42>
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	09 f0       	breq	.+2      	; 0x22f6 <_fpadd_parts+0x2e>
    22f4:	2f c1       	rjmp	.+606    	; 0x2554 <_fpadd_parts+0x28c>
    22f6:	11 96       	adiw	r26, 0x01	; 1
    22f8:	9c 91       	ld	r25, X
    22fa:	11 97       	sbiw	r26, 0x01	; 1
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	98 17       	cp	r25, r24
    2300:	09 f4       	brne	.+2      	; 0x2304 <_fpadd_parts+0x3c>
    2302:	28 c1       	rjmp	.+592    	; 0x2554 <_fpadd_parts+0x28c>
    2304:	a4 e2       	ldi	r26, 0x24	; 36
    2306:	b2 e0       	ldi	r27, 0x02	; 2
    2308:	25 c1       	rjmp	.+586    	; 0x2554 <_fpadd_parts+0x28c>
    230a:	84 30       	cpi	r24, 0x04	; 4
    230c:	09 f4       	brne	.+2      	; 0x2310 <_fpadd_parts+0x48>
    230e:	21 c1       	rjmp	.+578    	; 0x2552 <_fpadd_parts+0x28a>
    2310:	82 30       	cpi	r24, 0x02	; 2
    2312:	a9 f4       	brne	.+42     	; 0x233e <_fpadd_parts+0x76>
    2314:	92 30       	cpi	r25, 0x02	; 2
    2316:	09 f0       	breq	.+2      	; 0x231a <_fpadd_parts+0x52>
    2318:	1d c1       	rjmp	.+570    	; 0x2554 <_fpadd_parts+0x28c>
    231a:	9a 01       	movw	r18, r20
    231c:	ad 01       	movw	r20, r26
    231e:	88 e0       	ldi	r24, 0x08	; 8
    2320:	ea 01       	movw	r28, r20
    2322:	09 90       	ld	r0, Y+
    2324:	ae 01       	movw	r20, r28
    2326:	e9 01       	movw	r28, r18
    2328:	09 92       	st	Y+, r0
    232a:	9e 01       	movw	r18, r28
    232c:	81 50       	subi	r24, 0x01	; 1
    232e:	c1 f7       	brne	.-16     	; 0x2320 <_fpadd_parts+0x58>
    2330:	e2 01       	movw	r28, r4
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	11 96       	adiw	r26, 0x01	; 1
    2336:	9c 91       	ld	r25, X
    2338:	89 23       	and	r24, r25
    233a:	81 83       	std	Z+1, r24	; 0x01
    233c:	08 c1       	rjmp	.+528    	; 0x254e <_fpadd_parts+0x286>
    233e:	92 30       	cpi	r25, 0x02	; 2
    2340:	09 f4       	brne	.+2      	; 0x2344 <_fpadd_parts+0x7c>
    2342:	07 c1       	rjmp	.+526    	; 0x2552 <_fpadd_parts+0x28a>
    2344:	12 96       	adiw	r26, 0x02	; 2
    2346:	2d 90       	ld	r2, X+
    2348:	3c 90       	ld	r3, X
    234a:	13 97       	sbiw	r26, 0x03	; 3
    234c:	eb 01       	movw	r28, r22
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	9b 81       	ldd	r25, Y+3	; 0x03
    2352:	14 96       	adiw	r26, 0x04	; 4
    2354:	ad 90       	ld	r10, X+
    2356:	bd 90       	ld	r11, X+
    2358:	cd 90       	ld	r12, X+
    235a:	dc 90       	ld	r13, X
    235c:	17 97       	sbiw	r26, 0x07	; 7
    235e:	ec 80       	ldd	r14, Y+4	; 0x04
    2360:	fd 80       	ldd	r15, Y+5	; 0x05
    2362:	0e 81       	ldd	r16, Y+6	; 0x06
    2364:	1f 81       	ldd	r17, Y+7	; 0x07
    2366:	91 01       	movw	r18, r2
    2368:	28 1b       	sub	r18, r24
    236a:	39 0b       	sbc	r19, r25
    236c:	b9 01       	movw	r22, r18
    236e:	37 ff       	sbrs	r19, 7
    2370:	04 c0       	rjmp	.+8      	; 0x237a <_fpadd_parts+0xb2>
    2372:	66 27       	eor	r22, r22
    2374:	77 27       	eor	r23, r23
    2376:	62 1b       	sub	r22, r18
    2378:	73 0b       	sbc	r23, r19
    237a:	60 32       	cpi	r22, 0x20	; 32
    237c:	71 05       	cpc	r23, r1
    237e:	0c f0       	brlt	.+2      	; 0x2382 <_fpadd_parts+0xba>
    2380:	61 c0       	rjmp	.+194    	; 0x2444 <_fpadd_parts+0x17c>
    2382:	12 16       	cp	r1, r18
    2384:	13 06       	cpc	r1, r19
    2386:	6c f5       	brge	.+90     	; 0x23e2 <_fpadd_parts+0x11a>
    2388:	37 01       	movw	r6, r14
    238a:	48 01       	movw	r8, r16
    238c:	06 2e       	mov	r0, r22
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <_fpadd_parts+0xd0>
    2390:	96 94       	lsr	r9
    2392:	87 94       	ror	r8
    2394:	77 94       	ror	r7
    2396:	67 94       	ror	r6
    2398:	0a 94       	dec	r0
    239a:	d2 f7       	brpl	.-12     	; 0x2390 <_fpadd_parts+0xc8>
    239c:	21 e0       	ldi	r18, 0x01	; 1
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	04 c0       	rjmp	.+8      	; 0x23ae <_fpadd_parts+0xe6>
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	44 1f       	adc	r20, r20
    23ac:	55 1f       	adc	r21, r21
    23ae:	6a 95       	dec	r22
    23b0:	d2 f7       	brpl	.-12     	; 0x23a6 <_fpadd_parts+0xde>
    23b2:	21 50       	subi	r18, 0x01	; 1
    23b4:	30 40       	sbci	r19, 0x00	; 0
    23b6:	40 40       	sbci	r20, 0x00	; 0
    23b8:	50 40       	sbci	r21, 0x00	; 0
    23ba:	2e 21       	and	r18, r14
    23bc:	3f 21       	and	r19, r15
    23be:	40 23       	and	r20, r16
    23c0:	51 23       	and	r21, r17
    23c2:	21 15       	cp	r18, r1
    23c4:	31 05       	cpc	r19, r1
    23c6:	41 05       	cpc	r20, r1
    23c8:	51 05       	cpc	r21, r1
    23ca:	21 f0       	breq	.+8      	; 0x23d4 <_fpadd_parts+0x10c>
    23cc:	21 e0       	ldi	r18, 0x01	; 1
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	50 e0       	ldi	r21, 0x00	; 0
    23d4:	79 01       	movw	r14, r18
    23d6:	8a 01       	movw	r16, r20
    23d8:	e6 28       	or	r14, r6
    23da:	f7 28       	or	r15, r7
    23dc:	08 29       	or	r16, r8
    23de:	19 29       	or	r17, r9
    23e0:	3c c0       	rjmp	.+120    	; 0x245a <_fpadd_parts+0x192>
    23e2:	23 2b       	or	r18, r19
    23e4:	d1 f1       	breq	.+116    	; 0x245a <_fpadd_parts+0x192>
    23e6:	26 0e       	add	r2, r22
    23e8:	37 1e       	adc	r3, r23
    23ea:	35 01       	movw	r6, r10
    23ec:	46 01       	movw	r8, r12
    23ee:	06 2e       	mov	r0, r22
    23f0:	04 c0       	rjmp	.+8      	; 0x23fa <_fpadd_parts+0x132>
    23f2:	96 94       	lsr	r9
    23f4:	87 94       	ror	r8
    23f6:	77 94       	ror	r7
    23f8:	67 94       	ror	r6
    23fa:	0a 94       	dec	r0
    23fc:	d2 f7       	brpl	.-12     	; 0x23f2 <_fpadd_parts+0x12a>
    23fe:	21 e0       	ldi	r18, 0x01	; 1
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	04 c0       	rjmp	.+8      	; 0x2410 <_fpadd_parts+0x148>
    2408:	22 0f       	add	r18, r18
    240a:	33 1f       	adc	r19, r19
    240c:	44 1f       	adc	r20, r20
    240e:	55 1f       	adc	r21, r21
    2410:	6a 95       	dec	r22
    2412:	d2 f7       	brpl	.-12     	; 0x2408 <_fpadd_parts+0x140>
    2414:	21 50       	subi	r18, 0x01	; 1
    2416:	30 40       	sbci	r19, 0x00	; 0
    2418:	40 40       	sbci	r20, 0x00	; 0
    241a:	50 40       	sbci	r21, 0x00	; 0
    241c:	2a 21       	and	r18, r10
    241e:	3b 21       	and	r19, r11
    2420:	4c 21       	and	r20, r12
    2422:	5d 21       	and	r21, r13
    2424:	21 15       	cp	r18, r1
    2426:	31 05       	cpc	r19, r1
    2428:	41 05       	cpc	r20, r1
    242a:	51 05       	cpc	r21, r1
    242c:	21 f0       	breq	.+8      	; 0x2436 <_fpadd_parts+0x16e>
    242e:	21 e0       	ldi	r18, 0x01	; 1
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	59 01       	movw	r10, r18
    2438:	6a 01       	movw	r12, r20
    243a:	a6 28       	or	r10, r6
    243c:	b7 28       	or	r11, r7
    243e:	c8 28       	or	r12, r8
    2440:	d9 28       	or	r13, r9
    2442:	0b c0       	rjmp	.+22     	; 0x245a <_fpadd_parts+0x192>
    2444:	82 15       	cp	r24, r2
    2446:	93 05       	cpc	r25, r3
    2448:	2c f0       	brlt	.+10     	; 0x2454 <_fpadd_parts+0x18c>
    244a:	1c 01       	movw	r2, r24
    244c:	aa 24       	eor	r10, r10
    244e:	bb 24       	eor	r11, r11
    2450:	65 01       	movw	r12, r10
    2452:	03 c0       	rjmp	.+6      	; 0x245a <_fpadd_parts+0x192>
    2454:	ee 24       	eor	r14, r14
    2456:	ff 24       	eor	r15, r15
    2458:	87 01       	movw	r16, r14
    245a:	11 96       	adiw	r26, 0x01	; 1
    245c:	9c 91       	ld	r25, X
    245e:	d2 01       	movw	r26, r4
    2460:	11 96       	adiw	r26, 0x01	; 1
    2462:	8c 91       	ld	r24, X
    2464:	98 17       	cp	r25, r24
    2466:	09 f4       	brne	.+2      	; 0x246a <_fpadd_parts+0x1a2>
    2468:	45 c0       	rjmp	.+138    	; 0x24f4 <_fpadd_parts+0x22c>
    246a:	99 23       	and	r25, r25
    246c:	39 f0       	breq	.+14     	; 0x247c <_fpadd_parts+0x1b4>
    246e:	a8 01       	movw	r20, r16
    2470:	97 01       	movw	r18, r14
    2472:	2a 19       	sub	r18, r10
    2474:	3b 09       	sbc	r19, r11
    2476:	4c 09       	sbc	r20, r12
    2478:	5d 09       	sbc	r21, r13
    247a:	06 c0       	rjmp	.+12     	; 0x2488 <_fpadd_parts+0x1c0>
    247c:	a6 01       	movw	r20, r12
    247e:	95 01       	movw	r18, r10
    2480:	2e 19       	sub	r18, r14
    2482:	3f 09       	sbc	r19, r15
    2484:	40 0b       	sbc	r20, r16
    2486:	51 0b       	sbc	r21, r17
    2488:	57 fd       	sbrc	r21, 7
    248a:	08 c0       	rjmp	.+16     	; 0x249c <_fpadd_parts+0x1d4>
    248c:	11 82       	std	Z+1, r1	; 0x01
    248e:	33 82       	std	Z+3, r3	; 0x03
    2490:	22 82       	std	Z+2, r2	; 0x02
    2492:	24 83       	std	Z+4, r18	; 0x04
    2494:	35 83       	std	Z+5, r19	; 0x05
    2496:	46 83       	std	Z+6, r20	; 0x06
    2498:	57 83       	std	Z+7, r21	; 0x07
    249a:	1d c0       	rjmp	.+58     	; 0x24d6 <_fpadd_parts+0x20e>
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	81 83       	std	Z+1, r24	; 0x01
    24a0:	33 82       	std	Z+3, r3	; 0x03
    24a2:	22 82       	std	Z+2, r2	; 0x02
    24a4:	88 27       	eor	r24, r24
    24a6:	99 27       	eor	r25, r25
    24a8:	dc 01       	movw	r26, r24
    24aa:	82 1b       	sub	r24, r18
    24ac:	93 0b       	sbc	r25, r19
    24ae:	a4 0b       	sbc	r26, r20
    24b0:	b5 0b       	sbc	r27, r21
    24b2:	84 83       	std	Z+4, r24	; 0x04
    24b4:	95 83       	std	Z+5, r25	; 0x05
    24b6:	a6 83       	std	Z+6, r26	; 0x06
    24b8:	b7 83       	std	Z+7, r27	; 0x07
    24ba:	0d c0       	rjmp	.+26     	; 0x24d6 <_fpadd_parts+0x20e>
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	44 1f       	adc	r20, r20
    24c2:	55 1f       	adc	r21, r21
    24c4:	24 83       	std	Z+4, r18	; 0x04
    24c6:	35 83       	std	Z+5, r19	; 0x05
    24c8:	46 83       	std	Z+6, r20	; 0x06
    24ca:	57 83       	std	Z+7, r21	; 0x07
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	93 83       	std	Z+3, r25	; 0x03
    24d4:	82 83       	std	Z+2, r24	; 0x02
    24d6:	24 81       	ldd	r18, Z+4	; 0x04
    24d8:	35 81       	ldd	r19, Z+5	; 0x05
    24da:	46 81       	ldd	r20, Z+6	; 0x06
    24dc:	57 81       	ldd	r21, Z+7	; 0x07
    24de:	da 01       	movw	r26, r20
    24e0:	c9 01       	movw	r24, r18
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	a1 09       	sbc	r26, r1
    24e6:	b1 09       	sbc	r27, r1
    24e8:	8f 5f       	subi	r24, 0xFF	; 255
    24ea:	9f 4f       	sbci	r25, 0xFF	; 255
    24ec:	af 4f       	sbci	r26, 0xFF	; 255
    24ee:	bf 43       	sbci	r27, 0x3F	; 63
    24f0:	28 f3       	brcs	.-54     	; 0x24bc <_fpadd_parts+0x1f4>
    24f2:	0b c0       	rjmp	.+22     	; 0x250a <_fpadd_parts+0x242>
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	33 82       	std	Z+3, r3	; 0x03
    24f8:	22 82       	std	Z+2, r2	; 0x02
    24fa:	ea 0c       	add	r14, r10
    24fc:	fb 1c       	adc	r15, r11
    24fe:	0c 1d       	adc	r16, r12
    2500:	1d 1d       	adc	r17, r13
    2502:	e4 82       	std	Z+4, r14	; 0x04
    2504:	f5 82       	std	Z+5, r15	; 0x05
    2506:	06 83       	std	Z+6, r16	; 0x06
    2508:	17 83       	std	Z+7, r17	; 0x07
    250a:	83 e0       	ldi	r24, 0x03	; 3
    250c:	80 83       	st	Z, r24
    250e:	24 81       	ldd	r18, Z+4	; 0x04
    2510:	35 81       	ldd	r19, Z+5	; 0x05
    2512:	46 81       	ldd	r20, Z+6	; 0x06
    2514:	57 81       	ldd	r21, Z+7	; 0x07
    2516:	57 ff       	sbrs	r21, 7
    2518:	1a c0       	rjmp	.+52     	; 0x254e <_fpadd_parts+0x286>
    251a:	c9 01       	movw	r24, r18
    251c:	aa 27       	eor	r26, r26
    251e:	97 fd       	sbrc	r25, 7
    2520:	a0 95       	com	r26
    2522:	ba 2f       	mov	r27, r26
    2524:	81 70       	andi	r24, 0x01	; 1
    2526:	90 70       	andi	r25, 0x00	; 0
    2528:	a0 70       	andi	r26, 0x00	; 0
    252a:	b0 70       	andi	r27, 0x00	; 0
    252c:	56 95       	lsr	r21
    252e:	47 95       	ror	r20
    2530:	37 95       	ror	r19
    2532:	27 95       	ror	r18
    2534:	82 2b       	or	r24, r18
    2536:	93 2b       	or	r25, r19
    2538:	a4 2b       	or	r26, r20
    253a:	b5 2b       	or	r27, r21
    253c:	84 83       	std	Z+4, r24	; 0x04
    253e:	95 83       	std	Z+5, r25	; 0x05
    2540:	a6 83       	std	Z+6, r26	; 0x06
    2542:	b7 83       	std	Z+7, r27	; 0x07
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	93 83       	std	Z+3, r25	; 0x03
    254c:	82 83       	std	Z+2, r24	; 0x02
    254e:	df 01       	movw	r26, r30
    2550:	01 c0       	rjmp	.+2      	; 0x2554 <_fpadd_parts+0x28c>
    2552:	d2 01       	movw	r26, r4
    2554:	cd 01       	movw	r24, r26
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	e2 e1       	ldi	r30, 0x12	; 18
    255c:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__epilogue_restores__>

00002560 <__subsf3>:
    2560:	a0 e2       	ldi	r26, 0x20	; 32
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e6 eb       	ldi	r30, 0xB6	; 182
    2566:	f2 e1       	ldi	r31, 0x12	; 18
    2568:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__prologue_saves__+0x18>
    256c:	69 83       	std	Y+1, r22	; 0x01
    256e:	7a 83       	std	Y+2, r23	; 0x02
    2570:	8b 83       	std	Y+3, r24	; 0x03
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	2d 83       	std	Y+5, r18	; 0x05
    2576:	3e 83       	std	Y+6, r19	; 0x06
    2578:	4f 83       	std	Y+7, r20	; 0x07
    257a:	58 87       	std	Y+8, r21	; 0x08
    257c:	e9 e0       	ldi	r30, 0x09	; 9
    257e:	ee 2e       	mov	r14, r30
    2580:	f1 2c       	mov	r15, r1
    2582:	ec 0e       	add	r14, r28
    2584:	fd 1e       	adc	r15, r29
    2586:	ce 01       	movw	r24, r28
    2588:	01 96       	adiw	r24, 0x01	; 1
    258a:	b7 01       	movw	r22, r14
    258c:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__unpack_f>
    2590:	8e 01       	movw	r16, r28
    2592:	0f 5e       	subi	r16, 0xEF	; 239
    2594:	1f 4f       	sbci	r17, 0xFF	; 255
    2596:	ce 01       	movw	r24, r28
    2598:	05 96       	adiw	r24, 0x05	; 5
    259a:	b8 01       	movw	r22, r16
    259c:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__unpack_f>
    25a0:	8a 89       	ldd	r24, Y+18	; 0x12
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	89 27       	eor	r24, r25
    25a6:	8a 8b       	std	Y+18, r24	; 0x12
    25a8:	c7 01       	movw	r24, r14
    25aa:	b8 01       	movw	r22, r16
    25ac:	ae 01       	movw	r20, r28
    25ae:	47 5e       	subi	r20, 0xE7	; 231
    25b0:	5f 4f       	sbci	r21, 0xFF	; 255
    25b2:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_fpadd_parts>
    25b6:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__pack_f>
    25ba:	a0 96       	adiw	r28, 0x20	; 32
    25bc:	e6 e0       	ldi	r30, 0x06	; 6
    25be:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__epilogue_restores__+0x18>

000025c2 <__addsf3>:
    25c2:	a0 e2       	ldi	r26, 0x20	; 32
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e7 ee       	ldi	r30, 0xE7	; 231
    25c8:	f2 e1       	ldi	r31, 0x12	; 18
    25ca:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__prologue_saves__+0x18>
    25ce:	69 83       	std	Y+1, r22	; 0x01
    25d0:	7a 83       	std	Y+2, r23	; 0x02
    25d2:	8b 83       	std	Y+3, r24	; 0x03
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	2d 83       	std	Y+5, r18	; 0x05
    25d8:	3e 83       	std	Y+6, r19	; 0x06
    25da:	4f 83       	std	Y+7, r20	; 0x07
    25dc:	58 87       	std	Y+8, r21	; 0x08
    25de:	f9 e0       	ldi	r31, 0x09	; 9
    25e0:	ef 2e       	mov	r14, r31
    25e2:	f1 2c       	mov	r15, r1
    25e4:	ec 0e       	add	r14, r28
    25e6:	fd 1e       	adc	r15, r29
    25e8:	ce 01       	movw	r24, r28
    25ea:	01 96       	adiw	r24, 0x01	; 1
    25ec:	b7 01       	movw	r22, r14
    25ee:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__unpack_f>
    25f2:	8e 01       	movw	r16, r28
    25f4:	0f 5e       	subi	r16, 0xEF	; 239
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	ce 01       	movw	r24, r28
    25fa:	05 96       	adiw	r24, 0x05	; 5
    25fc:	b8 01       	movw	r22, r16
    25fe:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__unpack_f>
    2602:	c7 01       	movw	r24, r14
    2604:	b8 01       	movw	r22, r16
    2606:	ae 01       	movw	r20, r28
    2608:	47 5e       	subi	r20, 0xE7	; 231
    260a:	5f 4f       	sbci	r21, 0xFF	; 255
    260c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_fpadd_parts>
    2610:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__pack_f>
    2614:	a0 96       	adiw	r28, 0x20	; 32
    2616:	e6 e0       	ldi	r30, 0x06	; 6
    2618:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__epilogue_restores__+0x18>

0000261c <__divsf3>:
    261c:	a8 e1       	ldi	r26, 0x18	; 24
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e4 e1       	ldi	r30, 0x14	; 20
    2622:	f3 e1       	ldi	r31, 0x13	; 19
    2624:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__prologue_saves__+0x10>
    2628:	69 83       	std	Y+1, r22	; 0x01
    262a:	7a 83       	std	Y+2, r23	; 0x02
    262c:	8b 83       	std	Y+3, r24	; 0x03
    262e:	9c 83       	std	Y+4, r25	; 0x04
    2630:	2d 83       	std	Y+5, r18	; 0x05
    2632:	3e 83       	std	Y+6, r19	; 0x06
    2634:	4f 83       	std	Y+7, r20	; 0x07
    2636:	58 87       	std	Y+8, r21	; 0x08
    2638:	b9 e0       	ldi	r27, 0x09	; 9
    263a:	eb 2e       	mov	r14, r27
    263c:	f1 2c       	mov	r15, r1
    263e:	ec 0e       	add	r14, r28
    2640:	fd 1e       	adc	r15, r29
    2642:	ce 01       	movw	r24, r28
    2644:	01 96       	adiw	r24, 0x01	; 1
    2646:	b7 01       	movw	r22, r14
    2648:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__unpack_f>
    264c:	8e 01       	movw	r16, r28
    264e:	0f 5e       	subi	r16, 0xEF	; 239
    2650:	1f 4f       	sbci	r17, 0xFF	; 255
    2652:	ce 01       	movw	r24, r28
    2654:	05 96       	adiw	r24, 0x05	; 5
    2656:	b8 01       	movw	r22, r16
    2658:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__unpack_f>
    265c:	29 85       	ldd	r18, Y+9	; 0x09
    265e:	22 30       	cpi	r18, 0x02	; 2
    2660:	08 f4       	brcc	.+2      	; 0x2664 <__divsf3+0x48>
    2662:	7e c0       	rjmp	.+252    	; 0x2760 <__divsf3+0x144>
    2664:	39 89       	ldd	r19, Y+17	; 0x11
    2666:	32 30       	cpi	r19, 0x02	; 2
    2668:	10 f4       	brcc	.+4      	; 0x266e <__divsf3+0x52>
    266a:	b8 01       	movw	r22, r16
    266c:	7c c0       	rjmp	.+248    	; 0x2766 <__divsf3+0x14a>
    266e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2670:	9a 89       	ldd	r25, Y+18	; 0x12
    2672:	89 27       	eor	r24, r25
    2674:	8a 87       	std	Y+10, r24	; 0x0a
    2676:	24 30       	cpi	r18, 0x04	; 4
    2678:	11 f0       	breq	.+4      	; 0x267e <__divsf3+0x62>
    267a:	22 30       	cpi	r18, 0x02	; 2
    267c:	31 f4       	brne	.+12     	; 0x268a <__divsf3+0x6e>
    267e:	23 17       	cp	r18, r19
    2680:	09 f0       	breq	.+2      	; 0x2684 <__divsf3+0x68>
    2682:	6e c0       	rjmp	.+220    	; 0x2760 <__divsf3+0x144>
    2684:	64 e2       	ldi	r22, 0x24	; 36
    2686:	72 e0       	ldi	r23, 0x02	; 2
    2688:	6e c0       	rjmp	.+220    	; 0x2766 <__divsf3+0x14a>
    268a:	34 30       	cpi	r19, 0x04	; 4
    268c:	39 f4       	brne	.+14     	; 0x269c <__divsf3+0x80>
    268e:	1d 86       	std	Y+13, r1	; 0x0d
    2690:	1e 86       	std	Y+14, r1	; 0x0e
    2692:	1f 86       	std	Y+15, r1	; 0x0f
    2694:	18 8a       	std	Y+16, r1	; 0x10
    2696:	1c 86       	std	Y+12, r1	; 0x0c
    2698:	1b 86       	std	Y+11, r1	; 0x0b
    269a:	04 c0       	rjmp	.+8      	; 0x26a4 <__divsf3+0x88>
    269c:	32 30       	cpi	r19, 0x02	; 2
    269e:	21 f4       	brne	.+8      	; 0x26a8 <__divsf3+0x8c>
    26a0:	84 e0       	ldi	r24, 0x04	; 4
    26a2:	89 87       	std	Y+9, r24	; 0x09
    26a4:	b7 01       	movw	r22, r14
    26a6:	5f c0       	rjmp	.+190    	; 0x2766 <__divsf3+0x14a>
    26a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    26aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	28 1b       	sub	r18, r24
    26b2:	39 0b       	sbc	r19, r25
    26b4:	3c 87       	std	Y+12, r19	; 0x0c
    26b6:	2b 87       	std	Y+11, r18	; 0x0b
    26b8:	ed 84       	ldd	r14, Y+13	; 0x0d
    26ba:	fe 84       	ldd	r15, Y+14	; 0x0e
    26bc:	0f 85       	ldd	r16, Y+15	; 0x0f
    26be:	18 89       	ldd	r17, Y+16	; 0x10
    26c0:	ad 88       	ldd	r10, Y+21	; 0x15
    26c2:	be 88       	ldd	r11, Y+22	; 0x16
    26c4:	cf 88       	ldd	r12, Y+23	; 0x17
    26c6:	d8 8c       	ldd	r13, Y+24	; 0x18
    26c8:	ea 14       	cp	r14, r10
    26ca:	fb 04       	cpc	r15, r11
    26cc:	0c 05       	cpc	r16, r12
    26ce:	1d 05       	cpc	r17, r13
    26d0:	40 f4       	brcc	.+16     	; 0x26e2 <__divsf3+0xc6>
    26d2:	ee 0c       	add	r14, r14
    26d4:	ff 1c       	adc	r15, r15
    26d6:	00 1f       	adc	r16, r16
    26d8:	11 1f       	adc	r17, r17
    26da:	21 50       	subi	r18, 0x01	; 1
    26dc:	30 40       	sbci	r19, 0x00	; 0
    26de:	3c 87       	std	Y+12, r19	; 0x0c
    26e0:	2b 87       	std	Y+11, r18	; 0x0b
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a0 e0       	ldi	r26, 0x00	; 0
    26f0:	b0 e4       	ldi	r27, 0x40	; 64
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	70 e0       	ldi	r23, 0x00	; 0
    26f6:	ea 14       	cp	r14, r10
    26f8:	fb 04       	cpc	r15, r11
    26fa:	0c 05       	cpc	r16, r12
    26fc:	1d 05       	cpc	r17, r13
    26fe:	40 f0       	brcs	.+16     	; 0x2710 <__divsf3+0xf4>
    2700:	28 2b       	or	r18, r24
    2702:	39 2b       	or	r19, r25
    2704:	4a 2b       	or	r20, r26
    2706:	5b 2b       	or	r21, r27
    2708:	ea 18       	sub	r14, r10
    270a:	fb 08       	sbc	r15, r11
    270c:	0c 09       	sbc	r16, r12
    270e:	1d 09       	sbc	r17, r13
    2710:	b6 95       	lsr	r27
    2712:	a7 95       	ror	r26
    2714:	97 95       	ror	r25
    2716:	87 95       	ror	r24
    2718:	ee 0c       	add	r14, r14
    271a:	ff 1c       	adc	r15, r15
    271c:	00 1f       	adc	r16, r16
    271e:	11 1f       	adc	r17, r17
    2720:	6f 5f       	subi	r22, 0xFF	; 255
    2722:	7f 4f       	sbci	r23, 0xFF	; 255
    2724:	6f 31       	cpi	r22, 0x1F	; 31
    2726:	71 05       	cpc	r23, r1
    2728:	31 f7       	brne	.-52     	; 0x26f6 <__divsf3+0xda>
    272a:	da 01       	movw	r26, r20
    272c:	c9 01       	movw	r24, r18
    272e:	8f 77       	andi	r24, 0x7F	; 127
    2730:	90 70       	andi	r25, 0x00	; 0
    2732:	a0 70       	andi	r26, 0x00	; 0
    2734:	b0 70       	andi	r27, 0x00	; 0
    2736:	80 34       	cpi	r24, 0x40	; 64
    2738:	91 05       	cpc	r25, r1
    273a:	a1 05       	cpc	r26, r1
    273c:	b1 05       	cpc	r27, r1
    273e:	61 f4       	brne	.+24     	; 0x2758 <__divsf3+0x13c>
    2740:	27 fd       	sbrc	r18, 7
    2742:	0a c0       	rjmp	.+20     	; 0x2758 <__divsf3+0x13c>
    2744:	e1 14       	cp	r14, r1
    2746:	f1 04       	cpc	r15, r1
    2748:	01 05       	cpc	r16, r1
    274a:	11 05       	cpc	r17, r1
    274c:	29 f0       	breq	.+10     	; 0x2758 <__divsf3+0x13c>
    274e:	20 5c       	subi	r18, 0xC0	; 192
    2750:	3f 4f       	sbci	r19, 0xFF	; 255
    2752:	4f 4f       	sbci	r20, 0xFF	; 255
    2754:	5f 4f       	sbci	r21, 0xFF	; 255
    2756:	20 78       	andi	r18, 0x80	; 128
    2758:	2d 87       	std	Y+13, r18	; 0x0d
    275a:	3e 87       	std	Y+14, r19	; 0x0e
    275c:	4f 87       	std	Y+15, r20	; 0x0f
    275e:	58 8b       	std	Y+16, r21	; 0x10
    2760:	be 01       	movw	r22, r28
    2762:	67 5f       	subi	r22, 0xF7	; 247
    2764:	7f 4f       	sbci	r23, 0xFF	; 255
    2766:	cb 01       	movw	r24, r22
    2768:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__pack_f>
    276c:	68 96       	adiw	r28, 0x18	; 24
    276e:	ea e0       	ldi	r30, 0x0A	; 10
    2770:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__epilogue_restores__+0x10>

00002774 <__gesf2>:
    2774:	a8 e1       	ldi	r26, 0x18	; 24
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e0 ec       	ldi	r30, 0xC0	; 192
    277a:	f3 e1       	ldi	r31, 0x13	; 19
    277c:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__prologue_saves__+0x18>
    2780:	69 83       	std	Y+1, r22	; 0x01
    2782:	7a 83       	std	Y+2, r23	; 0x02
    2784:	8b 83       	std	Y+3, r24	; 0x03
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	2d 83       	std	Y+5, r18	; 0x05
    278a:	3e 83       	std	Y+6, r19	; 0x06
    278c:	4f 83       	std	Y+7, r20	; 0x07
    278e:	58 87       	std	Y+8, r21	; 0x08
    2790:	89 e0       	ldi	r24, 0x09	; 9
    2792:	e8 2e       	mov	r14, r24
    2794:	f1 2c       	mov	r15, r1
    2796:	ec 0e       	add	r14, r28
    2798:	fd 1e       	adc	r15, r29
    279a:	ce 01       	movw	r24, r28
    279c:	01 96       	adiw	r24, 0x01	; 1
    279e:	b7 01       	movw	r22, r14
    27a0:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__unpack_f>
    27a4:	8e 01       	movw	r16, r28
    27a6:	0f 5e       	subi	r16, 0xEF	; 239
    27a8:	1f 4f       	sbci	r17, 0xFF	; 255
    27aa:	ce 01       	movw	r24, r28
    27ac:	05 96       	adiw	r24, 0x05	; 5
    27ae:	b8 01       	movw	r22, r16
    27b0:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__unpack_f>
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	82 30       	cpi	r24, 0x02	; 2
    27b8:	40 f0       	brcs	.+16     	; 0x27ca <__gesf2+0x56>
    27ba:	89 89       	ldd	r24, Y+17	; 0x11
    27bc:	82 30       	cpi	r24, 0x02	; 2
    27be:	28 f0       	brcs	.+10     	; 0x27ca <__gesf2+0x56>
    27c0:	c7 01       	movw	r24, r14
    27c2:	b8 01       	movw	r22, r16
    27c4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__fpcmp_parts_f>
    27c8:	01 c0       	rjmp	.+2      	; 0x27cc <__gesf2+0x58>
    27ca:	8f ef       	ldi	r24, 0xFF	; 255
    27cc:	68 96       	adiw	r28, 0x18	; 24
    27ce:	e6 e0       	ldi	r30, 0x06	; 6
    27d0:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__epilogue_restores__+0x18>

000027d4 <__fixsfsi>:
    27d4:	ac e0       	ldi	r26, 0x0C	; 12
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e0 ef       	ldi	r30, 0xF0	; 240
    27da:	f3 e1       	ldi	r31, 0x13	; 19
    27dc:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__prologue_saves__+0x20>
    27e0:	69 83       	std	Y+1, r22	; 0x01
    27e2:	7a 83       	std	Y+2, r23	; 0x02
    27e4:	8b 83       	std	Y+3, r24	; 0x03
    27e6:	9c 83       	std	Y+4, r25	; 0x04
    27e8:	ce 01       	movw	r24, r28
    27ea:	01 96       	adiw	r24, 0x01	; 1
    27ec:	be 01       	movw	r22, r28
    27ee:	6b 5f       	subi	r22, 0xFB	; 251
    27f0:	7f 4f       	sbci	r23, 0xFF	; 255
    27f2:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <__unpack_f>
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	82 30       	cpi	r24, 0x02	; 2
    27fa:	61 f1       	breq	.+88     	; 0x2854 <__fixsfsi+0x80>
    27fc:	82 30       	cpi	r24, 0x02	; 2
    27fe:	50 f1       	brcs	.+84     	; 0x2854 <__fixsfsi+0x80>
    2800:	84 30       	cpi	r24, 0x04	; 4
    2802:	21 f4       	brne	.+8      	; 0x280c <__fixsfsi+0x38>
    2804:	8e 81       	ldd	r24, Y+6	; 0x06
    2806:	88 23       	and	r24, r24
    2808:	51 f1       	breq	.+84     	; 0x285e <__fixsfsi+0x8a>
    280a:	2e c0       	rjmp	.+92     	; 0x2868 <__fixsfsi+0x94>
    280c:	2f 81       	ldd	r18, Y+7	; 0x07
    280e:	38 85       	ldd	r19, Y+8	; 0x08
    2810:	37 fd       	sbrc	r19, 7
    2812:	20 c0       	rjmp	.+64     	; 0x2854 <__fixsfsi+0x80>
    2814:	6e 81       	ldd	r22, Y+6	; 0x06
    2816:	2f 31       	cpi	r18, 0x1F	; 31
    2818:	31 05       	cpc	r19, r1
    281a:	1c f0       	brlt	.+6      	; 0x2822 <__fixsfsi+0x4e>
    281c:	66 23       	and	r22, r22
    281e:	f9 f0       	breq	.+62     	; 0x285e <__fixsfsi+0x8a>
    2820:	23 c0       	rjmp	.+70     	; 0x2868 <__fixsfsi+0x94>
    2822:	8e e1       	ldi	r24, 0x1E	; 30
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	82 1b       	sub	r24, r18
    2828:	93 0b       	sbc	r25, r19
    282a:	29 85       	ldd	r18, Y+9	; 0x09
    282c:	3a 85       	ldd	r19, Y+10	; 0x0a
    282e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2830:	5c 85       	ldd	r21, Y+12	; 0x0c
    2832:	04 c0       	rjmp	.+8      	; 0x283c <__fixsfsi+0x68>
    2834:	56 95       	lsr	r21
    2836:	47 95       	ror	r20
    2838:	37 95       	ror	r19
    283a:	27 95       	ror	r18
    283c:	8a 95       	dec	r24
    283e:	d2 f7       	brpl	.-12     	; 0x2834 <__fixsfsi+0x60>
    2840:	66 23       	and	r22, r22
    2842:	b1 f0       	breq	.+44     	; 0x2870 <__fixsfsi+0x9c>
    2844:	50 95       	com	r21
    2846:	40 95       	com	r20
    2848:	30 95       	com	r19
    284a:	21 95       	neg	r18
    284c:	3f 4f       	sbci	r19, 0xFF	; 255
    284e:	4f 4f       	sbci	r20, 0xFF	; 255
    2850:	5f 4f       	sbci	r21, 0xFF	; 255
    2852:	0e c0       	rjmp	.+28     	; 0x2870 <__fixsfsi+0x9c>
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	09 c0       	rjmp	.+18     	; 0x2870 <__fixsfsi+0x9c>
    285e:	2f ef       	ldi	r18, 0xFF	; 255
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f ef       	ldi	r20, 0xFF	; 255
    2864:	5f e7       	ldi	r21, 0x7F	; 127
    2866:	04 c0       	rjmp	.+8      	; 0x2870 <__fixsfsi+0x9c>
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	50 e8       	ldi	r21, 0x80	; 128
    2870:	b9 01       	movw	r22, r18
    2872:	ca 01       	movw	r24, r20
    2874:	2c 96       	adiw	r28, 0x0c	; 12
    2876:	e2 e0       	ldi	r30, 0x02	; 2
    2878:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <__epilogue_restores__+0x20>

0000287c <__floatunsisf>:
    287c:	a8 e0       	ldi	r26, 0x08	; 8
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e4 e4       	ldi	r30, 0x44	; 68
    2882:	f4 e1       	ldi	r31, 0x14	; 20
    2884:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__prologue_saves__+0x10>
    2888:	7b 01       	movw	r14, r22
    288a:	8c 01       	movw	r16, r24
    288c:	61 15       	cp	r22, r1
    288e:	71 05       	cpc	r23, r1
    2890:	81 05       	cpc	r24, r1
    2892:	91 05       	cpc	r25, r1
    2894:	19 f4       	brne	.+6      	; 0x289c <__floatunsisf+0x20>
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	60 c0       	rjmp	.+192    	; 0x295c <__floatunsisf+0xe0>
    289c:	83 e0       	ldi	r24, 0x03	; 3
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	8e e1       	ldi	r24, 0x1E	; 30
    28a2:	c8 2e       	mov	r12, r24
    28a4:	d1 2c       	mov	r13, r1
    28a6:	dc 82       	std	Y+4, r13	; 0x04
    28a8:	cb 82       	std	Y+3, r12	; 0x03
    28aa:	ed 82       	std	Y+5, r14	; 0x05
    28ac:	fe 82       	std	Y+6, r15	; 0x06
    28ae:	0f 83       	std	Y+7, r16	; 0x07
    28b0:	18 87       	std	Y+8, r17	; 0x08
    28b2:	c8 01       	movw	r24, r16
    28b4:	b7 01       	movw	r22, r14
    28b6:	0e 94 b7 14 	call	0x296e	; 0x296e <__clzsi2>
    28ba:	fc 01       	movw	r30, r24
    28bc:	31 97       	sbiw	r30, 0x01	; 1
    28be:	f7 ff       	sbrs	r31, 7
    28c0:	3b c0       	rjmp	.+118    	; 0x2938 <__floatunsisf+0xbc>
    28c2:	22 27       	eor	r18, r18
    28c4:	33 27       	eor	r19, r19
    28c6:	2e 1b       	sub	r18, r30
    28c8:	3f 0b       	sbc	r19, r31
    28ca:	57 01       	movw	r10, r14
    28cc:	68 01       	movw	r12, r16
    28ce:	02 2e       	mov	r0, r18
    28d0:	04 c0       	rjmp	.+8      	; 0x28da <__floatunsisf+0x5e>
    28d2:	d6 94       	lsr	r13
    28d4:	c7 94       	ror	r12
    28d6:	b7 94       	ror	r11
    28d8:	a7 94       	ror	r10
    28da:	0a 94       	dec	r0
    28dc:	d2 f7       	brpl	.-12     	; 0x28d2 <__floatunsisf+0x56>
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a0 e0       	ldi	r26, 0x00	; 0
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <__floatunsisf+0x7c>
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	aa 1f       	adc	r26, r26
    28f6:	bb 1f       	adc	r27, r27
    28f8:	2a 95       	dec	r18
    28fa:	d2 f7       	brpl	.-12     	; 0x28f0 <__floatunsisf+0x74>
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	a1 09       	sbc	r26, r1
    2900:	b1 09       	sbc	r27, r1
    2902:	8e 21       	and	r24, r14
    2904:	9f 21       	and	r25, r15
    2906:	a0 23       	and	r26, r16
    2908:	b1 23       	and	r27, r17
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	a1 05       	cpc	r26, r1
    290e:	b1 05       	cpc	r27, r1
    2910:	21 f0       	breq	.+8      	; 0x291a <__floatunsisf+0x9e>
    2912:	41 e0       	ldi	r20, 0x01	; 1
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	4a 29       	or	r20, r10
    291c:	5b 29       	or	r21, r11
    291e:	6c 29       	or	r22, r12
    2920:	7d 29       	or	r23, r13
    2922:	4d 83       	std	Y+5, r20	; 0x05
    2924:	5e 83       	std	Y+6, r21	; 0x06
    2926:	6f 83       	std	Y+7, r22	; 0x07
    2928:	78 87       	std	Y+8, r23	; 0x08
    292a:	8e e1       	ldi	r24, 0x1E	; 30
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	8e 1b       	sub	r24, r30
    2930:	9f 0b       	sbc	r25, r31
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	8b 83       	std	Y+3, r24	; 0x03
    2936:	12 c0       	rjmp	.+36     	; 0x295c <__floatunsisf+0xe0>
    2938:	30 97       	sbiw	r30, 0x00	; 0
    293a:	81 f0       	breq	.+32     	; 0x295c <__floatunsisf+0xe0>
    293c:	0e 2e       	mov	r0, r30
    293e:	04 c0       	rjmp	.+8      	; 0x2948 <__floatunsisf+0xcc>
    2940:	ee 0c       	add	r14, r14
    2942:	ff 1c       	adc	r15, r15
    2944:	00 1f       	adc	r16, r16
    2946:	11 1f       	adc	r17, r17
    2948:	0a 94       	dec	r0
    294a:	d2 f7       	brpl	.-12     	; 0x2940 <__floatunsisf+0xc4>
    294c:	ed 82       	std	Y+5, r14	; 0x05
    294e:	fe 82       	std	Y+6, r15	; 0x06
    2950:	0f 83       	std	Y+7, r16	; 0x07
    2952:	18 87       	std	Y+8, r17	; 0x08
    2954:	ce 1a       	sub	r12, r30
    2956:	df 0a       	sbc	r13, r31
    2958:	dc 82       	std	Y+4, r13	; 0x04
    295a:	cb 82       	std	Y+3, r12	; 0x03
    295c:	1a 82       	std	Y+2, r1	; 0x02
    295e:	ce 01       	movw	r24, r28
    2960:	01 96       	adiw	r24, 0x01	; 1
    2962:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__pack_f>
    2966:	28 96       	adiw	r28, 0x08	; 8
    2968:	ea e0       	ldi	r30, 0x0A	; 10
    296a:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__epilogue_restores__+0x10>

0000296e <__clzsi2>:
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	7b 01       	movw	r14, r22
    2978:	8c 01       	movw	r16, r24
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	e8 16       	cp	r14, r24
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	f8 06       	cpc	r15, r24
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	08 07       	cpc	r16, r24
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	18 07       	cpc	r17, r24
    298a:	88 f4       	brcc	.+34     	; 0x29ae <__clzsi2+0x40>
    298c:	8f ef       	ldi	r24, 0xFF	; 255
    298e:	e8 16       	cp	r14, r24
    2990:	f1 04       	cpc	r15, r1
    2992:	01 05       	cpc	r16, r1
    2994:	11 05       	cpc	r17, r1
    2996:	31 f0       	breq	.+12     	; 0x29a4 <__clzsi2+0x36>
    2998:	28 f0       	brcs	.+10     	; 0x29a4 <__clzsi2+0x36>
    299a:	88 e0       	ldi	r24, 0x08	; 8
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e0       	ldi	r26, 0x00	; 0
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	17 c0       	rjmp	.+46     	; 0x29d2 <__clzsi2+0x64>
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	a0 e0       	ldi	r26, 0x00	; 0
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	12 c0       	rjmp	.+36     	; 0x29d2 <__clzsi2+0x64>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	e8 16       	cp	r14, r24
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	f8 06       	cpc	r15, r24
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	08 07       	cpc	r16, r24
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	18 07       	cpc	r17, r24
    29be:	28 f0       	brcs	.+10     	; 0x29ca <__clzsi2+0x5c>
    29c0:	88 e1       	ldi	r24, 0x18	; 24
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	a0 e0       	ldi	r26, 0x00	; 0
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	04 c0       	rjmp	.+8      	; 0x29d2 <__clzsi2+0x64>
    29ca:	80 e1       	ldi	r24, 0x10	; 16
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	a0 e0       	ldi	r26, 0x00	; 0
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	20 e2       	ldi	r18, 0x20	; 32
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e0       	ldi	r20, 0x00	; 0
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	28 1b       	sub	r18, r24
    29dc:	39 0b       	sbc	r19, r25
    29de:	4a 0b       	sbc	r20, r26
    29e0:	5b 0b       	sbc	r21, r27
    29e2:	04 c0       	rjmp	.+8      	; 0x29ec <__clzsi2+0x7e>
    29e4:	16 95       	lsr	r17
    29e6:	07 95       	ror	r16
    29e8:	f7 94       	ror	r15
    29ea:	e7 94       	ror	r14
    29ec:	8a 95       	dec	r24
    29ee:	d2 f7       	brpl	.-12     	; 0x29e4 <__clzsi2+0x76>
    29f0:	f7 01       	movw	r30, r14
    29f2:	e4 5d       	subi	r30, 0xD4	; 212
    29f4:	fd 4f       	sbci	r31, 0xFD	; 253
    29f6:	80 81       	ld	r24, Z
    29f8:	28 1b       	sub	r18, r24
    29fa:	31 09       	sbc	r19, r1
    29fc:	41 09       	sbc	r20, r1
    29fe:	51 09       	sbc	r21, r1
    2a00:	c9 01       	movw	r24, r18
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	ff 90       	pop	r15
    2a08:	ef 90       	pop	r14
    2a0a:	08 95       	ret

00002a0c <__pack_f>:
    2a0c:	df 92       	push	r13
    2a0e:	ef 92       	push	r14
    2a10:	ff 92       	push	r15
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	fc 01       	movw	r30, r24
    2a18:	e4 80       	ldd	r14, Z+4	; 0x04
    2a1a:	f5 80       	ldd	r15, Z+5	; 0x05
    2a1c:	06 81       	ldd	r16, Z+6	; 0x06
    2a1e:	17 81       	ldd	r17, Z+7	; 0x07
    2a20:	d1 80       	ldd	r13, Z+1	; 0x01
    2a22:	80 81       	ld	r24, Z
    2a24:	82 30       	cpi	r24, 0x02	; 2
    2a26:	48 f4       	brcc	.+18     	; 0x2a3a <__pack_f+0x2e>
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	a0 e1       	ldi	r26, 0x10	; 16
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	e8 2a       	or	r14, r24
    2a32:	f9 2a       	or	r15, r25
    2a34:	0a 2b       	or	r16, r26
    2a36:	1b 2b       	or	r17, r27
    2a38:	a5 c0       	rjmp	.+330    	; 0x2b84 <__pack_f+0x178>
    2a3a:	84 30       	cpi	r24, 0x04	; 4
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <__pack_f+0x34>
    2a3e:	9f c0       	rjmp	.+318    	; 0x2b7e <__pack_f+0x172>
    2a40:	82 30       	cpi	r24, 0x02	; 2
    2a42:	21 f4       	brne	.+8      	; 0x2a4c <__pack_f+0x40>
    2a44:	ee 24       	eor	r14, r14
    2a46:	ff 24       	eor	r15, r15
    2a48:	87 01       	movw	r16, r14
    2a4a:	05 c0       	rjmp	.+10     	; 0x2a56 <__pack_f+0x4a>
    2a4c:	e1 14       	cp	r14, r1
    2a4e:	f1 04       	cpc	r15, r1
    2a50:	01 05       	cpc	r16, r1
    2a52:	11 05       	cpc	r17, r1
    2a54:	19 f4       	brne	.+6      	; 0x2a5c <__pack_f+0x50>
    2a56:	e0 e0       	ldi	r30, 0x00	; 0
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	96 c0       	rjmp	.+300    	; 0x2b88 <__pack_f+0x17c>
    2a5c:	62 81       	ldd	r22, Z+2	; 0x02
    2a5e:	73 81       	ldd	r23, Z+3	; 0x03
    2a60:	9f ef       	ldi	r25, 0xFF	; 255
    2a62:	62 38       	cpi	r22, 0x82	; 130
    2a64:	79 07       	cpc	r23, r25
    2a66:	0c f0       	brlt	.+2      	; 0x2a6a <__pack_f+0x5e>
    2a68:	5b c0       	rjmp	.+182    	; 0x2b20 <__pack_f+0x114>
    2a6a:	22 e8       	ldi	r18, 0x82	; 130
    2a6c:	3f ef       	ldi	r19, 0xFF	; 255
    2a6e:	26 1b       	sub	r18, r22
    2a70:	37 0b       	sbc	r19, r23
    2a72:	2a 31       	cpi	r18, 0x1A	; 26
    2a74:	31 05       	cpc	r19, r1
    2a76:	2c f0       	brlt	.+10     	; 0x2a82 <__pack_f+0x76>
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e0       	ldi	r20, 0x00	; 0
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	2a c0       	rjmp	.+84     	; 0x2ad6 <__pack_f+0xca>
    2a82:	b8 01       	movw	r22, r16
    2a84:	a7 01       	movw	r20, r14
    2a86:	02 2e       	mov	r0, r18
    2a88:	04 c0       	rjmp	.+8      	; 0x2a92 <__pack_f+0x86>
    2a8a:	76 95       	lsr	r23
    2a8c:	67 95       	ror	r22
    2a8e:	57 95       	ror	r21
    2a90:	47 95       	ror	r20
    2a92:	0a 94       	dec	r0
    2a94:	d2 f7       	brpl	.-12     	; 0x2a8a <__pack_f+0x7e>
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a0 e0       	ldi	r26, 0x00	; 0
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	04 c0       	rjmp	.+8      	; 0x2aa8 <__pack_f+0x9c>
    2aa0:	88 0f       	add	r24, r24
    2aa2:	99 1f       	adc	r25, r25
    2aa4:	aa 1f       	adc	r26, r26
    2aa6:	bb 1f       	adc	r27, r27
    2aa8:	2a 95       	dec	r18
    2aaa:	d2 f7       	brpl	.-12     	; 0x2aa0 <__pack_f+0x94>
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	a1 09       	sbc	r26, r1
    2ab0:	b1 09       	sbc	r27, r1
    2ab2:	8e 21       	and	r24, r14
    2ab4:	9f 21       	and	r25, r15
    2ab6:	a0 23       	and	r26, r16
    2ab8:	b1 23       	and	r27, r17
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	a1 05       	cpc	r26, r1
    2abe:	b1 05       	cpc	r27, r1
    2ac0:	21 f0       	breq	.+8      	; 0x2aca <__pack_f+0xbe>
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	a0 e0       	ldi	r26, 0x00	; 0
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	9a 01       	movw	r18, r20
    2acc:	ab 01       	movw	r20, r22
    2ace:	28 2b       	or	r18, r24
    2ad0:	39 2b       	or	r19, r25
    2ad2:	4a 2b       	or	r20, r26
    2ad4:	5b 2b       	or	r21, r27
    2ad6:	da 01       	movw	r26, r20
    2ad8:	c9 01       	movw	r24, r18
    2ada:	8f 77       	andi	r24, 0x7F	; 127
    2adc:	90 70       	andi	r25, 0x00	; 0
    2ade:	a0 70       	andi	r26, 0x00	; 0
    2ae0:	b0 70       	andi	r27, 0x00	; 0
    2ae2:	80 34       	cpi	r24, 0x40	; 64
    2ae4:	91 05       	cpc	r25, r1
    2ae6:	a1 05       	cpc	r26, r1
    2ae8:	b1 05       	cpc	r27, r1
    2aea:	39 f4       	brne	.+14     	; 0x2afa <__pack_f+0xee>
    2aec:	27 ff       	sbrs	r18, 7
    2aee:	09 c0       	rjmp	.+18     	; 0x2b02 <__pack_f+0xf6>
    2af0:	20 5c       	subi	r18, 0xC0	; 192
    2af2:	3f 4f       	sbci	r19, 0xFF	; 255
    2af4:	4f 4f       	sbci	r20, 0xFF	; 255
    2af6:	5f 4f       	sbci	r21, 0xFF	; 255
    2af8:	04 c0       	rjmp	.+8      	; 0x2b02 <__pack_f+0xf6>
    2afa:	21 5c       	subi	r18, 0xC1	; 193
    2afc:	3f 4f       	sbci	r19, 0xFF	; 255
    2afe:	4f 4f       	sbci	r20, 0xFF	; 255
    2b00:	5f 4f       	sbci	r21, 0xFF	; 255
    2b02:	e0 e0       	ldi	r30, 0x00	; 0
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	20 30       	cpi	r18, 0x00	; 0
    2b08:	a0 e0       	ldi	r26, 0x00	; 0
    2b0a:	3a 07       	cpc	r19, r26
    2b0c:	a0 e0       	ldi	r26, 0x00	; 0
    2b0e:	4a 07       	cpc	r20, r26
    2b10:	a0 e4       	ldi	r26, 0x40	; 64
    2b12:	5a 07       	cpc	r21, r26
    2b14:	10 f0       	brcs	.+4      	; 0x2b1a <__pack_f+0x10e>
    2b16:	e1 e0       	ldi	r30, 0x01	; 1
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	79 01       	movw	r14, r18
    2b1c:	8a 01       	movw	r16, r20
    2b1e:	27 c0       	rjmp	.+78     	; 0x2b6e <__pack_f+0x162>
    2b20:	60 38       	cpi	r22, 0x80	; 128
    2b22:	71 05       	cpc	r23, r1
    2b24:	64 f5       	brge	.+88     	; 0x2b7e <__pack_f+0x172>
    2b26:	fb 01       	movw	r30, r22
    2b28:	e1 58       	subi	r30, 0x81	; 129
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	d8 01       	movw	r26, r16
    2b2e:	c7 01       	movw	r24, r14
    2b30:	8f 77       	andi	r24, 0x7F	; 127
    2b32:	90 70       	andi	r25, 0x00	; 0
    2b34:	a0 70       	andi	r26, 0x00	; 0
    2b36:	b0 70       	andi	r27, 0x00	; 0
    2b38:	80 34       	cpi	r24, 0x40	; 64
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	a1 05       	cpc	r26, r1
    2b3e:	b1 05       	cpc	r27, r1
    2b40:	39 f4       	brne	.+14     	; 0x2b50 <__pack_f+0x144>
    2b42:	e7 fe       	sbrs	r14, 7
    2b44:	0d c0       	rjmp	.+26     	; 0x2b60 <__pack_f+0x154>
    2b46:	80 e4       	ldi	r24, 0x40	; 64
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a0 e0       	ldi	r26, 0x00	; 0
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	04 c0       	rjmp	.+8      	; 0x2b58 <__pack_f+0x14c>
    2b50:	8f e3       	ldi	r24, 0x3F	; 63
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e0       	ldi	r26, 0x00	; 0
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e8 0e       	add	r14, r24
    2b5a:	f9 1e       	adc	r15, r25
    2b5c:	0a 1f       	adc	r16, r26
    2b5e:	1b 1f       	adc	r17, r27
    2b60:	17 ff       	sbrs	r17, 7
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <__pack_f+0x162>
    2b64:	16 95       	lsr	r17
    2b66:	07 95       	ror	r16
    2b68:	f7 94       	ror	r15
    2b6a:	e7 94       	ror	r14
    2b6c:	31 96       	adiw	r30, 0x01	; 1
    2b6e:	87 e0       	ldi	r24, 0x07	; 7
    2b70:	16 95       	lsr	r17
    2b72:	07 95       	ror	r16
    2b74:	f7 94       	ror	r15
    2b76:	e7 94       	ror	r14
    2b78:	8a 95       	dec	r24
    2b7a:	d1 f7       	brne	.-12     	; 0x2b70 <__pack_f+0x164>
    2b7c:	05 c0       	rjmp	.+10     	; 0x2b88 <__pack_f+0x17c>
    2b7e:	ee 24       	eor	r14, r14
    2b80:	ff 24       	eor	r15, r15
    2b82:	87 01       	movw	r16, r14
    2b84:	ef ef       	ldi	r30, 0xFF	; 255
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	6e 2f       	mov	r22, r30
    2b8a:	67 95       	ror	r22
    2b8c:	66 27       	eor	r22, r22
    2b8e:	67 95       	ror	r22
    2b90:	90 2f       	mov	r25, r16
    2b92:	9f 77       	andi	r25, 0x7F	; 127
    2b94:	d7 94       	ror	r13
    2b96:	dd 24       	eor	r13, r13
    2b98:	d7 94       	ror	r13
    2b9a:	8e 2f       	mov	r24, r30
    2b9c:	86 95       	lsr	r24
    2b9e:	49 2f       	mov	r20, r25
    2ba0:	46 2b       	or	r20, r22
    2ba2:	58 2f       	mov	r21, r24
    2ba4:	5d 29       	or	r21, r13
    2ba6:	b7 01       	movw	r22, r14
    2ba8:	ca 01       	movw	r24, r20
    2baa:	1f 91       	pop	r17
    2bac:	0f 91       	pop	r16
    2bae:	ff 90       	pop	r15
    2bb0:	ef 90       	pop	r14
    2bb2:	df 90       	pop	r13
    2bb4:	08 95       	ret

00002bb6 <__unpack_f>:
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	db 01       	movw	r26, r22
    2bba:	40 81       	ld	r20, Z
    2bbc:	51 81       	ldd	r21, Z+1	; 0x01
    2bbe:	22 81       	ldd	r18, Z+2	; 0x02
    2bc0:	62 2f       	mov	r22, r18
    2bc2:	6f 77       	andi	r22, 0x7F	; 127
    2bc4:	70 e0       	ldi	r23, 0x00	; 0
    2bc6:	22 1f       	adc	r18, r18
    2bc8:	22 27       	eor	r18, r18
    2bca:	22 1f       	adc	r18, r18
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	89 2f       	mov	r24, r25
    2bd0:	88 0f       	add	r24, r24
    2bd2:	82 2b       	or	r24, r18
    2bd4:	28 2f       	mov	r18, r24
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	99 1f       	adc	r25, r25
    2bda:	99 27       	eor	r25, r25
    2bdc:	99 1f       	adc	r25, r25
    2bde:	11 96       	adiw	r26, 0x01	; 1
    2be0:	9c 93       	st	X, r25
    2be2:	11 97       	sbiw	r26, 0x01	; 1
    2be4:	21 15       	cp	r18, r1
    2be6:	31 05       	cpc	r19, r1
    2be8:	a9 f5       	brne	.+106    	; 0x2c54 <__unpack_f+0x9e>
    2bea:	41 15       	cp	r20, r1
    2bec:	51 05       	cpc	r21, r1
    2bee:	61 05       	cpc	r22, r1
    2bf0:	71 05       	cpc	r23, r1
    2bf2:	11 f4       	brne	.+4      	; 0x2bf8 <__unpack_f+0x42>
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	37 c0       	rjmp	.+110    	; 0x2c66 <__unpack_f+0xb0>
    2bf8:	82 e8       	ldi	r24, 0x82	; 130
    2bfa:	9f ef       	ldi	r25, 0xFF	; 255
    2bfc:	13 96       	adiw	r26, 0x03	; 3
    2bfe:	9c 93       	st	X, r25
    2c00:	8e 93       	st	-X, r24
    2c02:	12 97       	sbiw	r26, 0x02	; 2
    2c04:	9a 01       	movw	r18, r20
    2c06:	ab 01       	movw	r20, r22
    2c08:	67 e0       	ldi	r22, 0x07	; 7
    2c0a:	22 0f       	add	r18, r18
    2c0c:	33 1f       	adc	r19, r19
    2c0e:	44 1f       	adc	r20, r20
    2c10:	55 1f       	adc	r21, r21
    2c12:	6a 95       	dec	r22
    2c14:	d1 f7       	brne	.-12     	; 0x2c0a <__unpack_f+0x54>
    2c16:	83 e0       	ldi	r24, 0x03	; 3
    2c18:	8c 93       	st	X, r24
    2c1a:	0d c0       	rjmp	.+26     	; 0x2c36 <__unpack_f+0x80>
    2c1c:	22 0f       	add	r18, r18
    2c1e:	33 1f       	adc	r19, r19
    2c20:	44 1f       	adc	r20, r20
    2c22:	55 1f       	adc	r21, r21
    2c24:	12 96       	adiw	r26, 0x02	; 2
    2c26:	8d 91       	ld	r24, X+
    2c28:	9c 91       	ld	r25, X
    2c2a:	13 97       	sbiw	r26, 0x03	; 3
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	13 96       	adiw	r26, 0x03	; 3
    2c30:	9c 93       	st	X, r25
    2c32:	8e 93       	st	-X, r24
    2c34:	12 97       	sbiw	r26, 0x02	; 2
    2c36:	20 30       	cpi	r18, 0x00	; 0
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	38 07       	cpc	r19, r24
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	48 07       	cpc	r20, r24
    2c40:	80 e4       	ldi	r24, 0x40	; 64
    2c42:	58 07       	cpc	r21, r24
    2c44:	58 f3       	brcs	.-42     	; 0x2c1c <__unpack_f+0x66>
    2c46:	14 96       	adiw	r26, 0x04	; 4
    2c48:	2d 93       	st	X+, r18
    2c4a:	3d 93       	st	X+, r19
    2c4c:	4d 93       	st	X+, r20
    2c4e:	5c 93       	st	X, r21
    2c50:	17 97       	sbiw	r26, 0x07	; 7
    2c52:	08 95       	ret
    2c54:	2f 3f       	cpi	r18, 0xFF	; 255
    2c56:	31 05       	cpc	r19, r1
    2c58:	79 f4       	brne	.+30     	; 0x2c78 <__unpack_f+0xc2>
    2c5a:	41 15       	cp	r20, r1
    2c5c:	51 05       	cpc	r21, r1
    2c5e:	61 05       	cpc	r22, r1
    2c60:	71 05       	cpc	r23, r1
    2c62:	19 f4       	brne	.+6      	; 0x2c6a <__unpack_f+0xb4>
    2c64:	84 e0       	ldi	r24, 0x04	; 4
    2c66:	8c 93       	st	X, r24
    2c68:	08 95       	ret
    2c6a:	64 ff       	sbrs	r22, 4
    2c6c:	03 c0       	rjmp	.+6      	; 0x2c74 <__unpack_f+0xbe>
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	8c 93       	st	X, r24
    2c72:	12 c0       	rjmp	.+36     	; 0x2c98 <__unpack_f+0xe2>
    2c74:	1c 92       	st	X, r1
    2c76:	10 c0       	rjmp	.+32     	; 0x2c98 <__unpack_f+0xe2>
    2c78:	2f 57       	subi	r18, 0x7F	; 127
    2c7a:	30 40       	sbci	r19, 0x00	; 0
    2c7c:	13 96       	adiw	r26, 0x03	; 3
    2c7e:	3c 93       	st	X, r19
    2c80:	2e 93       	st	-X, r18
    2c82:	12 97       	sbiw	r26, 0x02	; 2
    2c84:	83 e0       	ldi	r24, 0x03	; 3
    2c86:	8c 93       	st	X, r24
    2c88:	87 e0       	ldi	r24, 0x07	; 7
    2c8a:	44 0f       	add	r20, r20
    2c8c:	55 1f       	adc	r21, r21
    2c8e:	66 1f       	adc	r22, r22
    2c90:	77 1f       	adc	r23, r23
    2c92:	8a 95       	dec	r24
    2c94:	d1 f7       	brne	.-12     	; 0x2c8a <__unpack_f+0xd4>
    2c96:	70 64       	ori	r23, 0x40	; 64
    2c98:	14 96       	adiw	r26, 0x04	; 4
    2c9a:	4d 93       	st	X+, r20
    2c9c:	5d 93       	st	X+, r21
    2c9e:	6d 93       	st	X+, r22
    2ca0:	7c 93       	st	X, r23
    2ca2:	17 97       	sbiw	r26, 0x07	; 7
    2ca4:	08 95       	ret

00002ca6 <__fpcmp_parts_f>:
    2ca6:	1f 93       	push	r17
    2ca8:	dc 01       	movw	r26, r24
    2caa:	fb 01       	movw	r30, r22
    2cac:	9c 91       	ld	r25, X
    2cae:	92 30       	cpi	r25, 0x02	; 2
    2cb0:	08 f4       	brcc	.+2      	; 0x2cb4 <__fpcmp_parts_f+0xe>
    2cb2:	47 c0       	rjmp	.+142    	; 0x2d42 <__fpcmp_parts_f+0x9c>
    2cb4:	80 81       	ld	r24, Z
    2cb6:	82 30       	cpi	r24, 0x02	; 2
    2cb8:	08 f4       	brcc	.+2      	; 0x2cbc <__fpcmp_parts_f+0x16>
    2cba:	43 c0       	rjmp	.+134    	; 0x2d42 <__fpcmp_parts_f+0x9c>
    2cbc:	94 30       	cpi	r25, 0x04	; 4
    2cbe:	51 f4       	brne	.+20     	; 0x2cd4 <__fpcmp_parts_f+0x2e>
    2cc0:	11 96       	adiw	r26, 0x01	; 1
    2cc2:	1c 91       	ld	r17, X
    2cc4:	84 30       	cpi	r24, 0x04	; 4
    2cc6:	99 f5       	brne	.+102    	; 0x2d2e <__fpcmp_parts_f+0x88>
    2cc8:	81 81       	ldd	r24, Z+1	; 0x01
    2cca:	68 2f       	mov	r22, r24
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	61 1b       	sub	r22, r17
    2cd0:	71 09       	sbc	r23, r1
    2cd2:	3f c0       	rjmp	.+126    	; 0x2d52 <__fpcmp_parts_f+0xac>
    2cd4:	84 30       	cpi	r24, 0x04	; 4
    2cd6:	21 f0       	breq	.+8      	; 0x2ce0 <__fpcmp_parts_f+0x3a>
    2cd8:	92 30       	cpi	r25, 0x02	; 2
    2cda:	31 f4       	brne	.+12     	; 0x2ce8 <__fpcmp_parts_f+0x42>
    2cdc:	82 30       	cpi	r24, 0x02	; 2
    2cde:	b9 f1       	breq	.+110    	; 0x2d4e <__fpcmp_parts_f+0xa8>
    2ce0:	81 81       	ldd	r24, Z+1	; 0x01
    2ce2:	88 23       	and	r24, r24
    2ce4:	89 f1       	breq	.+98     	; 0x2d48 <__fpcmp_parts_f+0xa2>
    2ce6:	2d c0       	rjmp	.+90     	; 0x2d42 <__fpcmp_parts_f+0x9c>
    2ce8:	11 96       	adiw	r26, 0x01	; 1
    2cea:	1c 91       	ld	r17, X
    2cec:	11 97       	sbiw	r26, 0x01	; 1
    2cee:	82 30       	cpi	r24, 0x02	; 2
    2cf0:	f1 f0       	breq	.+60     	; 0x2d2e <__fpcmp_parts_f+0x88>
    2cf2:	81 81       	ldd	r24, Z+1	; 0x01
    2cf4:	18 17       	cp	r17, r24
    2cf6:	d9 f4       	brne	.+54     	; 0x2d2e <__fpcmp_parts_f+0x88>
    2cf8:	12 96       	adiw	r26, 0x02	; 2
    2cfa:	2d 91       	ld	r18, X+
    2cfc:	3c 91       	ld	r19, X
    2cfe:	13 97       	sbiw	r26, 0x03	; 3
    2d00:	82 81       	ldd	r24, Z+2	; 0x02
    2d02:	93 81       	ldd	r25, Z+3	; 0x03
    2d04:	82 17       	cp	r24, r18
    2d06:	93 07       	cpc	r25, r19
    2d08:	94 f0       	brlt	.+36     	; 0x2d2e <__fpcmp_parts_f+0x88>
    2d0a:	28 17       	cp	r18, r24
    2d0c:	39 07       	cpc	r19, r25
    2d0e:	bc f0       	brlt	.+46     	; 0x2d3e <__fpcmp_parts_f+0x98>
    2d10:	14 96       	adiw	r26, 0x04	; 4
    2d12:	8d 91       	ld	r24, X+
    2d14:	9d 91       	ld	r25, X+
    2d16:	0d 90       	ld	r0, X+
    2d18:	bc 91       	ld	r27, X
    2d1a:	a0 2d       	mov	r26, r0
    2d1c:	24 81       	ldd	r18, Z+4	; 0x04
    2d1e:	35 81       	ldd	r19, Z+5	; 0x05
    2d20:	46 81       	ldd	r20, Z+6	; 0x06
    2d22:	57 81       	ldd	r21, Z+7	; 0x07
    2d24:	28 17       	cp	r18, r24
    2d26:	39 07       	cpc	r19, r25
    2d28:	4a 07       	cpc	r20, r26
    2d2a:	5b 07       	cpc	r21, r27
    2d2c:	18 f4       	brcc	.+6      	; 0x2d34 <__fpcmp_parts_f+0x8e>
    2d2e:	11 23       	and	r17, r17
    2d30:	41 f0       	breq	.+16     	; 0x2d42 <__fpcmp_parts_f+0x9c>
    2d32:	0a c0       	rjmp	.+20     	; 0x2d48 <__fpcmp_parts_f+0xa2>
    2d34:	82 17       	cp	r24, r18
    2d36:	93 07       	cpc	r25, r19
    2d38:	a4 07       	cpc	r26, r20
    2d3a:	b5 07       	cpc	r27, r21
    2d3c:	40 f4       	brcc	.+16     	; 0x2d4e <__fpcmp_parts_f+0xa8>
    2d3e:	11 23       	and	r17, r17
    2d40:	19 f0       	breq	.+6      	; 0x2d48 <__fpcmp_parts_f+0xa2>
    2d42:	61 e0       	ldi	r22, 0x01	; 1
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	05 c0       	rjmp	.+10     	; 0x2d52 <__fpcmp_parts_f+0xac>
    2d48:	6f ef       	ldi	r22, 0xFF	; 255
    2d4a:	7f ef       	ldi	r23, 0xFF	; 255
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <__fpcmp_parts_f+0xac>
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	cb 01       	movw	r24, r22
    2d54:	1f 91       	pop	r17
    2d56:	08 95       	ret

00002d58 <__udivmodhi4>:
    2d58:	aa 1b       	sub	r26, r26
    2d5a:	bb 1b       	sub	r27, r27
    2d5c:	51 e1       	ldi	r21, 0x11	; 17
    2d5e:	07 c0       	rjmp	.+14     	; 0x2d6e <__udivmodhi4_ep>

00002d60 <__udivmodhi4_loop>:
    2d60:	aa 1f       	adc	r26, r26
    2d62:	bb 1f       	adc	r27, r27
    2d64:	a6 17       	cp	r26, r22
    2d66:	b7 07       	cpc	r27, r23
    2d68:	10 f0       	brcs	.+4      	; 0x2d6e <__udivmodhi4_ep>
    2d6a:	a6 1b       	sub	r26, r22
    2d6c:	b7 0b       	sbc	r27, r23

00002d6e <__udivmodhi4_ep>:
    2d6e:	88 1f       	adc	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	5a 95       	dec	r21
    2d74:	a9 f7       	brne	.-22     	; 0x2d60 <__udivmodhi4_loop>
    2d76:	80 95       	com	r24
    2d78:	90 95       	com	r25
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	08 95       	ret

00002d80 <__divmodhi4>:
    2d80:	97 fb       	bst	r25, 7
    2d82:	09 2e       	mov	r0, r25
    2d84:	07 26       	eor	r0, r23
    2d86:	0a d0       	rcall	.+20     	; 0x2d9c <__divmodhi4_neg1>
    2d88:	77 fd       	sbrc	r23, 7
    2d8a:	04 d0       	rcall	.+8      	; 0x2d94 <__divmodhi4_neg2>
    2d8c:	e5 df       	rcall	.-54     	; 0x2d58 <__udivmodhi4>
    2d8e:	06 d0       	rcall	.+12     	; 0x2d9c <__divmodhi4_neg1>
    2d90:	00 20       	and	r0, r0
    2d92:	1a f4       	brpl	.+6      	; 0x2d9a <__divmodhi4_exit>

00002d94 <__divmodhi4_neg2>:
    2d94:	70 95       	com	r23
    2d96:	61 95       	neg	r22
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255

00002d9a <__divmodhi4_exit>:
    2d9a:	08 95       	ret

00002d9c <__divmodhi4_neg1>:
    2d9c:	f6 f7       	brtc	.-4      	; 0x2d9a <__divmodhi4_exit>
    2d9e:	90 95       	com	r25
    2da0:	81 95       	neg	r24
    2da2:	9f 4f       	sbci	r25, 0xFF	; 255
    2da4:	08 95       	ret

00002da6 <__prologue_saves__>:
    2da6:	2f 92       	push	r2
    2da8:	3f 92       	push	r3
    2daa:	4f 92       	push	r4
    2dac:	5f 92       	push	r5
    2dae:	6f 92       	push	r6
    2db0:	7f 92       	push	r7
    2db2:	8f 92       	push	r8
    2db4:	9f 92       	push	r9
    2db6:	af 92       	push	r10
    2db8:	bf 92       	push	r11
    2dba:	cf 92       	push	r12
    2dbc:	df 92       	push	r13
    2dbe:	ef 92       	push	r14
    2dc0:	ff 92       	push	r15
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	ca 1b       	sub	r28, r26
    2dd0:	db 0b       	sbc	r29, r27
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	19 94       	eijmp

00002dde <__epilogue_restores__>:
    2dde:	2a 88       	ldd	r2, Y+18	; 0x12
    2de0:	39 88       	ldd	r3, Y+17	; 0x11
    2de2:	48 88       	ldd	r4, Y+16	; 0x10
    2de4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2de6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2de8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dea:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dec:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dee:	aa 84       	ldd	r10, Y+10	; 0x0a
    2df0:	b9 84       	ldd	r11, Y+9	; 0x09
    2df2:	c8 84       	ldd	r12, Y+8	; 0x08
    2df4:	df 80       	ldd	r13, Y+7	; 0x07
    2df6:	ee 80       	ldd	r14, Y+6	; 0x06
    2df8:	fd 80       	ldd	r15, Y+5	; 0x05
    2dfa:	0c 81       	ldd	r16, Y+4	; 0x04
    2dfc:	1b 81       	ldd	r17, Y+3	; 0x03
    2dfe:	aa 81       	ldd	r26, Y+2	; 0x02
    2e00:	b9 81       	ldd	r27, Y+1	; 0x01
    2e02:	ce 0f       	add	r28, r30
    2e04:	d1 1d       	adc	r29, r1
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	ed 01       	movw	r28, r26
    2e12:	08 95       	ret

00002e14 <_exit>:
    2e14:	f8 94       	cli

00002e16 <__stop_program>:
    2e16:	ff cf       	rjmp	.-2      	; 0x2e16 <__stop_program>
